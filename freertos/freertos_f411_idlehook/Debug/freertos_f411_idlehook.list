
freertos_f411_idlehook.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007014  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080071b4  080071b4  000171b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007348  08007348  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007348  08007348  00017348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007350  08007350  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007350  08007350  00017350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000174f0  20000078  080073d0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017568  080073d0  00027568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8bf  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000354a  00000000  00000000  0003a967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0003deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  0003f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190ed  00000000  00000000  00040770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ee6  00000000  00000000  0005985d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c44b  00000000  00000000  00071743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010db8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c78  00000000  00000000  0010dbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800719c 	.word	0x0800719c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800719c 	.word	0x0800719c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200174b0 	.word	0x200174b0

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000340:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000344:	f000 b96e 	b.w	8000624 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468c      	mov	ip, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	f040 8083 	bne.w	8000476 <__udivmoddi4+0x116>
 8000370:	428a      	cmp	r2, r1
 8000372:	4617      	mov	r7, r2
 8000374:	d947      	bls.n	8000406 <__udivmoddi4+0xa6>
 8000376:	fab2 f282 	clz	r2, r2
 800037a:	b142      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037c:	f1c2 0020 	rsb	r0, r2, #32
 8000380:	fa24 f000 	lsr.w	r0, r4, r0
 8000384:	4091      	lsls	r1, r2
 8000386:	4097      	lsls	r7, r2
 8000388:	ea40 0c01 	orr.w	ip, r0, r1
 800038c:	4094      	lsls	r4, r2
 800038e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbbc f6f8 	udiv	r6, ip, r8
 8000398:	fa1f fe87 	uxth.w	lr, r7
 800039c:	fb08 c116 	mls	r1, r8, r6, ip
 80003a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a4:	fb06 f10e 	mul.w	r1, r6, lr
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x60>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b2:	f080 8119 	bcs.w	80005e8 <__udivmoddi4+0x288>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 8116 	bls.w	80005e8 <__udivmoddi4+0x288>
 80003bc:	3e02      	subs	r6, #2
 80003be:	443b      	add	r3, r7
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x8c>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003de:	f080 8105 	bcs.w	80005ec <__udivmoddi4+0x28c>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f240 8102 	bls.w	80005ec <__udivmoddi4+0x28c>
 80003e8:	3802      	subs	r0, #2
 80003ea:	443c      	add	r4, r7
 80003ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	2600      	movs	r6, #0
 80003f6:	b11d      	cbz	r5, 8000400 <__udivmoddi4+0xa0>
 80003f8:	40d4      	lsrs	r4, r2
 80003fa:	2300      	movs	r3, #0
 80003fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000400:	4631      	mov	r1, r6
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	b902      	cbnz	r2, 800040a <__udivmoddi4+0xaa>
 8000408:	deff      	udf	#255	; 0xff
 800040a:	fab2 f282 	clz	r2, r2
 800040e:	2a00      	cmp	r2, #0
 8000410:	d150      	bne.n	80004b4 <__udivmoddi4+0x154>
 8000412:	1bcb      	subs	r3, r1, r7
 8000414:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000418:	fa1f f887 	uxth.w	r8, r7
 800041c:	2601      	movs	r6, #1
 800041e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000422:	0c21      	lsrs	r1, r4, #16
 8000424:	fb0e 331c 	mls	r3, lr, ip, r3
 8000428:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800042c:	fb08 f30c 	mul.w	r3, r8, ip
 8000430:	428b      	cmp	r3, r1
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0xe4>
 8000434:	1879      	adds	r1, r7, r1
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0xe2>
 800043c:	428b      	cmp	r3, r1
 800043e:	f200 80e9 	bhi.w	8000614 <__udivmoddi4+0x2b4>
 8000442:	4684      	mov	ip, r0
 8000444:	1ac9      	subs	r1, r1, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000450:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x10c>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x10a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80d9 	bhi.w	800061c <__udivmoddi4+0x2bc>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e7bf      	b.n	80003f6 <__udivmoddi4+0x96>
 8000476:	428b      	cmp	r3, r1
 8000478:	d909      	bls.n	800048e <__udivmoddi4+0x12e>
 800047a:	2d00      	cmp	r5, #0
 800047c:	f000 80b1 	beq.w	80005e2 <__udivmoddi4+0x282>
 8000480:	2600      	movs	r6, #0
 8000482:	e9c5 0100 	strd	r0, r1, [r5]
 8000486:	4630      	mov	r0, r6
 8000488:	4631      	mov	r1, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	fab3 f683 	clz	r6, r3
 8000492:	2e00      	cmp	r6, #0
 8000494:	d14a      	bne.n	800052c <__udivmoddi4+0x1cc>
 8000496:	428b      	cmp	r3, r1
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x140>
 800049a:	4282      	cmp	r2, r0
 800049c:	f200 80b8 	bhi.w	8000610 <__udivmoddi4+0x2b0>
 80004a0:	1a84      	subs	r4, r0, r2
 80004a2:	eb61 0103 	sbc.w	r1, r1, r3
 80004a6:	2001      	movs	r0, #1
 80004a8:	468c      	mov	ip, r1
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d0a8      	beq.n	8000400 <__udivmoddi4+0xa0>
 80004ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80004b2:	e7a5      	b.n	8000400 <__udivmoddi4+0xa0>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f603 	lsr.w	r6, r0, r3
 80004bc:	4097      	lsls	r7, r2
 80004be:	fa01 f002 	lsl.w	r0, r1, r2
 80004c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c6:	40d9      	lsrs	r1, r3
 80004c8:	4330      	orrs	r0, r6
 80004ca:	0c03      	lsrs	r3, r0, #16
 80004cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004d0:	fa1f f887 	uxth.w	r8, r7
 80004d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004dc:	fb06 f108 	mul.w	r1, r6, r8
 80004e0:	4299      	cmp	r1, r3
 80004e2:	fa04 f402 	lsl.w	r4, r4, r2
 80004e6:	d909      	bls.n	80004fc <__udivmoddi4+0x19c>
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ee:	f080 808d 	bcs.w	800060c <__udivmoddi4+0x2ac>
 80004f2:	4299      	cmp	r1, r3
 80004f4:	f240 808a 	bls.w	800060c <__udivmoddi4+0x2ac>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	443b      	add	r3, r7
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b281      	uxth	r1, r0
 8000500:	fbb3 f0fe 	udiv	r0, r3, lr
 8000504:	fb0e 3310 	mls	r3, lr, r0, r3
 8000508:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050c:	fb00 f308 	mul.w	r3, r0, r8
 8000510:	428b      	cmp	r3, r1
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x1c4>
 8000514:	1879      	adds	r1, r7, r1
 8000516:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800051a:	d273      	bcs.n	8000604 <__udivmoddi4+0x2a4>
 800051c:	428b      	cmp	r3, r1
 800051e:	d971      	bls.n	8000604 <__udivmoddi4+0x2a4>
 8000520:	3802      	subs	r0, #2
 8000522:	4439      	add	r1, r7
 8000524:	1acb      	subs	r3, r1, r3
 8000526:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800052a:	e778      	b.n	800041e <__udivmoddi4+0xbe>
 800052c:	f1c6 0c20 	rsb	ip, r6, #32
 8000530:	fa03 f406 	lsl.w	r4, r3, r6
 8000534:	fa22 f30c 	lsr.w	r3, r2, ip
 8000538:	431c      	orrs	r4, r3
 800053a:	fa20 f70c 	lsr.w	r7, r0, ip
 800053e:	fa01 f306 	lsl.w	r3, r1, r6
 8000542:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000546:	fa21 f10c 	lsr.w	r1, r1, ip
 800054a:	431f      	orrs	r7, r3
 800054c:	0c3b      	lsrs	r3, r7, #16
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fa1f f884 	uxth.w	r8, r4
 8000556:	fb0e 1119 	mls	r1, lr, r9, r1
 800055a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800055e:	fb09 fa08 	mul.w	sl, r9, r8
 8000562:	458a      	cmp	sl, r1
 8000564:	fa02 f206 	lsl.w	r2, r2, r6
 8000568:	fa00 f306 	lsl.w	r3, r0, r6
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x220>
 800056e:	1861      	adds	r1, r4, r1
 8000570:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000574:	d248      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 8000576:	458a      	cmp	sl, r1
 8000578:	d946      	bls.n	8000608 <__udivmoddi4+0x2a8>
 800057a:	f1a9 0902 	sub.w	r9, r9, #2
 800057e:	4421      	add	r1, r4
 8000580:	eba1 010a 	sub.w	r1, r1, sl
 8000584:	b2bf      	uxth	r7, r7
 8000586:	fbb1 f0fe 	udiv	r0, r1, lr
 800058a:	fb0e 1110 	mls	r1, lr, r0, r1
 800058e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000592:	fb00 f808 	mul.w	r8, r0, r8
 8000596:	45b8      	cmp	r8, r7
 8000598:	d907      	bls.n	80005aa <__udivmoddi4+0x24a>
 800059a:	19e7      	adds	r7, r4, r7
 800059c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005a0:	d22e      	bcs.n	8000600 <__udivmoddi4+0x2a0>
 80005a2:	45b8      	cmp	r8, r7
 80005a4:	d92c      	bls.n	8000600 <__udivmoddi4+0x2a0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	4427      	add	r7, r4
 80005aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ae:	eba7 0708 	sub.w	r7, r7, r8
 80005b2:	fba0 8902 	umull	r8, r9, r0, r2
 80005b6:	454f      	cmp	r7, r9
 80005b8:	46c6      	mov	lr, r8
 80005ba:	4649      	mov	r1, r9
 80005bc:	d31a      	bcc.n	80005f4 <__udivmoddi4+0x294>
 80005be:	d017      	beq.n	80005f0 <__udivmoddi4+0x290>
 80005c0:	b15d      	cbz	r5, 80005da <__udivmoddi4+0x27a>
 80005c2:	ebb3 020e 	subs.w	r2, r3, lr
 80005c6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ce:	40f2      	lsrs	r2, r6
 80005d0:	ea4c 0202 	orr.w	r2, ip, r2
 80005d4:	40f7      	lsrs	r7, r6
 80005d6:	e9c5 2700 	strd	r2, r7, [r5]
 80005da:	2600      	movs	r6, #0
 80005dc:	4631      	mov	r1, r6
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e70b      	b.n	8000400 <__udivmoddi4+0xa0>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0x60>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6fd      	b.n	80003ec <__udivmoddi4+0x8c>
 80005f0:	4543      	cmp	r3, r8
 80005f2:	d2e5      	bcs.n	80005c0 <__udivmoddi4+0x260>
 80005f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005f8:	eb69 0104 	sbc.w	r1, r9, r4
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7df      	b.n	80005c0 <__udivmoddi4+0x260>
 8000600:	4608      	mov	r0, r1
 8000602:	e7d2      	b.n	80005aa <__udivmoddi4+0x24a>
 8000604:	4660      	mov	r0, ip
 8000606:	e78d      	b.n	8000524 <__udivmoddi4+0x1c4>
 8000608:	4681      	mov	r9, r0
 800060a:	e7b9      	b.n	8000580 <__udivmoddi4+0x220>
 800060c:	4666      	mov	r6, ip
 800060e:	e775      	b.n	80004fc <__udivmoddi4+0x19c>
 8000610:	4630      	mov	r0, r6
 8000612:	e74a      	b.n	80004aa <__udivmoddi4+0x14a>
 8000614:	f1ac 0c02 	sub.w	ip, ip, #2
 8000618:	4439      	add	r1, r7
 800061a:	e713      	b.n	8000444 <__udivmoddi4+0xe4>
 800061c:	3802      	subs	r0, #2
 800061e:	443c      	add	r4, r7
 8000620:	e724      	b.n	800046c <__udivmoddi4+0x10c>
 8000622:	bf00      	nop

08000624 <__aeabi_idiv0>:
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop

08000628 <print_uart_sz>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_uart_sz(char *msg){
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	for(int inx = 0; inx < strlen(msg); inx++)	{
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	e011      	b.n	800065a <print_uart_sz+0x32>
		while (!(huart2.Instance->SR & UART_FLAG_TXE));
 8000636:	bf00      	nop
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <print_uart_sz+0x5c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f8      	beq.n	8000638 <print_uart_sz+0x10>
		huart2.Instance->DR = (uint16_t) msg[inx];
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <print_uart_sz+0x5c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
	for(int inx = 0; inx < strlen(msg); inx++)	{
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff fe0a 	bl	8000274 <strlen>
 8000660:	4602      	mov	r2, r0
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	d8e6      	bhi.n	8000636 <print_uart_sz+0xe>
		}
	while (!(huart2.Instance->SR & UART_FLAG_TC));
 8000668:	bf00      	nop
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <print_uart_sz+0x5c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0f8      	beq.n	800066a <print_uart_sz+0x42>
	}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200173e0 	.word	0x200173e0

08000688 <print_msg>:

void print_msg(char *format,...){
 8000688:	b40f      	push	{r0, r1, r2, r3}
 800068a:	b580      	push	{r7, lr}
 800068c:	b0a0      	sub	sp, #128	; 0x80
 800068e:	af00      	add	r7, sp, #0
	char str[120];
	va_list args;
	va_start(args, format);
 8000690:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000694:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80006a0:	4618      	mov	r0, r3
 80006a2:	f006 f963 	bl	800696c <vsiprintf>
	print_uart_sz(str);
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffbc 	bl	8000628 <print_uart_sz>
	va_end(args);
 	}
 80006b0:	bf00      	nop
 80006b2:	3780      	adds	r7, #128	; 0x80
 80006b4:	46bd      	mov	sp, r7
 80006b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006ba:	b004      	add	sp, #16
 80006bc:	4770      	bx	lr
	...

080006c0 <vTask1_handler>:


void vTask1_handler(void *params){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	while(1)	{
		print_msg("LED state = %d\r\n",HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13));
 80006c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <vTask1_handler+0x24>)
 80006ce:	f000 fd9d 	bl	800120c <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4619      	mov	r1, r3
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <vTask1_handler+0x28>)
 80006d8:	f7ff ffd6 	bl	8000688 <print_msg>
		vTaskDelay(pdMS_TO_TICKS(80));
 80006dc:	2050      	movs	r0, #80	; 0x50
 80006de:	f002 fe63 	bl	80033a8 <vTaskDelay>
		print_msg("LED state = %d\r\n",HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13));
 80006e2:	e7f1      	b.n	80006c8 <vTask1_handler+0x8>
 80006e4:	40020800 	.word	0x40020800
 80006e8:	080071b4 	.word	0x080071b4

080006ec <vTask2_handler>:
		}
	}


void vTask2_handler(void *params){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	while(1)	{
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80006f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <vTask2_handler+0x1c>)
 80006fa:	f000 fdb8 	bl	800126e <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(50));
 80006fe:	2032      	movs	r0, #50	; 0x32
 8000700:	f002 fe52 	bl	80033a8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000704:	e7f6      	b.n	80006f4 <vTask2_handler+0x8>
 8000706:	bf00      	nop
 8000708:	40020800 	.word	0x40020800

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f000 faaf 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f877 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f000 f907 	bl	800092c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800071e:	f000 f8db 	bl	80008d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  DWT->CTRL |= (1 << 0); // enable CYCCNT for SystemView
 8000722:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <main+0xcc>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <main+0xcc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6013      	str	r3, [r2, #0]
  //Start Recording
  SEGGER_SYSVIEW_Conf();
 800072e:	f004 fbc9 	bl	8004ec4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000732:	f005 faf1 	bl	8005d18 <SEGGER_SYSVIEW_Start>

  print_msg("SystemCoreClock %lu\r\n", SystemCoreClock);
 8000736:	4b29      	ldr	r3, [pc, #164]	; (80007dc <main+0xd0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4619      	mov	r1, r3
 800073c:	4828      	ldr	r0, [pc, #160]	; (80007e0 <main+0xd4>)
 800073e:	f7ff ffa3 	bl	8000688 <print_msg>
  print_msg("Demo idle hook\r\n");
 8000742:	4828      	ldr	r0, [pc, #160]	; (80007e4 <main+0xd8>)
 8000744:	f7ff ffa0 	bl	8000688 <print_msg>

  status = xTaskCreate(vTask1_handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle1);
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <main+0xdc>)
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	2302      	movs	r3, #2
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2300      	movs	r3, #0
 8000752:	2282      	movs	r2, #130	; 0x82
 8000754:	4925      	ldr	r1, [pc, #148]	; (80007ec <main+0xe0>)
 8000756:	4826      	ldr	r0, [pc, #152]	; (80007f0 <main+0xe4>)
 8000758:	f002 fcc2 	bl	80030e0 <xTaskCreate>
 800075c:	60b8      	str	r0, [r7, #8]
  configASSERT(status == pdPASS);
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d00a      	beq.n	800077a <main+0x6e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000768:	f383 8811 	msr	BASEPRI, r3
 800076c:	f3bf 8f6f 	isb	sy
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000776:	bf00      	nop
 8000778:	e7fe      	b.n	8000778 <main+0x6c>
  status = xTaskCreate(vTask2_handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle2);
 800077a:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <main+0xe8>)
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	2302      	movs	r3, #2
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2300      	movs	r3, #0
 8000784:	2282      	movs	r2, #130	; 0x82
 8000786:	491c      	ldr	r1, [pc, #112]	; (80007f8 <main+0xec>)
 8000788:	481c      	ldr	r0, [pc, #112]	; (80007fc <main+0xf0>)
 800078a:	f002 fca9 	bl	80030e0 <xTaskCreate>
 800078e:	60b8      	str	r0, [r7, #8]
  configASSERT(status == pdPASS);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d00a      	beq.n	80007ac <main+0xa0>
        __asm volatile
 8000796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800079a:	f383 8811 	msr	BASEPRI, r3
 800079e:	f3bf 8f6f 	isb	sy
 80007a2:	f3bf 8f4f 	dsb	sy
 80007a6:	603b      	str	r3, [r7, #0]
    }
 80007a8:	bf00      	nop
 80007aa:	e7fe      	b.n	80007aa <main+0x9e>
  vTaskStartScheduler();
 80007ac:	f002 fe34 	bl	8003418 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // This code is used to test CubeMx generated code before adding FreeRTOS tasks.
  // It will not be executed if vTaskStartScheduler() runs successfully
  int counter = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  while (1)  {
	  // blink on-board LED and print a message on USART2
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <main+0xf4>)
 80007ba:	f000 fd58 	bl	800126e <HAL_GPIO_TogglePin>
	  print_msg("Counter = %d\r\n", counter++);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	60fa      	str	r2, [r7, #12]
 80007c4:	4619      	mov	r1, r3
 80007c6:	480f      	ldr	r0, [pc, #60]	; (8000804 <main+0xf8>)
 80007c8:	f7ff ff5e 	bl	8000688 <print_msg>
	  HAL_Delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d0:	f000 fa92 	bl	8000cf8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007d4:	e7ee      	b.n	80007b4 <main+0xa8>
 80007d6:	bf00      	nop
 80007d8:	e0001000 	.word	0xe0001000
 80007dc:	20000000 	.word	0x20000000
 80007e0:	080071c8 	.word	0x080071c8
 80007e4:	080071e0 	.word	0x080071e0
 80007e8:	20000094 	.word	0x20000094
 80007ec:	080071f4 	.word	0x080071f4
 80007f0:	080006c1 	.word	0x080006c1
 80007f4:	20000098 	.word	0x20000098
 80007f8:	080071fc 	.word	0x080071fc
 80007fc:	080006ed 	.word	0x080006ed
 8000800:	40020800 	.word	0x40020800
 8000804:	08007204 	.word	0x08007204

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	; 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2230      	movs	r2, #48	; 0x30
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f006 f88a 	bl	8006930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <SystemClock_Config+0xc8>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <SystemClock_Config+0xc8>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <SystemClock_Config+0xc8>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <SystemClock_Config+0xcc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <SystemClock_Config+0xcc>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <SystemClock_Config+0xcc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000878:	2319      	movs	r3, #25
 800087a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800087c:	23c0      	movs	r3, #192	; 0xc0
 800087e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000880:	2302      	movs	r3, #2
 8000882:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fd09 	bl	80012a4 <HAL_RCC_OscConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000898:	f000 f8ac 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089c:	230f      	movs	r3, #15
 800089e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a0:	2302      	movs	r3, #2
 80008a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2103      	movs	r1, #3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 ff6b 	bl	8001794 <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008c4:	f000 f896 	bl	80009f4 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	; 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART2_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000910:	f001 fbc2 	bl	8002098 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 f86b 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200173e0 	.word	0x200173e0
 8000928:	40004400 	.word	0x40004400

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_GPIO_Init+0x9c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <MX_GPIO_Init+0x9c>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_GPIO_Init+0x9c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_GPIO_Init+0x9c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <MX_GPIO_Init+0x9c>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_GPIO_Init+0x9c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_GPIO_Init+0x9c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <MX_GPIO_Init+0x9c>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_GPIO_Init+0x9c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_GPIO_Init+0xa0>)
 800099e:	f000 fc4d 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4619      	mov	r1, r3
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0xa0>)
 80009bc:	f000 faa2 	bl	8000f04 <HAL_GPIO_Init>

}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020800 	.word	0x40020800

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 f969 	bl	8000cb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40014400 	.word	0x40014400

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fa:	b672      	cpsid	i
}
 80009fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	int counter = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <Error_Handler+0x30>)
 8000a08:	f000 fc31 	bl	800126e <HAL_GPIO_TogglePin>
		while (counter < 0x3FFFF) {counter++;}
 8000a0c:	e002      	b.n	8000a14 <Error_Handler+0x20>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3301      	adds	r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <Error_Handler+0x34>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	ddf8      	ble.n	8000a0e <Error_Handler+0x1a>
		counter = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a20:	e7ef      	b.n	8000a02 <Error_Handler+0xe>
 8000a22:	bf00      	nop
 8000a24:	40020800 	.word	0x40020800
 8000a28:	0003fffe 	.word	0x0003fffe

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000a6a:	f003 fe75 	bl	8004758 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_UART_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12b      	bne.n	8000af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_UART_MspInit+0x8c>)
 8000af2:	f000 fa07 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2019      	movs	r0, #25
 8000b22:	f000 f9c5 	bl	8000eb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b26:	2019      	movs	r0, #25
 8000b28:	f000 f9de 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <HAL_InitTick+0xa0>)
 8000b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b34:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <HAL_InitTick+0xa0>)
 8000b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_InitTick+0xa0>)
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b48:	f107 0210 	add.w	r2, r7, #16
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 ffee 	bl	8001b34 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b58:	f000 ffd8 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 8000b5c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b60:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	0c9b      	lsrs	r3, r3, #18
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b78:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b8e:	f001 f803 	bl	8001b98 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d104      	bne.n	8000ba2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000b98:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b9a:	f001 f857 	bl	8001c4c <HAL_TIM_Base_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3730      	adds	r7, #48	; 0x30
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	431bde83 	.word	0x431bde83
 8000bb4:	20017424 	.word	0x20017424
 8000bb8:	40014400 	.word	0x40014400

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bee:	f001 f88f 	bl	8001d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20017424 	.word	0x20017424

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f005 fe2f 	bl	80068b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fd5b 	bl	800070c <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c64:	08007358 	.word	0x08007358
  ldr r2, =_sbss
 8000c68:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c6c:	20017568 	.word	0x20017568

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f8fc 	bl	8000e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff ff32 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fec0 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	2001746c 	.word	0x2001746c

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	2001746c 	.word	0x2001746c

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff ffee 	bl	8000ce0 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d1e:	bf00      	nop
 8000d20:	f7ff ffde 	bl	8000ce0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff4c 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec2:	f7ff ff61 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff ffb1 	bl	8000e34 <NVIC_EncodePriority>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff80 	bl	8000de0 <__NVIC_SetPriority>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff54 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e159      	b.n	80011d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 8148 	bne.w	80011ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80a2 	beq.w	80011ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b57      	ldr	r3, [pc, #348]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a56      	ldr	r2, [pc, #344]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b54      	ldr	r3, [pc, #336]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <HAL_GPIO_Init+0x2ec>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a49      	ldr	r2, [pc, #292]	; (80011f4 <HAL_GPIO_Init+0x2f0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0x202>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_GPIO_Init+0x2f4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x1fe>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a47      	ldr	r2, [pc, #284]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x1fa>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a46      	ldr	r2, [pc, #280]	; (8001200 <HAL_GPIO_Init+0x2fc>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x1f6>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a45      	ldr	r2, [pc, #276]	; (8001204 <HAL_GPIO_Init+0x300>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x1f2>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x204>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x204>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <HAL_GPIO_Init+0x2ec>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114a:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <HAL_GPIO_Init+0x304>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001174:	4a24      	ldr	r2, [pc, #144]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_GPIO_Init+0x304>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119e:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f aea2 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4013      	ands	r3, r2
 8001286:	041a      	lsls	r2, r3, #16
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43d9      	mvns	r1, r3
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	400b      	ands	r3, r1
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e264      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d075      	beq.n	80013ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	4ba3      	ldr	r3, [pc, #652]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d00c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4ba0      	ldr	r3, [pc, #640]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d112      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012da:	4b9d      	ldr	r3, [pc, #628]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e6:	d10b      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4b99      	ldr	r3, [pc, #612]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d05b      	beq.n	80013ac <HAL_RCC_OscConfig+0x108>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d157      	bne.n	80013ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e23f      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d106      	bne.n	8001318 <HAL_RCC_OscConfig+0x74>
 800130a:	4b91      	ldr	r3, [pc, #580]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a90      	ldr	r2, [pc, #576]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b8b      	ldr	r3, [pc, #556]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a8a      	ldr	r2, [pc, #552]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b88      	ldr	r3, [pc, #544]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a87      	ldr	r2, [pc, #540]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 800133c:	4b84      	ldr	r3, [pc, #528]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a83      	ldr	r2, [pc, #524]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b81      	ldr	r3, [pc, #516]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a80      	ldr	r2, [pc, #512]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fcc0 	bl	8000ce0 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fcbc 	bl	8000ce0 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e204      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xc0>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcac 	bl	8000ce0 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fca8 	bl	8000ce0 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1f0      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b6c      	ldr	r3, [pc, #432]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0xe8>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	4b65      	ldr	r3, [pc, #404]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b62      	ldr	r3, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	4b5f      	ldr	r3, [pc, #380]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b5c      	ldr	r3, [pc, #368]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1c4      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b56      	ldr	r3, [pc, #344]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4952      	ldr	r1, [pc, #328]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <HAL_RCC_OscConfig+0x2b0>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fc61 	bl	8000ce0 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc5d 	bl	8000ce0 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1a5      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b46      	ldr	r3, [pc, #280]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b43      	ldr	r3, [pc, #268]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4940      	ldr	r1, [pc, #256]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <HAL_RCC_OscConfig+0x2b0>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc40 	bl	8000ce0 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fc3c 	bl	8000ce0 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e184      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d030      	beq.n	80014f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d016      	beq.n	80014c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_RCC_OscConfig+0x2b4>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fc20 	bl	8000ce0 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc1c 	bl	8000ce0 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e164      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x200>
 80014c2:	e015      	b.n	80014f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_RCC_OscConfig+0x2b4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fc09 	bl	8000ce0 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc05 	bl	8000ce0 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e14d      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80014e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80a0 	beq.w	800163e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10f      	bne.n	800152e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152a:	2301      	movs	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_OscConfig+0x2b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d121      	bne.n	800157e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_RCC_OscConfig+0x2b8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_RCC_OscConfig+0x2b8>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001546:	f7ff fbcb 	bl	8000ce0 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	e011      	b.n	8001572 <HAL_RCC_OscConfig+0x2ce>
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	42470000 	.word	0x42470000
 8001558:	42470e80 	.word	0x42470e80
 800155c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001560:	f7ff fbbe 	bl	8000ce0 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e106      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001572:	4b85      	ldr	r3, [pc, #532]	; (8001788 <HAL_RCC_OscConfig+0x4e4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d106      	bne.n	8001594 <HAL_RCC_OscConfig+0x2f0>
 8001586:	4b81      	ldr	r3, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	4a80      	ldr	r2, [pc, #512]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	; 0x70
 8001592:	e01c      	b.n	80015ce <HAL_RCC_OscConfig+0x32a>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b05      	cmp	r3, #5
 800159a:	d10c      	bne.n	80015b6 <HAL_RCC_OscConfig+0x312>
 800159c:	4b7b      	ldr	r3, [pc, #492]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	4b78      	ldr	r3, [pc, #480]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	4a77      	ldr	r2, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6713      	str	r3, [r2, #112]	; 0x70
 80015b4:	e00b      	b.n	80015ce <HAL_RCC_OscConfig+0x32a>
 80015b6:	4b75      	ldr	r3, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a74      	ldr	r2, [pc, #464]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
 80015c2:	4b72      	ldr	r3, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a71      	ldr	r2, [pc, #452]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015c8:	f023 0304 	bic.w	r3, r3, #4
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d015      	beq.n	8001602 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d6:	f7ff fb83 	bl	8000ce0 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff fb7f 	bl	8000ce0 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0c5      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	4b65      	ldr	r3, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0ee      	beq.n	80015de <HAL_RCC_OscConfig+0x33a>
 8001600:	e014      	b.n	800162c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff fb6d 	bl	8000ce0 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7ff fb69 	bl	8000ce0 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f241 3288 	movw	r2, #5000	; 0x1388
 8001618:	4293      	cmp	r3, r2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e0af      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	4b5a      	ldr	r3, [pc, #360]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1ee      	bne.n	800160a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d105      	bne.n	800163e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001632:	4b56      	ldr	r3, [pc, #344]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a55      	ldr	r2, [pc, #340]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 809b 	beq.w	800177e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001648:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b08      	cmp	r3, #8
 8001652:	d05c      	beq.n	800170e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d141      	bne.n	80016e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb3d 	bl	8000ce0 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb39 	bl	8000ce0 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e081      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69da      	ldr	r2, [r3, #28]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	019b      	lsls	r3, r3, #6
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	3b01      	subs	r3, #1
 80016a2:	041b      	lsls	r3, r3, #16
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	061b      	lsls	r3, r3, #24
 80016ac:	4937      	ldr	r1, [pc, #220]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb12 	bl	8000ce0 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff fb0e 	bl	8000ce0 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e056      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x41c>
 80016de:	e04e      	b.n	800177e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fafb 	bl	8000ce0 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff faf7 	bl	8000ce0 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e03f      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x44a>
 800170c:	e037      	b.n	800177e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e032      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d028      	beq.n	800177a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d121      	bne.n	800177a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d11a      	bne.n	800177a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800174a:	4013      	ands	r3, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001750:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001752:	4293      	cmp	r3, r2
 8001754:	d111      	bne.n	800177a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	085b      	lsrs	r3, r3, #1
 8001762:	3b01      	subs	r3, #1
 8001764:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d107      	bne.n	800177a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40007000 	.word	0x40007000
 800178c:	40023800 	.word	0x40023800
 8001790:	42470060 	.word	0x42470060

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0cc      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b68      	ldr	r3, [pc, #416]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d90c      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b8      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	494d      	ldr	r1, [pc, #308]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d044      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d119      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d003      	beq.n	8001852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e067      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001872:	4b37      	ldr	r3, [pc, #220]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f023 0203 	bic.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4934      	ldr	r1, [pc, #208]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001884:	f7ff fa2c 	bl	8000ce0 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7ff fa28 	bl	8000ce0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e04f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 020c 	and.w	r2, r3, #12
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1eb      	bne.n	800188c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d20c      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e032      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4916      	ldr	r1, [pc, #88]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191a:	f000 f821 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	490a      	ldr	r1, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f8e6 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00
 8001950:	40023800 	.word	0x40023800
 8001954:	080072e8 	.word	0x080072e8
 8001958:	20000000 	.word	0x20000000
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001966:	2100      	movs	r1, #0
 8001968:	6079      	str	r1, [r7, #4]
 800196a:	2100      	movs	r1, #0
 800196c:	60f9      	str	r1, [r7, #12]
 800196e:	2100      	movs	r1, #0
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001972:	2100      	movs	r1, #0
 8001974:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001976:	4952      	ldr	r1, [pc, #328]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001978:	6889      	ldr	r1, [r1, #8]
 800197a:	f001 010c 	and.w	r1, r1, #12
 800197e:	2908      	cmp	r1, #8
 8001980:	d00d      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x3e>
 8001982:	2908      	cmp	r1, #8
 8001984:	f200 8094 	bhi.w	8001ab0 <HAL_RCC_GetSysClockFreq+0x150>
 8001988:	2900      	cmp	r1, #0
 800198a:	d002      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0x32>
 800198c:	2904      	cmp	r1, #4
 800198e:	d003      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x38>
 8001990:	e08e      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001994:	60bb      	str	r3, [r7, #8]
       break;
 8001996:	e08e      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001998:	4b4b      	ldr	r3, [pc, #300]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x168>)
 800199a:	60bb      	str	r3, [r7, #8]
      break;
 800199c:	e08b      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800199e:	4948      	ldr	r1, [pc, #288]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x160>)
 80019a0:	6849      	ldr	r1, [r1, #4]
 80019a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80019a6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a8:	4945      	ldr	r1, [pc, #276]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x160>)
 80019aa:	6849      	ldr	r1, [r1, #4]
 80019ac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80019b0:	2900      	cmp	r1, #0
 80019b2:	d024      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b4:	4942      	ldr	r1, [pc, #264]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x160>)
 80019b6:	6849      	ldr	r1, [r1, #4]
 80019b8:	0989      	lsrs	r1, r1, #6
 80019ba:	4608      	mov	r0, r1
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80019c4:	f04f 0500 	mov.w	r5, #0
 80019c8:	ea00 0204 	and.w	r2, r0, r4
 80019cc:	ea01 0305 	and.w	r3, r1, r5
 80019d0:	493d      	ldr	r1, [pc, #244]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x168>)
 80019d2:	fb01 f003 	mul.w	r0, r1, r3
 80019d6:	2100      	movs	r1, #0
 80019d8:	fb01 f102 	mul.w	r1, r1, r2
 80019dc:	1844      	adds	r4, r0, r1
 80019de:	493a      	ldr	r1, [pc, #232]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x168>)
 80019e0:	fba2 0101 	umull	r0, r1, r2, r1
 80019e4:	1863      	adds	r3, r4, r1
 80019e6:	4619      	mov	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	461a      	mov	r2, r3
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	f7fe fc9e 	bl	8000330 <__aeabi_uldivmod>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4613      	mov	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e04a      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fe:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	099b      	lsrs	r3, r3, #6
 8001a04:	461a      	mov	r2, r3
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a0e:	f04f 0100 	mov.w	r1, #0
 8001a12:	ea02 0400 	and.w	r4, r2, r0
 8001a16:	ea03 0501 	and.w	r5, r3, r1
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	014b      	lsls	r3, r1, #5
 8001a28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a2c:	0142      	lsls	r2, r0, #5
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	1b00      	subs	r0, r0, r4
 8001a34:	eb61 0105 	sbc.w	r1, r1, r5
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	018b      	lsls	r3, r1, #6
 8001a42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a46:	0182      	lsls	r2, r0, #6
 8001a48:	1a12      	subs	r2, r2, r0
 8001a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4e:	f04f 0000 	mov.w	r0, #0
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	00d9      	lsls	r1, r3, #3
 8001a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a5c:	00d0      	lsls	r0, r2, #3
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	1912      	adds	r2, r2, r4
 8001a64:	eb45 0303 	adc.w	r3, r5, r3
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	0299      	lsls	r1, r3, #10
 8001a72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a76:	0290      	lsls	r0, r2, #10
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	461a      	mov	r2, r3
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	f7fe fc52 	bl	8000330 <__aeabi_uldivmod>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4613      	mov	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	60bb      	str	r3, [r7, #8]
      break;
 8001aae:	e002      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001ab2:	60bb      	str	r3, [r7, #8]
      break;
 8001ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	00f42400 	.word	0x00f42400
 8001ac8:	017d7840 	.word	0x017d7840

08001acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae8:	f7ff fff0 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	0a9b      	lsrs	r3, r3, #10
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4903      	ldr	r1, [pc, #12]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	080072f8 	.word	0x080072f8

08001b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b10:	f7ff ffdc 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0b5b      	lsrs	r3, r3, #13
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	080072f8 	.word	0x080072f8

08001b34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	220f      	movs	r2, #15
 8001b42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_RCC_GetClockConfig+0x60>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0207 	and.w	r2, r3, #7
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e041      	b.n	8001c2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f839 	bl	8001c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f000 f9ca 	bl	8001f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d001      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e044      	b.n	8001cee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1e      	ldr	r2, [pc, #120]	; (8001cfc <HAL_TIM_Base_Start_IT+0xb0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d018      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8e:	d013      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1a      	ldr	r2, [pc, #104]	; (8001d00 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00e      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_TIM_Base_Start_IT+0xbc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <HAL_TIM_Base_Start_IT+0xc0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d111      	bne.n	8001cdc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d010      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cda:	e007      	b.n	8001cec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40000800 	.word	0x40000800
 8001d08:	40000c00 	.word	0x40000c00
 8001d0c:	40014000 	.word	0x40014000

08001d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d122      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d11b      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0202 	mvn.w	r2, #2
 8001d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8ee 	bl	8001f34 <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8e0 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f8f1 	bl	8001f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d122      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d11b      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0204 	mvn.w	r2, #4
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8c4 	bl	8001f34 <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8b6 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f8c7 	bl	8001f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d122      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d11b      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0208 	mvn.w	r2, #8
 8001de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2204      	movs	r2, #4
 8001dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f89a 	bl	8001f34 <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f88c 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f89d 	bl	8001f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b10      	cmp	r3, #16
 8001e20:	d122      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b10      	cmp	r3, #16
 8001e2e:	d11b      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0210 	mvn.w	r2, #16
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f870 	bl	8001f34 <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f862 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f873 	bl	8001f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d10e      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d107      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0201 	mvn.w	r2, #1
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe fd9e 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b80      	cmp	r3, #128	; 0x80
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eac:	2b80      	cmp	r3, #128	; 0x80
 8001eae:	d107      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f8e2 	bl	8002084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eca:	2b40      	cmp	r3, #64	; 0x40
 8001ecc:	d10e      	bne.n	8001eec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed8:	2b40      	cmp	r3, #64	; 0x40
 8001eda:	d107      	bne.n	8001eec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f838 	bl	8001f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d10e      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d107      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0220 	mvn.w	r2, #32
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8ac 	bl	8002070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a34      	ldr	r2, [pc, #208]	; (8002054 <TIM_Base_SetConfig+0xe4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00f      	beq.n	8001fa8 <TIM_Base_SetConfig+0x38>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8e:	d00b      	beq.n	8001fa8 <TIM_Base_SetConfig+0x38>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a31      	ldr	r2, [pc, #196]	; (8002058 <TIM_Base_SetConfig+0xe8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d007      	beq.n	8001fa8 <TIM_Base_SetConfig+0x38>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a30      	ldr	r2, [pc, #192]	; (800205c <TIM_Base_SetConfig+0xec>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d003      	beq.n	8001fa8 <TIM_Base_SetConfig+0x38>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a2f      	ldr	r2, [pc, #188]	; (8002060 <TIM_Base_SetConfig+0xf0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d108      	bne.n	8001fba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a25      	ldr	r2, [pc, #148]	; (8002054 <TIM_Base_SetConfig+0xe4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01b      	beq.n	8001ffa <TIM_Base_SetConfig+0x8a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc8:	d017      	beq.n	8001ffa <TIM_Base_SetConfig+0x8a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a22      	ldr	r2, [pc, #136]	; (8002058 <TIM_Base_SetConfig+0xe8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <TIM_Base_SetConfig+0x8a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <TIM_Base_SetConfig+0xec>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00f      	beq.n	8001ffa <TIM_Base_SetConfig+0x8a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a20      	ldr	r2, [pc, #128]	; (8002060 <TIM_Base_SetConfig+0xf0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00b      	beq.n	8001ffa <TIM_Base_SetConfig+0x8a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <TIM_Base_SetConfig+0xf4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <TIM_Base_SetConfig+0x8a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <TIM_Base_SetConfig+0xf8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <TIM_Base_SetConfig+0x8a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <TIM_Base_SetConfig+0xfc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d108      	bne.n	800200c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <TIM_Base_SetConfig+0xe4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d103      	bne.n	8002040 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	615a      	str	r2, [r3, #20]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40010000 	.word	0x40010000
 8002058:	40000400 	.word	0x40000400
 800205c:	40000800 	.word	0x40000800
 8002060:	40000c00 	.word	0x40000c00
 8002064:	40014000 	.word	0x40014000
 8002068:	40014400 	.word	0x40014400
 800206c:	40014800 	.word	0x40014800

08002070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e03f      	b.n	800212a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe fcdc 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2224      	movs	r2, #36	; 0x24
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f829 	bl	8002134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002138:	b09f      	sub	sp, #124	; 0x7c
 800213a:	af00      	add	r7, sp, #0
 800213c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800213e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214a:	68d9      	ldr	r1, [r3, #12]
 800214c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	ea40 0301 	orr.w	r3, r0, r1
 8002154:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	431a      	orrs	r2, r3
 8002160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	431a      	orrs	r2, r3
 8002166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4313      	orrs	r3, r2
 800216c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800216e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002178:	f021 010c 	bic.w	r1, r1, #12
 800217c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002182:	430b      	orrs	r3, r1
 8002184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002192:	6999      	ldr	r1, [r3, #24]
 8002194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	ea40 0301 	orr.w	r3, r0, r1
 800219c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800219e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4bc5      	ldr	r3, [pc, #788]	; (80024b8 <UART_SetConfig+0x384>)
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d004      	beq.n	80021b2 <UART_SetConfig+0x7e>
 80021a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4bc3      	ldr	r3, [pc, #780]	; (80024bc <UART_SetConfig+0x388>)
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d103      	bne.n	80021ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021b2:	f7ff fcab 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 80021b6:	6778      	str	r0, [r7, #116]	; 0x74
 80021b8:	e002      	b.n	80021c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021ba:	f7ff fc93 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 80021be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c8:	f040 80b6 	bne.w	8002338 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ce:	461c      	mov	r4, r3
 80021d0:	f04f 0500 	mov.w	r5, #0
 80021d4:	4622      	mov	r2, r4
 80021d6:	462b      	mov	r3, r5
 80021d8:	1891      	adds	r1, r2, r2
 80021da:	6439      	str	r1, [r7, #64]	; 0x40
 80021dc:	415b      	adcs	r3, r3
 80021de:	647b      	str	r3, [r7, #68]	; 0x44
 80021e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021e4:	1912      	adds	r2, r2, r4
 80021e6:	eb45 0303 	adc.w	r3, r5, r3
 80021ea:	f04f 0000 	mov.w	r0, #0
 80021ee:	f04f 0100 	mov.w	r1, #0
 80021f2:	00d9      	lsls	r1, r3, #3
 80021f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021f8:	00d0      	lsls	r0, r2, #3
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	1911      	adds	r1, r2, r4
 8002200:	6639      	str	r1, [r7, #96]	; 0x60
 8002202:	416b      	adcs	r3, r5
 8002204:	667b      	str	r3, [r7, #100]	; 0x64
 8002206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	461a      	mov	r2, r3
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	1891      	adds	r1, r2, r2
 8002212:	63b9      	str	r1, [r7, #56]	; 0x38
 8002214:	415b      	adcs	r3, r3
 8002216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800221c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002220:	f7fe f886 	bl	8000330 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4ba5      	ldr	r3, [pc, #660]	; (80024c0 <UART_SetConfig+0x38c>)
 800222a:	fba3 2302 	umull	r2, r3, r3, r2
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	011e      	lsls	r6, r3, #4
 8002232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002234:	461c      	mov	r4, r3
 8002236:	f04f 0500 	mov.w	r5, #0
 800223a:	4622      	mov	r2, r4
 800223c:	462b      	mov	r3, r5
 800223e:	1891      	adds	r1, r2, r2
 8002240:	6339      	str	r1, [r7, #48]	; 0x30
 8002242:	415b      	adcs	r3, r3
 8002244:	637b      	str	r3, [r7, #52]	; 0x34
 8002246:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800224a:	1912      	adds	r2, r2, r4
 800224c:	eb45 0303 	adc.w	r3, r5, r3
 8002250:	f04f 0000 	mov.w	r0, #0
 8002254:	f04f 0100 	mov.w	r1, #0
 8002258:	00d9      	lsls	r1, r3, #3
 800225a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800225e:	00d0      	lsls	r0, r2, #3
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	1911      	adds	r1, r2, r4
 8002266:	65b9      	str	r1, [r7, #88]	; 0x58
 8002268:	416b      	adcs	r3, r5
 800226a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800226c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	461a      	mov	r2, r3
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	1891      	adds	r1, r2, r2
 8002278:	62b9      	str	r1, [r7, #40]	; 0x28
 800227a:	415b      	adcs	r3, r3
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002282:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002286:	f7fe f853 	bl	8000330 <__aeabi_uldivmod>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4b8c      	ldr	r3, [pc, #560]	; (80024c0 <UART_SetConfig+0x38c>)
 8002290:	fba3 1302 	umull	r1, r3, r3, r2
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	2164      	movs	r1, #100	; 0x64
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	3332      	adds	r3, #50	; 0x32
 80022a2:	4a87      	ldr	r2, [pc, #540]	; (80024c0 <UART_SetConfig+0x38c>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022b0:	441e      	add	r6, r3
 80022b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b4:	4618      	mov	r0, r3
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	1894      	adds	r4, r2, r2
 80022c0:	623c      	str	r4, [r7, #32]
 80022c2:	415b      	adcs	r3, r3
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
 80022c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022ca:	1812      	adds	r2, r2, r0
 80022cc:	eb41 0303 	adc.w	r3, r1, r3
 80022d0:	f04f 0400 	mov.w	r4, #0
 80022d4:	f04f 0500 	mov.w	r5, #0
 80022d8:	00dd      	lsls	r5, r3, #3
 80022da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022de:	00d4      	lsls	r4, r2, #3
 80022e0:	4622      	mov	r2, r4
 80022e2:	462b      	mov	r3, r5
 80022e4:	1814      	adds	r4, r2, r0
 80022e6:	653c      	str	r4, [r7, #80]	; 0x50
 80022e8:	414b      	adcs	r3, r1
 80022ea:	657b      	str	r3, [r7, #84]	; 0x54
 80022ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	461a      	mov	r2, r3
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	1891      	adds	r1, r2, r2
 80022f8:	61b9      	str	r1, [r7, #24]
 80022fa:	415b      	adcs	r3, r3
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002302:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002306:	f7fe f813 	bl	8000330 <__aeabi_uldivmod>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4b6c      	ldr	r3, [pc, #432]	; (80024c0 <UART_SetConfig+0x38c>)
 8002310:	fba3 1302 	umull	r1, r3, r3, r2
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	2164      	movs	r1, #100	; 0x64
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	3332      	adds	r3, #50	; 0x32
 8002322:	4a67      	ldr	r2, [pc, #412]	; (80024c0 <UART_SetConfig+0x38c>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	f003 0207 	and.w	r2, r3, #7
 800232e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4432      	add	r2, r6
 8002334:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002336:	e0b9      	b.n	80024ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800233a:	461c      	mov	r4, r3
 800233c:	f04f 0500 	mov.w	r5, #0
 8002340:	4622      	mov	r2, r4
 8002342:	462b      	mov	r3, r5
 8002344:	1891      	adds	r1, r2, r2
 8002346:	6139      	str	r1, [r7, #16]
 8002348:	415b      	adcs	r3, r3
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002350:	1912      	adds	r2, r2, r4
 8002352:	eb45 0303 	adc.w	r3, r5, r3
 8002356:	f04f 0000 	mov.w	r0, #0
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	00d9      	lsls	r1, r3, #3
 8002360:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002364:	00d0      	lsls	r0, r2, #3
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	eb12 0804 	adds.w	r8, r2, r4
 800236e:	eb43 0905 	adc.w	r9, r3, r5
 8002372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	008b      	lsls	r3, r1, #2
 8002386:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800238a:	0082      	lsls	r2, r0, #2
 800238c:	4640      	mov	r0, r8
 800238e:	4649      	mov	r1, r9
 8002390:	f7fd ffce 	bl	8000330 <__aeabi_uldivmod>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4b49      	ldr	r3, [pc, #292]	; (80024c0 <UART_SetConfig+0x38c>)
 800239a:	fba3 2302 	umull	r2, r3, r3, r2
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	011e      	lsls	r6, r3, #4
 80023a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a4:	4618      	mov	r0, r3
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	1894      	adds	r4, r2, r2
 80023b0:	60bc      	str	r4, [r7, #8]
 80023b2:	415b      	adcs	r3, r3
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ba:	1812      	adds	r2, r2, r0
 80023bc:	eb41 0303 	adc.w	r3, r1, r3
 80023c0:	f04f 0400 	mov.w	r4, #0
 80023c4:	f04f 0500 	mov.w	r5, #0
 80023c8:	00dd      	lsls	r5, r3, #3
 80023ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023ce:	00d4      	lsls	r4, r2, #3
 80023d0:	4622      	mov	r2, r4
 80023d2:	462b      	mov	r3, r5
 80023d4:	1814      	adds	r4, r2, r0
 80023d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80023d8:	414b      	adcs	r3, r1
 80023da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f04f 0100 	mov.w	r1, #0
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	008b      	lsls	r3, r1, #2
 80023f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023f4:	0082      	lsls	r2, r0, #2
 80023f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80023fa:	f7fd ff99 	bl	8000330 <__aeabi_uldivmod>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <UART_SetConfig+0x38c>)
 8002404:	fba3 1302 	umull	r1, r3, r3, r2
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	2164      	movs	r1, #100	; 0x64
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	3332      	adds	r3, #50	; 0x32
 8002416:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <UART_SetConfig+0x38c>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002422:	441e      	add	r6, r3
 8002424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002426:	4618      	mov	r0, r3
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	1894      	adds	r4, r2, r2
 8002432:	603c      	str	r4, [r7, #0]
 8002434:	415b      	adcs	r3, r3
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800243c:	1812      	adds	r2, r2, r0
 800243e:	eb41 0303 	adc.w	r3, r1, r3
 8002442:	f04f 0400 	mov.w	r4, #0
 8002446:	f04f 0500 	mov.w	r5, #0
 800244a:	00dd      	lsls	r5, r3, #3
 800244c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002450:	00d4      	lsls	r4, r2, #3
 8002452:	4622      	mov	r2, r4
 8002454:	462b      	mov	r3, r5
 8002456:	eb12 0a00 	adds.w	sl, r2, r0
 800245a:	eb43 0b01 	adc.w	fp, r3, r1
 800245e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4618      	mov	r0, r3
 8002464:	f04f 0100 	mov.w	r1, #0
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	008b      	lsls	r3, r1, #2
 8002472:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002476:	0082      	lsls	r2, r0, #2
 8002478:	4650      	mov	r0, sl
 800247a:	4659      	mov	r1, fp
 800247c:	f7fd ff58 	bl	8000330 <__aeabi_uldivmod>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <UART_SetConfig+0x38c>)
 8002486:	fba3 1302 	umull	r1, r3, r3, r2
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	2164      	movs	r1, #100	; 0x64
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	3332      	adds	r3, #50	; 0x32
 8002498:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <UART_SetConfig+0x38c>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	f003 020f 	and.w	r2, r3, #15
 80024a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4432      	add	r2, r6
 80024aa:	609a      	str	r2, [r3, #8]
}
 80024ac:	bf00      	nop
 80024ae:	377c      	adds	r7, #124	; 0x7c
 80024b0:	46bd      	mov	sp, r7
 80024b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b6:	bf00      	nop
 80024b8:	40011000 	.word	0x40011000
 80024bc:	40011400 	.word	0x40011400
 80024c0:	51eb851f 	.word	0x51eb851f

080024c4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f103 0208 	add.w	r2, r3, #8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024dc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f103 0208 	add.w	r2, r3, #8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f103 0208 	add.w	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	601a      	str	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002566:	b480      	push	{r7}
 8002568:	b085      	sub	sp, #20
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800257c:	d103      	bne.n	8002586 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	e00c      	b.n	80025a0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3308      	adds	r3, #8
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	e002      	b.n	8002594 <vListInsert+0x2e>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	429a      	cmp	r2, r3
 800259e:	d2f6      	bcs.n	800258e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	601a      	str	r2, [r3, #0]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6892      	ldr	r2, [r2, #8]
 80025ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6852      	ldr	r2, [r2, #4]
 80025f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	d103      	bne.n	800260c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1e5a      	subs	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xQueueGenericReset+0x2a>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	60bb      	str	r3, [r7, #8]
    }
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002656:	f002 f8fd 	bl	8004854 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	441a      	add	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	3b01      	subs	r3, #1
 8002688:	68f9      	ldr	r1, [r7, #12]
 800268a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	441a      	add	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	22ff      	movs	r2, #255	; 0xff
 800269a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	22ff      	movs	r2, #255	; 0xff
 80026a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d114      	bne.n	80026d6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01a      	beq.n	80026ea <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3310      	adds	r3, #16
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 f957 	bl	800396c <xTaskRemoveFromEventList>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d012      	beq.n	80026ea <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <xQueueGenericReset+0xcc>)
 80026c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	e009      	b.n	80026ea <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3310      	adds	r3, #16
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fef2 	bl	80024c4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3324      	adds	r3, #36	; 0x24
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff feed 	bl	80024c4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80026ea:	f002 f8e3 	bl	80048b4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	e000ed04 	.word	0xe000ed04

080026fc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	4613      	mov	r3, r2
 8002708:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	61bb      	str	r3, [r7, #24]
    }
 8002722:	bf00      	nop
 8002724:	e7fe      	b.n	8002724 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <xQueueGenericCreate+0x48>
 8002736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	429a      	cmp	r2, r3
 8002742:	d101      	bne.n	8002748 <xQueueGenericCreate+0x4c>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <xQueueGenericCreate+0x4e>
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <xQueueGenericCreate+0x68>
        __asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	617b      	str	r3, [r7, #20]
    }
 8002760:	bf00      	nop
 8002762:	e7fe      	b.n	8002762 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800276a:	d90a      	bls.n	8002782 <xQueueGenericCreate+0x86>
        __asm volatile
 800276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	613b      	str	r3, [r7, #16]
    }
 800277e:	bf00      	nop
 8002780:	e7fe      	b.n	8002780 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	3350      	adds	r3, #80	; 0x50
 8002786:	4618      	mov	r0, r3
 8002788:	f002 f990 	bl	8004aac <pvPortMalloc>
 800278c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00d      	beq.n	80027b0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	3350      	adds	r3, #80	; 0x50
 800279c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800279e:	79fa      	ldrb	r2, [r7, #7]
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f805 	bl	80027ba <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80027b0:	6a3b      	ldr	r3, [r7, #32]
    }
 80027b2:	4618      	mov	r0, r3
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d103      	bne.n	80027d6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e002      	b.n	80027dc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027e8:	2101      	movs	r1, #1
 80027ea:	69b8      	ldr	r0, [r7, #24]
 80027ec:	f7ff ff1e 	bl	800262c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	2073      	movs	r0, #115	; 0x73
 8002800:	f003 f982 	bl	8005b08 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b090      	sub	sp, #64	; 0x40
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800281a:	2300      	movs	r3, #0
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <xQueueGenericSend+0x32>
        __asm volatile
 8002828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800283a:	bf00      	nop
 800283c:	e7fe      	b.n	800283c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d103      	bne.n	800284c <xQueueGenericSend+0x40>
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <xQueueGenericSend+0x44>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <xQueueGenericSend+0x46>
 8002850:	2300      	movs	r3, #0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <xQueueGenericSend+0x60>
        __asm volatile
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002868:	bf00      	nop
 800286a:	e7fe      	b.n	800286a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d103      	bne.n	800287a <xQueueGenericSend+0x6e>
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <xQueueGenericSend+0x72>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <xQueueGenericSend+0x74>
 800287e:	2300      	movs	r3, #0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <xQueueGenericSend+0x8e>
        __asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	623b      	str	r3, [r7, #32]
    }
 8002896:	bf00      	nop
 8002898:	e7fe      	b.n	8002898 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800289a:	f001 fa07 	bl	8003cac <xTaskGetSchedulerState>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <xQueueGenericSend+0x9e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <xQueueGenericSend+0xa2>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <xQueueGenericSend+0xa4>
 80028ae:	2300      	movs	r3, #0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <xQueueGenericSend+0xbe>
        __asm volatile
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	61fb      	str	r3, [r7, #28]
    }
 80028c6:	bf00      	nop
 80028c8:	e7fe      	b.n	80028c8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028ca:	f001 ffc3 	bl	8004854 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d302      	bcc.n	80028e0 <xQueueGenericSend+0xd4>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d136      	bne.n	800294e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80028e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 fe9c 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	460b      	mov	r3, r1
 80028f2:	4601      	mov	r1, r0
 80028f4:	205a      	movs	r0, #90	; 0x5a
 80028f6:	f003 f97d 	bl	8005bf4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002900:	f000 fa78 	bl	8002df4 <prvCopyDataToQueue>
 8002904:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d010      	beq.n	8002930 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	3324      	adds	r3, #36	; 0x24
 8002912:	4618      	mov	r0, r3
 8002914:	f001 f82a 	bl	800396c <xTaskRemoveFromEventList>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d013      	beq.n	8002946 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800291e:	4b4d      	ldr	r3, [pc, #308]	; (8002a54 <xQueueGenericSend+0x248>)
 8002920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	e00a      	b.n	8002946 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <xQueueGenericSend+0x248>)
 8002938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002946:	f001 ffb5 	bl	80048b4 <vPortExitCritical>
                return pdPASS;
 800294a:	2301      	movs	r3, #1
 800294c:	e07d      	b.n	8002a4a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d110      	bne.n	8002976 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002954:	f001 ffae 	bl	80048b4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fe60 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	460b      	mov	r3, r1
 800296a:	4601      	mov	r1, r0
 800296c:	205a      	movs	r0, #90	; 0x5a
 800296e:	f003 f941 	bl	8005bf4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002972:	2300      	movs	r3, #0
 8002974:	e069      	b.n	8002a4a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	2b00      	cmp	r3, #0
 800297a:	d106      	bne.n	800298a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4618      	mov	r0, r3
 8002982:	f001 f859 	bl	8003a38 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002986:	2301      	movs	r3, #1
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800298a:	f001 ff93 	bl	80048b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800298e:	f000 fda5 	bl	80034dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002992:	f001 ff5f 	bl	8004854 <vPortEnterCritical>
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800299c:	b25b      	sxtb	r3, r3
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a2:	d103      	bne.n	80029ac <xQueueGenericSend+0x1a0>
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029b2:	b25b      	sxtb	r3, r3
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b8:	d103      	bne.n	80029c2 <xQueueGenericSend+0x1b6>
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029c2:	f001 ff77 	bl	80048b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029c6:	1d3a      	adds	r2, r7, #4
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 f848 	bl	8003a64 <xTaskCheckForTimeOut>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d124      	bne.n	8002a24 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029dc:	f000 fb02 	bl	8002fe4 <prvIsQueueFull>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d018      	beq.n	8002a18 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	3310      	adds	r3, #16
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 ff6a 	bl	80038c8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80029f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029f6:	f000 fa8d 	bl	8002f14 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80029fa:	f000 fd7d 	bl	80034f8 <xTaskResumeAll>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f47f af62 	bne.w	80028ca <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <xQueueGenericSend+0x248>)
 8002a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	e758      	b.n	80028ca <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a1a:	f000 fa7b 	bl	8002f14 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a1e:	f000 fd6b 	bl	80034f8 <xTaskResumeAll>
 8002a22:	e752      	b.n	80028ca <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a26:	f000 fa75 	bl	8002f14 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a2a:	f000 fd65 	bl	80034f8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 fdf5 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4601      	mov	r1, r0
 8002a42:	205a      	movs	r0, #90	; 0x5a
 8002a44:	f003 f8d6 	bl	8005bf4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002a48:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3738      	adds	r7, #56	; 0x38
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000ed04 	.word	0xe000ed04

08002a58 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b090      	sub	sp, #64	; 0x40
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <xQueueGenericSendFromISR+0x3c>
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <xQueueGenericSendFromISR+0x40>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <xQueueGenericSendFromISR+0x42>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002ab0:	bf00      	nop
 8002ab2:	e7fe      	b.n	8002ab2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d103      	bne.n	8002ac2 <xQueueGenericSendFromISR+0x6a>
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <xQueueGenericSendFromISR+0x6e>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <xQueueGenericSendFromISR+0x70>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	623b      	str	r3, [r7, #32]
    }
 8002ade:	bf00      	nop
 8002ae0:	e7fe      	b.n	8002ae0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ae2:	f001 ffa3 	bl	8004a2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002ae6:	f3ef 8211 	mrs	r2, BASEPRI
 8002aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	61fa      	str	r2, [r7, #28]
 8002afc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002afe:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d302      	bcc.n	8002b14 <xQueueGenericSendFromISR+0xbc>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d148      	bne.n	8002ba6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 fd7a 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	461a      	mov	r2, r3
 8002b32:	2060      	movs	r0, #96	; 0x60
 8002b34:	f002 ff8e 	bl	8005a54 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b3e:	f000 f959 	bl	8002df4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002b42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b4a:	d112      	bne.n	8002b72 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d025      	beq.n	8002ba0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b56:	3324      	adds	r3, #36	; 0x24
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 ff07 	bl	800396c <xTaskRemoveFromEventList>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01d      	beq.n	8002ba0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01a      	beq.n	8002ba0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e016      	b.n	8002ba0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002b72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b76:	2b7f      	cmp	r3, #127	; 0x7f
 8002b78:	d10a      	bne.n	8002b90 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	617b      	str	r3, [r7, #20]
    }
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b94:	3301      	adds	r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	b25a      	sxtb	r2, r3
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002ba4:	e00b      	b.n	8002bbe <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 fd39 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 8002bae:	4601      	mov	r1, r0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2060      	movs	r0, #96	; 0x60
 8002bb6:	f002 ff4d 	bl	8005a54 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002bc8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3740      	adds	r7, #64	; 0x40
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b08f      	sub	sp, #60	; 0x3c
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <xQueueReceive+0x30>
        __asm volatile
 8002bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	623b      	str	r3, [r7, #32]
    }
 8002c00:	bf00      	nop
 8002c02:	e7fe      	b.n	8002c02 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <xQueueReceive+0x3e>
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <xQueueReceive+0x42>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <xQueueReceive+0x44>
 8002c16:	2300      	movs	r3, #0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <xQueueReceive+0x5e>
        __asm volatile
 8002c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	61fb      	str	r3, [r7, #28]
    }
 8002c2e:	bf00      	nop
 8002c30:	e7fe      	b.n	8002c30 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c32:	f001 f83b 	bl	8003cac <xTaskGetSchedulerState>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <xQueueReceive+0x6e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <xQueueReceive+0x72>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <xQueueReceive+0x74>
 8002c46:	2300      	movs	r3, #0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <xQueueReceive+0x8e>
        __asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	61bb      	str	r3, [r7, #24]
    }
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c62:	f001 fdf7 	bl	8004854 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d02f      	beq.n	8002cd2 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c76:	f000 f927 	bl	8002ec8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 fccf 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 8002c82:	4604      	mov	r4, r0
 8002c84:	2000      	movs	r0, #0
 8002c86:	f003 fccb 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	9100      	str	r1, [sp, #0]
 8002c92:	4621      	mov	r1, r4
 8002c94:	205c      	movs	r0, #92	; 0x5c
 8002c96:	f002 ffad 	bl	8005bf4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00f      	beq.n	8002cca <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cac:	3310      	adds	r3, #16
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fe5c 	bl	800396c <xTaskRemoveFromEventList>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002cba:	4b4d      	ldr	r3, [pc, #308]	; (8002df0 <xQueueReceive+0x21c>)
 8002cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002cca:	f001 fdf3 	bl	80048b4 <vPortExitCritical>
                return pdPASS;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e08a      	b.n	8002de8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d113      	bne.n	8002d00 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002cd8:	f001 fdec 	bl	80048b4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f003 fc9e 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f003 fc9a 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 8002cec:	4602      	mov	r2, r0
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	9100      	str	r1, [sp, #0]
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	205c      	movs	r0, #92	; 0x5c
 8002cf8:	f002 ff7c 	bl	8005bf4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e073      	b.n	8002de8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002d06:	f107 0310 	add.w	r3, r7, #16
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fe94 	bl	8003a38 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002d10:	2301      	movs	r3, #1
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002d14:	f001 fdce 	bl	80048b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002d18:	f000 fbe0 	bl	80034dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002d1c:	f001 fd9a 	bl	8004854 <vPortEnterCritical>
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d26:	b25b      	sxtb	r3, r3
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d2c:	d103      	bne.n	8002d36 <xQueueReceive+0x162>
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d3c:	b25b      	sxtb	r3, r3
 8002d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d42:	d103      	bne.n	8002d4c <xQueueReceive+0x178>
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d4c:	f001 fdb2 	bl	80048b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d50:	1d3a      	adds	r2, r7, #4
 8002d52:	f107 0310 	add.w	r3, r7, #16
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fe83 	bl	8003a64 <xTaskCheckForTimeOut>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d124      	bne.n	8002dae <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d66:	f000 f927 	bl	8002fb8 <prvIsQueueEmpty>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d018      	beq.n	8002da2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	3324      	adds	r3, #36	; 0x24
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fda5 	bl	80038c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d80:	f000 f8c8 	bl	8002f14 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d84:	f000 fbb8 	bl	80034f8 <xTaskResumeAll>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f47f af69 	bne.w	8002c62 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <xQueueReceive+0x21c>)
 8002d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	e75f      	b.n	8002c62 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da4:	f000 f8b6 	bl	8002f14 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002da8:	f000 fba6 	bl	80034f8 <xTaskResumeAll>
 8002dac:	e759      	b.n	8002c62 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db0:	f000 f8b0 	bl	8002f14 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002db4:	f000 fba0 	bl	80034f8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dba:	f000 f8fd 	bl	8002fb8 <prvIsQueueEmpty>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f43f af4e 	beq.w	8002c62 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 fc29 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 8002dce:	4604      	mov	r4, r0
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f003 fc25 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	9100      	str	r1, [sp, #0]
 8002dde:	4621      	mov	r1, r4
 8002de0:	205c      	movs	r0, #92	; 0x5c
 8002de2:	f002 ff07 	bl	8005bf4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002de6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3734      	adds	r7, #52	; 0x34
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd90      	pop	{r4, r7, pc}
 8002df0:	e000ed04 	.word	0xe000ed04

08002df4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d14d      	bne.n	8002eb6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 ff62 	bl	8003ce8 <xTaskPriorityDisinherit>
 8002e24:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e043      	b.n	8002eb6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d119      	bne.n	8002e68 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6858      	ldr	r0, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	f003 fd68 	bl	8006914 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	441a      	add	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d32b      	bcc.n	8002eb6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	e026      	b.n	8002eb6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68d8      	ldr	r0, [r3, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	461a      	mov	r2, r3
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	f003 fd4e 	bl	8006914 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	425b      	negs	r3, r3
 8002e82:	441a      	add	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d207      	bcs.n	8002ea4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	425b      	negs	r3, r3
 8002e9e:	441a      	add	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d105      	bne.n	8002eb6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002ebe:	697b      	ldr	r3, [r7, #20]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d018      	beq.n	8002f0c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	441a      	add	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d303      	bcc.n	8002efc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68d9      	ldr	r1, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	461a      	mov	r2, r3
 8002f06:	6838      	ldr	r0, [r7, #0]
 8002f08:	f003 fd04 	bl	8006914 <memcpy>
    }
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002f1c:	f001 fc9a 	bl	8004854 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f26:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f28:	e011      	b.n	8002f4e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3324      	adds	r3, #36	; 0x24
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fd18 	bl	800396c <xTaskRemoveFromEventList>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002f42:	f000 fdf5 	bl	8003b30 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	dce9      	bgt.n	8002f2a <prvUnlockQueue+0x16>
 8002f56:	e000      	b.n	8002f5a <prvUnlockQueue+0x46>
                        break;
 8002f58:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002f62:	f001 fca7 	bl	80048b4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002f66:	f001 fc75 	bl	8004854 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f70:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f72:	e011      	b.n	8002f98 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d012      	beq.n	8002fa2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3310      	adds	r3, #16
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fcf3 	bl	800396c <xTaskRemoveFromEventList>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f8c:	f000 fdd0 	bl	8003b30 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f90:	7bbb      	ldrb	r3, [r7, #14]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	dce9      	bgt.n	8002f74 <prvUnlockQueue+0x60>
 8002fa0:	e000      	b.n	8002fa4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002fa2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	22ff      	movs	r2, #255	; 0xff
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002fac:	f001 fc82 	bl	80048b4 <vPortExitCritical>
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002fc0:	f001 fc48 	bl	8004854 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	e001      	b.n	8002fd6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002fd6:	f001 fc6d 	bl	80048b4 <vPortExitCritical>

    return xReturn;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002fec:	f001 fc32 	bl	8004854 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d102      	bne.n	8003002 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e001      	b.n	8003006 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003006:	f001 fc55 	bl	80048b4 <vPortExitCritical>

    return xReturn;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e01e      	b.n	8003062 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003024:	4a13      	ldr	r2, [pc, #76]	; (8003074 <vQueueAddToRegistry+0x60>)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d115      	bne.n	800305c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003030:	4910      	ldr	r1, [pc, #64]	; (8003074 <vQueueAddToRegistry+0x60>)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800303a:	4a0e      	ldr	r2, [pc, #56]	; (8003074 <vQueueAddToRegistry+0x60>)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4618      	mov	r0, r3
 800304a:	f003 fae9 	bl	8006620 <SEGGER_SYSVIEW_ShrinkId>
 800304e:	4601      	mov	r1, r0
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	2071      	movs	r0, #113	; 0x71
 8003056:	f002 fcfd 	bl	8005a54 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800305a:	e006      	b.n	800306a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3301      	adds	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b07      	cmp	r3, #7
 8003066:	d9dd      	bls.n	8003024 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20017470 	.word	0x20017470

08003078 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003088:	f001 fbe4 	bl	8004854 <vPortEnterCritical>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003092:	b25b      	sxtb	r3, r3
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003098:	d103      	bne.n	80030a2 <vQueueWaitForMessageRestricted+0x2a>
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ae:	d103      	bne.n	80030b8 <vQueueWaitForMessageRestricted+0x40>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030b8:	f001 fbfc 	bl	80048b4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d106      	bne.n	80030d2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3324      	adds	r3, #36	; 0x24
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fc1f 	bl	8003910 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80030d2:	6978      	ldr	r0, [r7, #20]
 80030d4:	f7ff ff1e 	bl	8002f14 <prvUnlockQueue>
    }
 80030d8:	bf00      	nop
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08c      	sub	sp, #48	; 0x30
 80030e4:	af04      	add	r7, sp, #16
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f001 fcd9 	bl	8004aac <pvPortMalloc>
 80030fa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00e      	beq.n	8003120 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003102:	2058      	movs	r0, #88	; 0x58
 8003104:	f001 fcd2 	bl	8004aac <pvPortMalloc>
 8003108:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
 8003116:	e005      	b.n	8003124 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003118:	6978      	ldr	r0, [r7, #20]
 800311a:	f001 fda7 	bl	8004c6c <vPortFree>
 800311e:	e001      	b.n	8003124 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d013      	beq.n	8003152 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	2300      	movs	r3, #0
 800312e:	9303      	str	r3, [sp, #12]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	9302      	str	r3, [sp, #8]
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f80e 	bl	8003162 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003146:	69f8      	ldr	r0, [r7, #28]
 8003148:	f000 f8a2 	bl	8003290 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800314c:	2301      	movs	r3, #1
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	e002      	b.n	8003158 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003156:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003158:	69bb      	ldr	r3, [r7, #24]
    }
 800315a:	4618      	mov	r0, r3
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b088      	sub	sp, #32
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	461a      	mov	r2, r3
 800317a:	21a5      	movs	r1, #165	; 0xa5
 800317c:	f003 fbd8 	bl	8006930 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800318a:	3b01      	subs	r3, #1
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f023 0307 	bic.w	r3, r3, #7
 8003198:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <prvInitialiseNewTask+0x58>
        __asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	617b      	str	r3, [r7, #20]
    }
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01f      	beq.n	8003200 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e012      	b.n	80031ec <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	4413      	add	r3, r2
 80031cc:	7819      	ldrb	r1, [r3, #0]
 80031ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	3334      	adds	r3, #52	; 0x34
 80031d6:	460a      	mov	r2, r1
 80031d8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b09      	cmp	r3, #9
 80031f0:	d9e9      	bls.n	80031c6 <prvInitialiseNewTask+0x64>
 80031f2:	e000      	b.n	80031f6 <prvInitialiseNewTask+0x94>
            {
                break;
 80031f4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031fe:	e003      	b.n	8003208 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	2b04      	cmp	r3, #4
 800320c:	d901      	bls.n	8003212 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800320e:	2304      	movs	r3, #4
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800321c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	2200      	movs	r2, #0
 8003222:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	3304      	adds	r3, #4
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff f96b 	bl	8002504 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	3318      	adds	r3, #24
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff f966 	bl	8002504 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800323c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	f1c3 0205 	rsb	r2, r3, #5
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	3350      	adds	r3, #80	; 0x50
 8003252:	2204      	movs	r2, #4
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f003 fb6a 	bl	8006930 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	3354      	adds	r3, #84	; 0x54
 8003260:	2201      	movs	r2, #1
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f003 fb63 	bl	8006930 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	69b8      	ldr	r0, [r7, #24]
 8003270:	f001 f944 	bl	80044fc <pxPortInitialiseStack>
 8003274:	4602      	mov	r2, r0
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003284:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003286:	bf00      	nop
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003290:	b5b0      	push	{r4, r5, r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af02      	add	r7, sp, #8
 8003296:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003298:	f001 fadc 	bl	8004854 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800329c:	4b3b      	ldr	r3, [pc, #236]	; (800338c <prvAddNewTaskToReadyList+0xfc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	4a3a      	ldr	r2, [pc, #232]	; (800338c <prvAddNewTaskToReadyList+0xfc>)
 80032a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <prvAddNewTaskToReadyList+0x100>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80032ae:	4a38      	ldr	r2, [pc, #224]	; (8003390 <prvAddNewTaskToReadyList+0x100>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032b4:	4b35      	ldr	r3, [pc, #212]	; (800338c <prvAddNewTaskToReadyList+0xfc>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d110      	bne.n	80032de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80032bc:	f000 fc5c 	bl	8003b78 <prvInitialiseTaskLists>
 80032c0:	e00d      	b.n	80032de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <prvAddNewTaskToReadyList+0x104>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032ca:	4b31      	ldr	r3, [pc, #196]	; (8003390 <prvAddNewTaskToReadyList+0x100>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d802      	bhi.n	80032de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80032d8:	4a2d      	ldr	r2, [pc, #180]	; (8003390 <prvAddNewTaskToReadyList+0x100>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80032de:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <prvAddNewTaskToReadyList+0x108>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <prvAddNewTaskToReadyList+0x108>)
 80032e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <prvAddNewTaskToReadyList+0x108>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d016      	beq.n	8003324 <prvAddNewTaskToReadyList+0x94>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 f86b 	bl	80063d4 <SEGGER_SYSVIEW_OnTaskCreate>
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	461d      	mov	r5, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461c      	mov	r4, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	1ae3      	subs	r3, r4, r3
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	462b      	mov	r3, r5
 8003320:	f001 fe6a 	bl	8004ff8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4618      	mov	r0, r3
 8003328:	f003 f8d8 	bl	80064dc <SEGGER_SYSVIEW_OnTaskStartReady>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	2201      	movs	r2, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <prvAddNewTaskToReadyList+0x10c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4313      	orrs	r3, r2
 800333a:	4a18      	ldr	r2, [pc, #96]	; (800339c <prvAddNewTaskToReadyList+0x10c>)
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <prvAddNewTaskToReadyList+0x110>)
 800334c:	441a      	add	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4610      	mov	r0, r2
 8003356:	f7ff f8e2 	bl	800251e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800335a:	f001 faab 	bl	80048b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <prvAddNewTaskToReadyList+0x104>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00e      	beq.n	8003384 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <prvAddNewTaskToReadyList+0x100>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	429a      	cmp	r2, r3
 8003372:	d207      	bcs.n	8003384 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <prvAddNewTaskToReadyList+0x114>)
 8003376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bdb0      	pop	{r4, r5, r7, pc}
 800338c:	20000174 	.word	0x20000174
 8003390:	2000009c 	.word	0x2000009c
 8003394:	20000180 	.word	0x20000180
 8003398:	20000190 	.word	0x20000190
 800339c:	2000017c 	.word	0x2000017c
 80033a0:	200000a0 	.word	0x200000a0
 80033a4:	e000ed04 	.word	0xe000ed04

080033a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01b      	beq.n	80033f2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <vTaskDelay+0x68>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <vTaskDelay+0x30>
        __asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	60bb      	str	r3, [r7, #8]
    }
 80033d4:	bf00      	nop
 80033d6:	e7fe      	b.n	80033d6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80033d8:	f000 f880 	bl	80034dc <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	2023      	movs	r0, #35	; 0x23
 80033e0:	f002 fafc 	bl	80059dc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033e4:	2100      	movs	r1, #0
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fcfe 	bl	8003de8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80033ec:	f000 f884 	bl	80034f8 <xTaskResumeAll>
 80033f0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d107      	bne.n	8003408 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <vTaskDelay+0x6c>)
 80033fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	2000019c 	.word	0x2000019c
 8003414:	e000ed04 	.word	0xe000ed04

08003418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800341e:	4b27      	ldr	r3, [pc, #156]	; (80034bc <vTaskStartScheduler+0xa4>)
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2300      	movs	r3, #0
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	2282      	movs	r2, #130	; 0x82
 800342a:	4925      	ldr	r1, [pc, #148]	; (80034c0 <vTaskStartScheduler+0xa8>)
 800342c:	4825      	ldr	r0, [pc, #148]	; (80034c4 <vTaskStartScheduler+0xac>)
 800342e:	f7ff fe57 	bl	80030e0 <xTaskCreate>
 8003432:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d102      	bne.n	8003440 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800343a:	f000 fd4d 	bl	8003ed8 <xTimerCreateTimerTask>
 800343e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d124      	bne.n	8003490 <vTaskStartScheduler+0x78>
        __asm volatile
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	60bb      	str	r3, [r7, #8]
    }
 8003458:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800345a:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <vTaskStartScheduler+0xb0>)
 800345c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003460:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <vTaskStartScheduler+0xb4>)
 8003464:	2201      	movs	r2, #1
 8003466:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <vTaskStartScheduler+0xb8>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800346e:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <vTaskStartScheduler+0xbc>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4b12      	ldr	r3, [pc, #72]	; (80034bc <vTaskStartScheduler+0xa4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d102      	bne.n	8003480 <vTaskStartScheduler+0x68>
 800347a:	f002 ff8f 	bl	800639c <SEGGER_SYSVIEW_OnIdle>
 800347e:	e004      	b.n	800348a <vTaskStartScheduler+0x72>
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <vTaskStartScheduler+0xbc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f002 ffe7 	bl	8006458 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800348a:	f001 f8c3 	bl	8004614 <xPortStartScheduler>
 800348e:	e00e      	b.n	80034ae <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003496:	d10a      	bne.n	80034ae <vTaskStartScheduler+0x96>
        __asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	607b      	str	r3, [r7, #4]
    }
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80034ae:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <vTaskStartScheduler+0xc0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000198 	.word	0x20000198
 80034c0:	08007214 	.word	0x08007214
 80034c4:	08003b49 	.word	0x08003b49
 80034c8:	20000194 	.word	0x20000194
 80034cc:	20000180 	.word	0x20000180
 80034d0:	20000178 	.word	0x20000178
 80034d4:	2000009c 	.word	0x2000009c
 80034d8:	2000000c 	.word	0x2000000c

080034dc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <vTaskSuspendAll+0x18>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	4a03      	ldr	r2, [pc, #12]	; (80034f4 <vTaskSuspendAll+0x18>)
 80034e8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	2000019c 	.word	0x2000019c

080034f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003506:	4b43      	ldr	r3, [pc, #268]	; (8003614 <xTaskResumeAll+0x11c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <xTaskResumeAll+0x2c>
        __asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	603b      	str	r3, [r7, #0]
    }
 8003520:	bf00      	nop
 8003522:	e7fe      	b.n	8003522 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003524:	f001 f996 	bl	8004854 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <xTaskResumeAll+0x11c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3b01      	subs	r3, #1
 800352e:	4a39      	ldr	r2, [pc, #228]	; (8003614 <xTaskResumeAll+0x11c>)
 8003530:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003532:	4b38      	ldr	r3, [pc, #224]	; (8003614 <xTaskResumeAll+0x11c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d165      	bne.n	8003606 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800353a:	4b37      	ldr	r3, [pc, #220]	; (8003618 <xTaskResumeAll+0x120>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d061      	beq.n	8003606 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003542:	e032      	b.n	80035aa <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003544:	4b35      	ldr	r3, [pc, #212]	; (800361c <xTaskResumeAll+0x124>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3318      	adds	r3, #24
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff f841 	bl	80025d8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3304      	adds	r3, #4
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff f83c 	bl	80025d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4618      	mov	r0, r3
 8003564:	f002 ffba 	bl	80064dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	2201      	movs	r2, #1
 800356e:	409a      	lsls	r2, r3
 8003570:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <xTaskResumeAll+0x128>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	4a2a      	ldr	r2, [pc, #168]	; (8003620 <xTaskResumeAll+0x128>)
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4a27      	ldr	r2, [pc, #156]	; (8003624 <xTaskResumeAll+0x12c>)
 8003588:	441a      	add	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3304      	adds	r3, #4
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f7fe ffc4 	bl	800251e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359a:	4b23      	ldr	r3, [pc, #140]	; (8003628 <xTaskResumeAll+0x130>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d302      	bcc.n	80035aa <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <xTaskResumeAll+0x134>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <xTaskResumeAll+0x124>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1c8      	bne.n	8003544 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80035b8:	f000 fb5c 	bl	8003c74 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035bc:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <xTaskResumeAll+0x138>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d010      	beq.n	80035ea <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80035c8:	f000 f858 	bl	800367c <xTaskIncrementTick>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80035d2:	4b16      	ldr	r3, [pc, #88]	; (800362c <xTaskResumeAll+0x134>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3b01      	subs	r3, #1
 80035dc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f1      	bne.n	80035c8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <xTaskResumeAll+0x138>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <xTaskResumeAll+0x134>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <xTaskResumeAll+0x13c>)
 80035f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003606:	f001 f955 	bl	80048b4 <vPortExitCritical>

    return xAlreadyYielded;
 800360a:	68bb      	ldr	r3, [r7, #8]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	2000019c 	.word	0x2000019c
 8003618:	20000174 	.word	0x20000174
 800361c:	20000134 	.word	0x20000134
 8003620:	2000017c 	.word	0x2000017c
 8003624:	200000a0 	.word	0x200000a0
 8003628:	2000009c 	.word	0x2000009c
 800362c:	20000188 	.word	0x20000188
 8003630:	20000184 	.word	0x20000184
 8003634:	e000ed04 	.word	0xe000ed04

08003638 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <xTaskGetTickCount+0x1c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000178 	.word	0x20000178

08003658 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800365e:	f001 f9e5 	bl	8004a2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003666:	4b04      	ldr	r3, [pc, #16]	; (8003678 <xTaskGetTickCountFromISR+0x20>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800366c:	683b      	ldr	r3, [r7, #0]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000178 	.word	0x20000178

0800367c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003686:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <xTaskIncrementTick+0x14c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f040 8092 	bne.w	80037b4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003690:	4b4e      	ldr	r3, [pc, #312]	; (80037cc <xTaskIncrementTick+0x150>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003698:	4a4c      	ldr	r2, [pc, #304]	; (80037cc <xTaskIncrementTick+0x150>)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d120      	bne.n	80036e6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80036a4:	4b4a      	ldr	r3, [pc, #296]	; (80037d0 <xTaskIncrementTick+0x154>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <xTaskIncrementTick+0x48>
        __asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	603b      	str	r3, [r7, #0]
    }
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <xTaskIncrementTick+0x46>
 80036c4:	4b42      	ldr	r3, [pc, #264]	; (80037d0 <xTaskIncrementTick+0x154>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	4b42      	ldr	r3, [pc, #264]	; (80037d4 <xTaskIncrementTick+0x158>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a40      	ldr	r2, [pc, #256]	; (80037d0 <xTaskIncrementTick+0x154>)
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4a40      	ldr	r2, [pc, #256]	; (80037d4 <xTaskIncrementTick+0x158>)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <xTaskIncrementTick+0x15c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3301      	adds	r3, #1
 80036de:	4a3e      	ldr	r2, [pc, #248]	; (80037d8 <xTaskIncrementTick+0x15c>)
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	f000 fac7 	bl	8003c74 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80036e6:	4b3d      	ldr	r3, [pc, #244]	; (80037dc <xTaskIncrementTick+0x160>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d34c      	bcc.n	800378a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036f0:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <xTaskIncrementTick+0x154>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036fa:	4b38      	ldr	r3, [pc, #224]	; (80037dc <xTaskIncrementTick+0x160>)
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003700:	601a      	str	r2, [r3, #0]
                    break;
 8003702:	e042      	b.n	800378a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003704:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <xTaskIncrementTick+0x154>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	d203      	bcs.n	8003724 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800371c:	4a2f      	ldr	r2, [pc, #188]	; (80037dc <xTaskIncrementTick+0x160>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003722:	e032      	b.n	800378a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3304      	adds	r3, #4
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe ff55 	bl	80025d8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	3318      	adds	r3, #24
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe ff4c 	bl	80025d8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4618      	mov	r0, r3
 8003744:	f002 feca 	bl	80064dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	2201      	movs	r2, #1
 800374e:	409a      	lsls	r2, r3
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <xTaskIncrementTick+0x164>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4313      	orrs	r3, r2
 8003756:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <xTaskIncrementTick+0x164>)
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <xTaskIncrementTick+0x168>)
 8003768:	441a      	add	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	3304      	adds	r3, #4
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f7fe fed4 	bl	800251e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <xTaskIncrementTick+0x16c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	429a      	cmp	r2, r3
 8003782:	d3b5      	bcc.n	80036f0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003784:	2301      	movs	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003788:	e7b2      	b.n	80036f0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800378a:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <xTaskIncrementTick+0x16c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	4914      	ldr	r1, [pc, #80]	; (80037e4 <xTaskIncrementTick+0x168>)
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d901      	bls.n	80037a6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80037a2:	2301      	movs	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <xTaskIncrementTick+0x170>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80037ae:	2301      	movs	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e004      	b.n	80037be <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80037b4:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <xTaskIncrementTick+0x174>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	4a0d      	ldr	r2, [pc, #52]	; (80037f0 <xTaskIncrementTick+0x174>)
 80037bc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80037be:	697b      	ldr	r3, [r7, #20]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	2000019c 	.word	0x2000019c
 80037cc:	20000178 	.word	0x20000178
 80037d0:	2000012c 	.word	0x2000012c
 80037d4:	20000130 	.word	0x20000130
 80037d8:	2000018c 	.word	0x2000018c
 80037dc:	20000194 	.word	0x20000194
 80037e0:	2000017c 	.word	0x2000017c
 80037e4:	200000a0 	.word	0x200000a0
 80037e8:	2000009c 	.word	0x2000009c
 80037ec:	20000188 	.word	0x20000188
 80037f0:	20000184 	.word	0x20000184

080037f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037fa:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <vTaskSwitchContext+0xbc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003802:	4b2c      	ldr	r3, [pc, #176]	; (80038b4 <vTaskSwitchContext+0xc0>)
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003808:	e04d      	b.n	80038a6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800380a:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <vTaskSwitchContext+0xc0>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003810:	4b29      	ldr	r3, [pc, #164]	; (80038b8 <vTaskSwitchContext+0xc4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800381e:	7afb      	ldrb	r3, [r7, #11]
 8003820:	f1c3 031f 	rsb	r3, r3, #31
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	4925      	ldr	r1, [pc, #148]	; (80038bc <vTaskSwitchContext+0xc8>)
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <vTaskSwitchContext+0x5c>
        __asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	607b      	str	r3, [r7, #4]
    }
 800384c:	bf00      	nop
 800384e:	e7fe      	b.n	800384e <vTaskSwitchContext+0x5a>
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4a18      	ldr	r2, [pc, #96]	; (80038bc <vTaskSwitchContext+0xc8>)
 800385c:	4413      	add	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	3308      	adds	r3, #8
 8003872:	429a      	cmp	r2, r3
 8003874:	d104      	bne.n	8003880 <vTaskSwitchContext+0x8c>
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <vTaskSwitchContext+0xcc>)
 8003888:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <vTaskSwitchContext+0xcc>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <vTaskSwitchContext+0xd0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d102      	bne.n	800389c <vTaskSwitchContext+0xa8>
 8003896:	f002 fd81 	bl	800639c <SEGGER_SYSVIEW_OnIdle>
}
 800389a:	e004      	b.n	80038a6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <vTaskSwitchContext+0xcc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f002 fdd9 	bl	8006458 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80038a6:	bf00      	nop
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	2000019c 	.word	0x2000019c
 80038b4:	20000188 	.word	0x20000188
 80038b8:	2000017c 	.word	0x2000017c
 80038bc:	200000a0 	.word	0x200000a0
 80038c0:	2000009c 	.word	0x2000009c
 80038c4:	20000198 	.word	0x20000198

080038c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	60fb      	str	r3, [r7, #12]
    }
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038ee:	4b07      	ldr	r3, [pc, #28]	; (800390c <vTaskPlaceOnEventList+0x44>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3318      	adds	r3, #24
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fe fe35 	bl	8002566 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038fc:	2101      	movs	r1, #1
 80038fe:	6838      	ldr	r0, [r7, #0]
 8003900:	f000 fa72 	bl	8003de8 <prvAddCurrentTaskToDelayedList>
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	2000009c 	.word	0x2000009c

08003910 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	617b      	str	r3, [r7, #20]
    }
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <vTaskPlaceOnEventListRestricted+0x58>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3318      	adds	r3, #24
 800393e:	4619      	mov	r1, r3
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7fe fdec 	bl	800251e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003950:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003952:	2024      	movs	r0, #36	; 0x24
 8003954:	f002 f824 	bl	80059a0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	68b8      	ldr	r0, [r7, #8]
 800395c:	f000 fa44 	bl	8003de8 <prvAddCurrentTaskToDelayedList>
    }
 8003960:	bf00      	nop
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	2000009c 	.word	0x2000009c

0800396c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	60fb      	str	r3, [r7, #12]
    }
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	3318      	adds	r3, #24
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe fe1b 	bl	80025d8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a2:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <xTaskRemoveFromEventList+0xb4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d120      	bne.n	80039ec <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	3304      	adds	r3, #4
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fe12 	bl	80025d8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f002 fd90 	bl	80064dc <SEGGER_SYSVIEW_OnTaskStartReady>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	2201      	movs	r2, #1
 80039c2:	409a      	lsls	r2, r3
 80039c4:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <xTaskRemoveFromEventList+0xb8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	4a16      	ldr	r2, [pc, #88]	; (8003a24 <xTaskRemoveFromEventList+0xb8>)
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4a13      	ldr	r2, [pc, #76]	; (8003a28 <xTaskRemoveFromEventList+0xbc>)
 80039dc:	441a      	add	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	3304      	adds	r3, #4
 80039e2:	4619      	mov	r1, r3
 80039e4:	4610      	mov	r0, r2
 80039e6:	f7fe fd9a 	bl	800251e <vListInsertEnd>
 80039ea:	e005      	b.n	80039f8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	3318      	adds	r3, #24
 80039f0:	4619      	mov	r1, r3
 80039f2:	480e      	ldr	r0, [pc, #56]	; (8003a2c <xTaskRemoveFromEventList+0xc0>)
 80039f4:	f7fe fd93 	bl	800251e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <xTaskRemoveFromEventList+0xc4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d905      	bls.n	8003a12 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <xTaskRemoveFromEventList+0xc8>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e001      	b.n	8003a16 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003a16:	697b      	ldr	r3, [r7, #20]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	2000019c 	.word	0x2000019c
 8003a24:	2000017c 	.word	0x2000017c
 8003a28:	200000a0 	.word	0x200000a0
 8003a2c:	20000134 	.word	0x20000134
 8003a30:	2000009c 	.word	0x2000009c
 8003a34:	20000188 	.word	0x20000188

08003a38 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <vTaskInternalSetTimeOutState+0x24>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <vTaskInternalSetTimeOutState+0x28>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	605a      	str	r2, [r3, #4]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	2000018c 	.word	0x2000018c
 8003a60:	20000178 	.word	0x20000178

08003a64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	613b      	str	r3, [r7, #16]
    }
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	60fb      	str	r3, [r7, #12]
    }
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003aa6:	f000 fed5 	bl	8004854 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003aaa:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <xTaskCheckForTimeOut+0xc4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac2:	d102      	bne.n	8003aca <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	e026      	b.n	8003b18 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <xTaskCheckForTimeOut+0xc8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d00a      	beq.n	8003aec <xTaskCheckForTimeOut+0x88>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d305      	bcc.n	8003aec <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e015      	b.n	8003b18 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d20b      	bcs.n	8003b0e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	1ad2      	subs	r2, r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ff98 	bl	8003a38 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	e004      	b.n	8003b18 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b14:	2301      	movs	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b18:	f000 fecc 	bl	80048b4 <vPortExitCritical>

    return xReturn;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000178 	.word	0x20000178
 8003b2c:	2000018c 	.word	0x2000018c

08003b30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <vTaskMissedYield+0x14>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	20000188 	.word	0x20000188

08003b48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003b50:	f000 f852 	bl	8003bf8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <prvIdleTask+0x28>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d9f9      	bls.n	8003b50 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <prvIdleTask+0x2c>)
 8003b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b6c:	e7f0      	b.n	8003b50 <prvIdleTask+0x8>
 8003b6e:	bf00      	nop
 8003b70:	200000a0 	.word	0x200000a0
 8003b74:	e000ed04 	.word	0xe000ed04

08003b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	e00c      	b.n	8003b9e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4a12      	ldr	r2, [pc, #72]	; (8003bd8 <prvInitialiseTaskLists+0x60>)
 8003b90:	4413      	add	r3, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fc96 	bl	80024c4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d9ef      	bls.n	8003b84 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ba4:	480d      	ldr	r0, [pc, #52]	; (8003bdc <prvInitialiseTaskLists+0x64>)
 8003ba6:	f7fe fc8d 	bl	80024c4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003baa:	480d      	ldr	r0, [pc, #52]	; (8003be0 <prvInitialiseTaskLists+0x68>)
 8003bac:	f7fe fc8a 	bl	80024c4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003bb0:	480c      	ldr	r0, [pc, #48]	; (8003be4 <prvInitialiseTaskLists+0x6c>)
 8003bb2:	f7fe fc87 	bl	80024c4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003bb6:	480c      	ldr	r0, [pc, #48]	; (8003be8 <prvInitialiseTaskLists+0x70>)
 8003bb8:	f7fe fc84 	bl	80024c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003bbc:	480b      	ldr	r0, [pc, #44]	; (8003bec <prvInitialiseTaskLists+0x74>)
 8003bbe:	f7fe fc81 	bl	80024c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <prvInitialiseTaskLists+0x78>)
 8003bc4:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <prvInitialiseTaskLists+0x64>)
 8003bc6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <prvInitialiseTaskLists+0x7c>)
 8003bca:	4a05      	ldr	r2, [pc, #20]	; (8003be0 <prvInitialiseTaskLists+0x68>)
 8003bcc:	601a      	str	r2, [r3, #0]
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200000a0 	.word	0x200000a0
 8003bdc:	20000104 	.word	0x20000104
 8003be0:	20000118 	.word	0x20000118
 8003be4:	20000134 	.word	0x20000134
 8003be8:	20000148 	.word	0x20000148
 8003bec:	20000160 	.word	0x20000160
 8003bf0:	2000012c 	.word	0x2000012c
 8003bf4:	20000130 	.word	0x20000130

08003bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bfe:	e019      	b.n	8003c34 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003c00:	f000 fe28 	bl	8004854 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c04:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <prvCheckTasksWaitingTermination+0x50>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe fce1 	bl	80025d8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <prvCheckTasksWaitingTermination+0x54>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <prvCheckTasksWaitingTermination+0x54>)
 8003c1e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <prvCheckTasksWaitingTermination+0x58>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <prvCheckTasksWaitingTermination+0x58>)
 8003c28:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003c2a:	f000 fe43 	bl	80048b4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f810 	bl	8003c54 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <prvCheckTasksWaitingTermination+0x58>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e1      	bne.n	8003c00 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000148 	.word	0x20000148
 8003c4c:	20000174 	.word	0x20000174
 8003c50:	2000015c 	.word	0x2000015c

08003c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 f803 	bl	8004c6c <vPortFree>
                vPortFree( pxTCB );
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f001 f800 	bl	8004c6c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <prvResetNextTaskUnblockTime+0x30>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <prvResetNextTaskUnblockTime+0x34>)
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c88:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003c8a:	e005      	b.n	8003c98 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <prvResetNextTaskUnblockTime+0x30>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <prvResetNextTaskUnblockTime+0x34>)
 8003c96:	6013      	str	r3, [r2, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	2000012c 	.word	0x2000012c
 8003ca8:	20000194 	.word	0x20000194

08003cac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <xTaskGetSchedulerState+0x34>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	607b      	str	r3, [r7, #4]
 8003cbe:	e008      	b.n	8003cd2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc0:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <xTaskGetSchedulerState+0x38>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	e001      	b.n	8003cd2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003cd2:	687b      	ldr	r3, [r7, #4]
    }
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	20000180 	.word	0x20000180
 8003ce4:	2000019c 	.word	0x2000019c

08003ce8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d068      	beq.n	8003dd0 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003cfe:	4b37      	ldr	r3, [pc, #220]	; (8003ddc <xTaskPriorityDisinherit+0xf4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d00a      	beq.n	8003d1e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	60fb      	str	r3, [r7, #12]
    }
 8003d1a:	bf00      	nop
 8003d1c:	e7fe      	b.n	8003d1c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	60bb      	str	r3, [r7, #8]
    }
 8003d38:	bf00      	nop
 8003d3a:	e7fe      	b.n	8003d3a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d40:	1e5a      	subs	r2, r3, #1
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d03e      	beq.n	8003dd0 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d13a      	bne.n	8003dd0 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fc3a 	bl	80025d8 <uxListRemove>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	2201      	movs	r2, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43da      	mvns	r2, r3
 8003d76:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <xTaskPriorityDisinherit+0xf8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <xTaskPriorityDisinherit+0xf8>)
 8003d7e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4619      	mov	r1, r3
 8003d84:	204a      	movs	r0, #74	; 0x4a
 8003d86:	f001 fe29 	bl	80059dc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f1c3 0205 	rsb	r2, r3, #5
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	2201      	movs	r2, #1
 8003da4:	409a      	lsls	r2, r3
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <xTaskPriorityDisinherit+0xf8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	4a0c      	ldr	r2, [pc, #48]	; (8003de0 <xTaskPriorityDisinherit+0xf8>)
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <xTaskPriorityDisinherit+0xfc>)
 8003dbe:	441a      	add	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f7fe fba9 	bl	800251e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003dd0:	697b      	ldr	r3, [r7, #20]
    }
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	2000009c 	.word	0x2000009c
 8003de0:	2000017c 	.word	0x2000017c
 8003de4:	200000a0 	.word	0x200000a0

08003de8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003df2:	4b32      	ldr	r3, [pc, #200]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xd4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003df8:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fbea 	bl	80025d8 <uxListRemove>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e0a:	4b2d      	ldr	r3, [pc, #180]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	2201      	movs	r2, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e20:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e28:	d110      	bne.n	8003e4c <prvAddCurrentTaskToDelayedList+0x64>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	211b      	movs	r1, #27
 8003e36:	4618      	mov	r0, r3
 8003e38:	f002 fb92 	bl	8006560 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e3c:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4820      	ldr	r0, [pc, #128]	; (8003ec8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003e46:	f7fe fb6a 	bl	800251e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e4a:	e032      	b.n	8003eb2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d20f      	bcs.n	8003e84 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003e64:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2104      	movs	r1, #4
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f002 fb78 	bl	8006560 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e70:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	f7fe fb72 	bl	8002566 <vListInsert>
}
 8003e82:	e016      	b.n	8003eb2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003e84:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2104      	movs	r1, #4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f002 fb68 	bl	8006560 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f7fe fb62 	bl	8002566 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d202      	bcs.n	8003eb2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003eac:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6013      	str	r3, [r2, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000178 	.word	0x20000178
 8003ec0:	2000009c 	.word	0x2000009c
 8003ec4:	2000017c 	.word	0x2000017c
 8003ec8:	20000160 	.word	0x20000160
 8003ecc:	20000130 	.word	0x20000130
 8003ed0:	2000012c 	.word	0x2000012c
 8003ed4:	20000194 	.word	0x20000194

08003ed8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003ee2:	f000 fad5 	bl	8004490 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <xTimerCreateTimerTask+0x54>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <xTimerCreateTimerTask+0x58>)
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003efc:	490d      	ldr	r1, [pc, #52]	; (8003f34 <xTimerCreateTimerTask+0x5c>)
 8003efe:	480e      	ldr	r0, [pc, #56]	; (8003f38 <xTimerCreateTimerTask+0x60>)
 8003f00:	f7ff f8ee 	bl	80030e0 <xTaskCreate>
 8003f04:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	603b      	str	r3, [r7, #0]
    }
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f22:	687b      	ldr	r3, [r7, #4]
    }
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	200001d0 	.word	0x200001d0
 8003f30:	200001d4 	.word	0x200001d4
 8003f34:	0800721c 	.word	0x0800721c
 8003f38:	08004071 	.word	0x08004071

08003f3c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	623b      	str	r3, [r7, #32]
    }
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <xTimerGenericCommand+0x98>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02a      	beq.n	8003fc8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b05      	cmp	r3, #5
 8003f82:	dc18      	bgt.n	8003fb6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f84:	f7ff fe92 	bl	8003cac <xTaskGetSchedulerState>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d109      	bne.n	8003fa2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <xTimerGenericCommand+0x98>)
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	f107 0114 	add.w	r1, r7, #20
 8003f96:	2300      	movs	r3, #0
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	f7fe fc37 	bl	800280c <xQueueGenericSend>
 8003f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8003fa0:	e012      	b.n	8003fc8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <xTimerGenericCommand+0x98>)
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	f107 0114 	add.w	r1, r7, #20
 8003faa:	2300      	movs	r3, #0
 8003fac:	2200      	movs	r2, #0
 8003fae:	f7fe fc2d 	bl	800280c <xQueueGenericSend>
 8003fb2:	6278      	str	r0, [r7, #36]	; 0x24
 8003fb4:	e008      	b.n	8003fc8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <xTimerGenericCommand+0x98>)
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	f107 0114 	add.w	r1, r7, #20
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	f7fe fd49 	bl	8002a58 <xQueueGenericSendFromISR>
 8003fc6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3728      	adds	r7, #40	; 0x28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	200001d0 	.word	0x200001d0

08003fd8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe2:	4b22      	ldr	r3, [pc, #136]	; (800406c <prvProcessExpiredTimer+0x94>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe faf1 	bl	80025d8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d022      	beq.n	800404a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	18d1      	adds	r1, r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	6978      	ldr	r0, [r7, #20]
 8004012:	f000 f8d1 	bl	80041b8 <prvInsertTimerInActiveList>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01f      	beq.n	800405c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800401c:	2300      	movs	r3, #0
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	2300      	movs	r3, #0
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	2100      	movs	r1, #0
 8004026:	6978      	ldr	r0, [r7, #20]
 8004028:	f7ff ff88 	bl	8003f3c <xTimerGenericCommand>
 800402c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d113      	bne.n	800405c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	60fb      	str	r3, [r7, #12]
    }
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	b2da      	uxtb	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	6978      	ldr	r0, [r7, #20]
 8004062:	4798      	blx	r3
    }
 8004064:	bf00      	nop
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	200001c8 	.word	0x200001c8

08004070 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004078:	f107 0308 	add.w	r3, r7, #8
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f857 	bl	8004130 <prvGetNextExpireTime>
 8004082:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4619      	mov	r1, r3
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f803 	bl	8004094 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800408e:	f000 f8d5 	bl	800423c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004092:	e7f1      	b.n	8004078 <prvTimerTask+0x8>

08004094 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800409e:	f7ff fa1d 	bl	80034dc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040a2:	f107 0308 	add.w	r3, r7, #8
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f866 	bl	8004178 <prvSampleTimeNow>
 80040ac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d130      	bne.n	8004116 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <prvProcessTimerOrBlockTask+0x3c>
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d806      	bhi.n	80040d0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80040c2:	f7ff fa19 	bl	80034f8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040c6:	68f9      	ldr	r1, [r7, #12]
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff85 	bl	8003fd8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80040ce:	e024      	b.n	800411a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d008      	beq.n	80040e8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040d6:	4b13      	ldr	r3, [pc, #76]	; (8004124 <prvProcessTimerOrBlockTask+0x90>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <prvProcessTimerOrBlockTask+0x50>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <prvProcessTimerOrBlockTask+0x52>
 80040e4:	2300      	movs	r3, #0
 80040e6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040e8:	4b0f      	ldr	r3, [pc, #60]	; (8004128 <prvProcessTimerOrBlockTask+0x94>)
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	4619      	mov	r1, r3
 80040f6:	f7fe ffbf 	bl	8003078 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80040fa:	f7ff f9fd 	bl	80034f8 <xTaskResumeAll>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <prvProcessTimerOrBlockTask+0x98>)
 8004106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	f3bf 8f6f 	isb	sy
    }
 8004114:	e001      	b.n	800411a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004116:	f7ff f9ef 	bl	80034f8 <xTaskResumeAll>
    }
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	200001cc 	.word	0x200001cc
 8004128:	200001d0 	.word	0x200001d0
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <prvGetNextExpireTime+0x44>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <prvGetNextExpireTime+0x16>
 8004142:	2201      	movs	r2, #1
 8004144:	e000      	b.n	8004148 <prvGetNextExpireTime+0x18>
 8004146:	2200      	movs	r2, #0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004154:	4b07      	ldr	r3, [pc, #28]	; (8004174 <prvGetNextExpireTime+0x44>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e001      	b.n	8004164 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004164:	68fb      	ldr	r3, [r7, #12]
    }
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	200001c8 	.word	0x200001c8

08004178 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004180:	f7ff fa5a 	bl	8003638 <xTaskGetTickCount>
 8004184:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <prvSampleTimeNow+0x3c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	429a      	cmp	r2, r3
 800418e:	d205      	bcs.n	800419c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004190:	f000 f91a 	bl	80043c8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e002      	b.n	80041a2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80041a2:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <prvSampleTimeNow+0x3c>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80041a8:	68fb      	ldr	r3, [r7, #12]
    }
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	200001d8 	.word	0x200001d8

080041b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d812      	bhi.n	8004204 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	1ad2      	subs	r2, r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d302      	bcc.n	80041f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80041ec:	2301      	movs	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e01b      	b.n	800422a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041f2:	4b10      	ldr	r3, [pc, #64]	; (8004234 <prvInsertTimerInActiveList+0x7c>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f7fe f9b2 	bl	8002566 <vListInsert>
 8004202:	e012      	b.n	800422a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d206      	bcs.n	800421a <prvInsertTimerInActiveList+0x62>
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004214:	2301      	movs	r3, #1
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e007      	b.n	800422a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800421a:	4b07      	ldr	r3, [pc, #28]	; (8004238 <prvInsertTimerInActiveList+0x80>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3304      	adds	r3, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f7fe f99e 	bl	8002566 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800422a:	697b      	ldr	r3, [r7, #20]
    }
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	200001cc 	.word	0x200001cc
 8004238:	200001c8 	.word	0x200001c8

0800423c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	; 0x30
 8004240:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004242:	e0ae      	b.n	80043a2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f2c0 80aa 	blt.w	80043a0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	3304      	adds	r3, #4
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe f9bb 	bl	80025d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff87 	bl	8004178 <prvSampleTimeNow>
 800426a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b09      	cmp	r3, #9
 8004270:	f200 8097 	bhi.w	80043a2 <prvProcessReceivedCommands+0x166>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <prvProcessReceivedCommands+0x40>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042a5 	.word	0x080042a5
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042a5 	.word	0x080042a5
 8004288:	08004319 	.word	0x08004319
 800428c:	0800432d 	.word	0x0800432d
 8004290:	08004377 	.word	0x08004377
 8004294:	080042a5 	.word	0x080042a5
 8004298:	080042a5 	.word	0x080042a5
 800429c:	08004319 	.word	0x08004319
 80042a0:	0800432d 	.word	0x0800432d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	18d1      	adds	r1, r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042c4:	f7ff ff78 	bl	80041b8 <prvInsertTimerInActiveList>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d069      	beq.n	80043a2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042d4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d05e      	beq.n	80043a2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	441a      	add	r2, r3
 80042ec:	2300      	movs	r3, #0
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	2100      	movs	r1, #0
 80042f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042f6:	f7ff fe21 	bl	8003f3c <xTimerGenericCommand>
 80042fa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d14f      	bne.n	80043a2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	61bb      	str	r3, [r7, #24]
    }
 8004314:	bf00      	nop
 8004316:	e7fe      	b.n	8004316 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800432a:	e03a      	b.n	80043a2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	617b      	str	r3, [r7, #20]
    }
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	18d1      	adds	r1, r2, r3
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	6a3a      	ldr	r2, [r7, #32]
 800436e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004370:	f7ff ff22 	bl	80041b8 <prvInsertTimerInActiveList>
                        break;
 8004374:	e015      	b.n	80043a2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d103      	bne.n	800438c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004386:	f000 fc71 	bl	8004c6c <vPortFree>
 800438a:	e00a      	b.n	80043a2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800439e:	e000      	b.n	80043a2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80043a0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <prvProcessReceivedCommands+0x188>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f107 0108 	add.w	r1, r7, #8
 80043aa:	2200      	movs	r2, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe fc11 	bl	8002bd4 <xQueueReceive>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f47f af45 	bne.w	8004244 <prvProcessReceivedCommands+0x8>
        }
    }
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	3728      	adds	r7, #40	; 0x28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200001d0 	.word	0x200001d0

080043c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ce:	e048      	b.n	8004462 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043d0:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <prvSwitchTimerLists+0xc0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043da:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <prvSwitchTimerLists+0xc0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe f8f5 	bl	80025d8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d02e      	beq.n	8004462 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	429a      	cmp	r2, r3
 8004414:	d90e      	bls.n	8004434 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004422:	4b19      	ldr	r3, [pc, #100]	; (8004488 <prvSwitchTimerLists+0xc0>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3304      	adds	r3, #4
 800442a:	4619      	mov	r1, r3
 800442c:	4610      	mov	r0, r2
 800442e:	f7fe f89a 	bl	8002566 <vListInsert>
 8004432:	e016      	b.n	8004462 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004434:	2300      	movs	r3, #0
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	2300      	movs	r3, #0
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	2100      	movs	r1, #0
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f7ff fd7c 	bl	8003f3c <xTimerGenericCommand>
 8004444:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	603b      	str	r3, [r7, #0]
    }
 800445e:	bf00      	nop
 8004460:	e7fe      	b.n	8004460 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <prvSwitchTimerLists+0xc0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1b1      	bne.n	80043d0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <prvSwitchTimerLists+0xc0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <prvSwitchTimerLists+0xc4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a04      	ldr	r2, [pc, #16]	; (8004488 <prvSwitchTimerLists+0xc0>)
 8004478:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800447a:	4a04      	ldr	r2, [pc, #16]	; (800448c <prvSwitchTimerLists+0xc4>)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	6013      	str	r3, [r2, #0]
    }
 8004480:	bf00      	nop
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	200001c8 	.word	0x200001c8
 800448c:	200001cc 	.word	0x200001cc

08004490 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004494:	f000 f9de 	bl	8004854 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <prvCheckForValidListAndQueue+0x54>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11d      	bne.n	80044dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80044a0:	4811      	ldr	r0, [pc, #68]	; (80044e8 <prvCheckForValidListAndQueue+0x58>)
 80044a2:	f7fe f80f 	bl	80024c4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80044a6:	4811      	ldr	r0, [pc, #68]	; (80044ec <prvCheckForValidListAndQueue+0x5c>)
 80044a8:	f7fe f80c 	bl	80024c4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80044ac:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <prvCheckForValidListAndQueue+0x60>)
 80044ae:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <prvCheckForValidListAndQueue+0x58>)
 80044b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <prvCheckForValidListAndQueue+0x64>)
 80044b4:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <prvCheckForValidListAndQueue+0x5c>)
 80044b6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80044b8:	2200      	movs	r2, #0
 80044ba:	210c      	movs	r1, #12
 80044bc:	200a      	movs	r0, #10
 80044be:	f7fe f91d 	bl	80026fc <xQueueGenericCreate>
 80044c2:	4603      	mov	r3, r0
 80044c4:	4a07      	ldr	r2, [pc, #28]	; (80044e4 <prvCheckForValidListAndQueue+0x54>)
 80044c6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <prvCheckForValidListAndQueue+0x54>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044d0:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <prvCheckForValidListAndQueue+0x54>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4908      	ldr	r1, [pc, #32]	; (80044f8 <prvCheckForValidListAndQueue+0x68>)
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fe fd9c 	bl	8003014 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80044dc:	f000 f9ea 	bl	80048b4 <vPortExitCritical>
    }
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	200001d0 	.word	0x200001d0
 80044e8:	200001a0 	.word	0x200001a0
 80044ec:	200001b4 	.word	0x200001b4
 80044f0:	200001c8 	.word	0x200001c8
 80044f4:	200001cc 	.word	0x200001cc
 80044f8:	08007224 	.word	0x08007224

080044fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3b04      	subs	r3, #4
 800450c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004514:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3b04      	subs	r3, #4
 800451a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f023 0201 	bic.w	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3b04      	subs	r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800452c:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <pxPortInitialiseStack+0x64>)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3b14      	subs	r3, #20
 8004536:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3b04      	subs	r3, #4
 8004542:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f06f 0202 	mvn.w	r2, #2
 800454a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3b20      	subs	r3, #32
 8004550:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	08004565 	.word	0x08004565

08004564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <prvTaskExitError+0x54>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004576:	d00a      	beq.n	800458e <prvTaskExitError+0x2a>
        __asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	60fb      	str	r3, [r7, #12]
    }
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <prvTaskExitError+0x28>
        __asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60bb      	str	r3, [r7, #8]
    }
 80045a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80045a2:	bf00      	nop
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0fc      	beq.n	80045a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	20000010 	.word	0x20000010
 80045bc:	00000000 	.word	0x00000000

080045c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <pxCurrentTCBConst2>)
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	6808      	ldr	r0, [r1, #0]
 80045c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ca:	f380 8809 	msr	PSP, r0
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f380 8811 	msr	BASEPRI, r0
 80045da:	4770      	bx	lr
 80045dc:	f3af 8000 	nop.w

080045e0 <pxCurrentTCBConst2>:
 80045e0:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80045e8:	4808      	ldr	r0, [pc, #32]	; (800460c <prvPortStartFirstTask+0x24>)
 80045ea:	6800      	ldr	r0, [r0, #0]
 80045ec:	6800      	ldr	r0, [r0, #0]
 80045ee:	f380 8808 	msr	MSP, r0
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f380 8814 	msr	CONTROL, r0
 80045fa:	b662      	cpsie	i
 80045fc:	b661      	cpsie	f
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	df00      	svc	0
 8004608:	bf00      	nop
 800460a:	0000      	.short	0x0000
 800460c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop

08004614 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800461a:	4b46      	ldr	r3, [pc, #280]	; (8004734 <xPortStartScheduler+0x120>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a46      	ldr	r2, [pc, #280]	; (8004738 <xPortStartScheduler+0x124>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d10a      	bne.n	800463a <xPortStartScheduler+0x26>
        __asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	613b      	str	r3, [r7, #16]
    }
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800463a:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <xPortStartScheduler+0x120>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a3f      	ldr	r2, [pc, #252]	; (800473c <xPortStartScheduler+0x128>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10a      	bne.n	800465a <xPortStartScheduler+0x46>
        __asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	60fb      	str	r3, [r7, #12]
    }
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800465a:	4b39      	ldr	r3, [pc, #228]	; (8004740 <xPortStartScheduler+0x12c>)
 800465c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	22ff      	movs	r2, #255	; 0xff
 800466a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4b31      	ldr	r3, [pc, #196]	; (8004744 <xPortStartScheduler+0x130>)
 8004680:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004682:	4b31      	ldr	r3, [pc, #196]	; (8004748 <xPortStartScheduler+0x134>)
 8004684:	2207      	movs	r2, #7
 8004686:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004688:	e009      	b.n	800469e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800468a:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <xPortStartScheduler+0x134>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3b01      	subs	r3, #1
 8004690:	4a2d      	ldr	r2, [pc, #180]	; (8004748 <xPortStartScheduler+0x134>)
 8004692:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b80      	cmp	r3, #128	; 0x80
 80046a8:	d0ef      	beq.n	800468a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <xPortStartScheduler+0x134>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1c3 0307 	rsb	r3, r3, #7
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d00a      	beq.n	80046cc <xPortStartScheduler+0xb8>
        __asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60bb      	str	r3, [r7, #8]
    }
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <xPortStartScheduler+0x134>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <xPortStartScheduler+0x134>)
 80046d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046d6:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <xPortStartScheduler+0x134>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <xPortStartScheduler+0x134>)
 80046e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80046ea:	4b18      	ldr	r3, [pc, #96]	; (800474c <xPortStartScheduler+0x138>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <xPortStartScheduler+0x138>)
 80046f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <xPortStartScheduler+0x138>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a14      	ldr	r2, [pc, #80]	; (800474c <xPortStartScheduler+0x138>)
 80046fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004700:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004702:	f000 f963 	bl	80049cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <xPortStartScheduler+0x13c>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800470c:	f000 f982 	bl	8004a14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004710:	4b10      	ldr	r3, [pc, #64]	; (8004754 <xPortStartScheduler+0x140>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <xPortStartScheduler+0x140>)
 8004716:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800471a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800471c:	f7ff ff64 	bl	80045e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004720:	f7ff f868 	bl	80037f4 <vTaskSwitchContext>
    prvTaskExitError();
 8004724:	f7ff ff1e 	bl	8004564 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	e000ed00 	.word	0xe000ed00
 8004738:	410fc271 	.word	0x410fc271
 800473c:	410fc270 	.word	0x410fc270
 8004740:	e000e400 	.word	0xe000e400
 8004744:	200001dc 	.word	0x200001dc
 8004748:	200001e0 	.word	0x200001e0
 800474c:	e000ed20 	.word	0xe000ed20
 8004750:	20000010 	.word	0x20000010
 8004754:	e000ef34 	.word	0xe000ef34

08004758 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800475e:	4b37      	ldr	r3, [pc, #220]	; (800483c <vInitPrioGroupValue+0xe4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a37      	ldr	r2, [pc, #220]	; (8004840 <vInitPrioGroupValue+0xe8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10a      	bne.n	800477e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	613b      	str	r3, [r7, #16]
    }
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <vInitPrioGroupValue+0xe4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a30      	ldr	r2, [pc, #192]	; (8004844 <vInitPrioGroupValue+0xec>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d10a      	bne.n	800479e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60fb      	str	r3, [r7, #12]
    }
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800479e:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <vInitPrioGroupValue+0xf0>)
 80047a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	22ff      	movs	r2, #255	; 0xff
 80047ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <vInitPrioGroupValue+0xf4>)
 80047c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047c6:	4b22      	ldr	r3, [pc, #136]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047c8:	2207      	movs	r2, #7
 80047ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047cc:	e009      	b.n	80047e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b80      	cmp	r3, #128	; 0x80
 80047ec:	d0ef      	beq.n	80047ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047ee:	4b18      	ldr	r3, [pc, #96]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1c3 0307 	rsb	r3, r3, #7
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d00a      	beq.n	8004810 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	60bb      	str	r3, [r7, #8]
    }
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <vInitPrioGroupValue+0xf8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <vInitPrioGroupValue+0xf8>)
 8004818:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <vInitPrioGroupValue+0xf8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004822:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <vInitPrioGroupValue+0xf8>)
 8004824:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000ed00 	.word	0xe000ed00
 8004840:	410fc271 	.word	0x410fc271
 8004844:	410fc270 	.word	0x410fc270
 8004848:	e000e400 	.word	0xe000e400
 800484c:	200001dc 	.word	0x200001dc
 8004850:	200001e0 	.word	0x200001e0

08004854 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
        __asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
    }
 800486c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <vPortEnterCritical+0x58>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <vPortEnterCritical+0x58>)
 8004876:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <vPortEnterCritical+0x58>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10f      	bne.n	80048a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <vPortEnterCritical+0x5c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	603b      	str	r3, [r7, #0]
    }
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <vPortEnterCritical+0x4a>
    }
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	20000010 	.word	0x20000010
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <vPortExitCritical+0x50>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <vPortExitCritical+0x24>
        __asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
    }
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <vPortExitCritical+0x50>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3b01      	subs	r3, #1
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <vPortExitCritical+0x50>)
 80048e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <vPortExitCritical+0x50>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d105      	bne.n	80048f6 <vPortExitCritical+0x42>
 80048ea:	2300      	movs	r3, #0
 80048ec:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f383 8811 	msr	BASEPRI, r3
    }
 80048f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000010 	.word	0x20000010
	...

08004910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004910:	f3ef 8009 	mrs	r0, PSP
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	4b15      	ldr	r3, [pc, #84]	; (8004970 <pxCurrentTCBConst>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f01e 0f10 	tst.w	lr, #16
 8004920:	bf08      	it	eq
 8004922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492a:	6010      	str	r0, [r2, #0]
 800492c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004934:	f380 8811 	msr	BASEPRI, r0
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f7fe ff58 	bl	80037f4 <vTaskSwitchContext>
 8004944:	f04f 0000 	mov.w	r0, #0
 8004948:	f380 8811 	msr	BASEPRI, r0
 800494c:	bc09      	pop	{r0, r3}
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	6808      	ldr	r0, [r1, #0]
 8004952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004956:	f01e 0f10 	tst.w	lr, #16
 800495a:	bf08      	it	eq
 800495c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004960:	f380 8809 	msr	PSP, r0
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst>:
 8004970:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
        __asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	607b      	str	r3, [r7, #4]
    }
 8004990:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004992:	f001 fc89 	bl	80062a8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004996:	f7fe fe71 	bl	800367c <xTaskIncrementTick>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d006      	beq.n	80049ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80049a0:	f001 fce0 	bl	8006364 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049a4:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <SysTick_Handler+0x50>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e001      	b.n	80049b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80049ae:	f001 fcbd 	bl	800632c <SEGGER_SYSVIEW_RecordExitISR>
 80049b2:	2300      	movs	r3, #0
 80049b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f383 8811 	msr	BASEPRI, r3
    }
 80049bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <vPortSetupTimerInterrupt+0x34>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <vPortSetupTimerInterrupt+0x38>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <vPortSetupTimerInterrupt+0x3c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <vPortSetupTimerInterrupt+0x40>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <vPortSetupTimerInterrupt+0x44>)
 80049ea:	3b01      	subs	r3, #1
 80049ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ee:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <vPortSetupTimerInterrupt+0x34>)
 80049f0:	2207      	movs	r2, #7
 80049f2:	601a      	str	r2, [r3, #0]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	e000e010 	.word	0xe000e010
 8004a04:	e000e018 	.word	0xe000e018
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	10624dd3 	.word	0x10624dd3
 8004a10:	e000e014 	.word	0xe000e014

08004a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a24 <vPortEnableVFP+0x10>
 8004a18:	6801      	ldr	r1, [r0, #0]
 8004a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a1e:	6001      	str	r1, [r0, #0]
 8004a20:	4770      	bx	lr
 8004a22:	0000      	.short	0x0000
 8004a24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop

08004a2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a32:	f3ef 8305 	mrs	r3, IPSR
 8004a36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b0f      	cmp	r3, #15
 8004a3c:	d914      	bls.n	8004a68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a3e:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <vPortValidateInterruptPriority+0x70>)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <vPortValidateInterruptPriority+0x74>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	7afa      	ldrb	r2, [r7, #11]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d20a      	bcs.n	8004a68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	607b      	str	r3, [r7, #4]
    }
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <vPortValidateInterruptPriority+0x78>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <vPortValidateInterruptPriority+0x7c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d90a      	bls.n	8004a8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	603b      	str	r3, [r7, #0]
    }
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <vPortValidateInterruptPriority+0x60>
    }
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000e3f0 	.word	0xe000e3f0
 8004aa0:	200001dc 	.word	0x200001dc
 8004aa4:	e000ed0c 	.word	0xe000ed0c
 8004aa8:	200001e0 	.word	0x200001e0

08004aac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004ab8:	f7fe fd10 	bl	80034dc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004abc:	4b65      	ldr	r3, [pc, #404]	; (8004c54 <pvPortMalloc+0x1a8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ac4:	f000 f934 	bl	8004d30 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ac8:	4b63      	ldr	r3, [pc, #396]	; (8004c58 <pvPortMalloc+0x1ac>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f040 80a7 	bne.w	8004c24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d02d      	beq.n	8004b38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004adc:	2208      	movs	r2, #8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d227      	bcs.n	8004b38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004ae8:	2208      	movs	r2, #8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d021      	beq.n	8004b3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f023 0307 	bic.w	r3, r3, #7
 8004b00:	3308      	adds	r3, #8
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d214      	bcs.n	8004b32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f023 0307 	bic.w	r3, r3, #7
 8004b0e:	3308      	adds	r3, #8
 8004b10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d010      	beq.n	8004b3e <pvPortMalloc+0x92>
        __asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	617b      	str	r3, [r7, #20]
    }
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b36:	e002      	b.n	8004b3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	e000      	b.n	8004b40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d06e      	beq.n	8004c24 <pvPortMalloc+0x178>
 8004b46:	4b45      	ldr	r3, [pc, #276]	; (8004c5c <pvPortMalloc+0x1b0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d869      	bhi.n	8004c24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b50:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <pvPortMalloc+0x1b4>)
 8004b52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004b54:	4b42      	ldr	r3, [pc, #264]	; (8004c60 <pvPortMalloc+0x1b4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b5a:	e004      	b.n	8004b66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d903      	bls.n	8004b78 <pvPortMalloc+0xcc>
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f1      	bne.n	8004b5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004b78:	4b36      	ldr	r3, [pc, #216]	; (8004c54 <pvPortMalloc+0x1a8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d050      	beq.n	8004c24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2208      	movs	r2, #8
 8004b88:	4413      	add	r3, r2
 8004b8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d91f      	bls.n	8004be4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <pvPortMalloc+0x120>
        __asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	613b      	str	r3, [r7, #16]
    }
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	1ad2      	subs	r2, r2, r3
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bde:	69b8      	ldr	r0, [r7, #24]
 8004be0:	f000 f908 	bl	8004df4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004be4:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <pvPortMalloc+0x1b0>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	4a1b      	ldr	r2, [pc, #108]	; (8004c5c <pvPortMalloc+0x1b0>)
 8004bf0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bf2:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <pvPortMalloc+0x1b0>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <pvPortMalloc+0x1b8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d203      	bcs.n	8004c06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bfe:	4b17      	ldr	r3, [pc, #92]	; (8004c5c <pvPortMalloc+0x1b0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <pvPortMalloc+0x1b8>)
 8004c04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <pvPortMalloc+0x1ac>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004c1a:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <pvPortMalloc+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	4a11      	ldr	r2, [pc, #68]	; (8004c68 <pvPortMalloc+0x1bc>)
 8004c22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c24:	f7fe fc68 	bl	80034f8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <pvPortMalloc+0x19c>
        __asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	60fb      	str	r3, [r7, #12]
    }
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <pvPortMalloc+0x19a>
    return pvReturn;
 8004c48:	69fb      	ldr	r3, [r7, #28]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3728      	adds	r7, #40	; 0x28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20012dec 	.word	0x20012dec
 8004c58:	20012e00 	.word	0x20012e00
 8004c5c:	20012df0 	.word	0x20012df0
 8004c60:	20012de4 	.word	0x20012de4
 8004c64:	20012df4 	.word	0x20012df4
 8004c68:	20012df8 	.word	0x20012df8

08004c6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d04d      	beq.n	8004d1a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004c7e:	2308      	movs	r3, #8
 8004c80:	425b      	negs	r3, r3
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4413      	add	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <vPortFree+0xb8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <vPortFree+0x44>
        __asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	60fb      	str	r3, [r7, #12]
    }
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <vPortFree+0x62>
        __asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60bb      	str	r3, [r7, #8]
    }
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <vPortFree+0xb8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01e      	beq.n	8004d1a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d11a      	bne.n	8004d1a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <vPortFree+0xb8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	401a      	ands	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004cf4:	f7fe fbf2 	bl	80034dc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <vPortFree+0xbc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4413      	add	r3, r2
 8004d02:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <vPortFree+0xbc>)
 8004d04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d06:	6938      	ldr	r0, [r7, #16]
 8004d08:	f000 f874 	bl	8004df4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <vPortFree+0xc0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	4a06      	ldr	r2, [pc, #24]	; (8004d2c <vPortFree+0xc0>)
 8004d14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004d16:	f7fe fbef 	bl	80034f8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004d1a:	bf00      	nop
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20012e00 	.word	0x20012e00
 8004d28:	20012df0 	.word	0x20012df0
 8004d2c:	20012dfc 	.word	0x20012dfc

08004d30 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d36:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004d3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004d3c:	4b27      	ldr	r3, [pc, #156]	; (8004ddc <prvHeapInit+0xac>)
 8004d3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3307      	adds	r3, #7
 8004d4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0307 	bic.w	r3, r3, #7
 8004d56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <prvHeapInit+0xac>)
 8004d60:	4413      	add	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d68:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <prvHeapInit+0xb0>)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d6e:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <prvHeapInit+0xb0>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	4413      	add	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0307 	bic.w	r3, r3, #7
 8004d8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <prvHeapInit+0xb4>)
 8004d90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d92:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <prvHeapInit+0xb4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <prvHeapInit+0xb4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	1ad2      	subs	r2, r2, r3
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <prvHeapInit+0xb4>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4a0a      	ldr	r2, [pc, #40]	; (8004de8 <prvHeapInit+0xb8>)
 8004dbe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a09      	ldr	r2, [pc, #36]	; (8004dec <prvHeapInit+0xbc>)
 8004dc6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <prvHeapInit+0xc0>)
 8004dca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dce:	601a      	str	r2, [r3, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	200001e4 	.word	0x200001e4
 8004de0:	20012de4 	.word	0x20012de4
 8004de4:	20012dec 	.word	0x20012dec
 8004de8:	20012df4 	.word	0x20012df4
 8004dec:	20012df0 	.word	0x20012df0
 8004df0:	20012e00 	.word	0x20012e00

08004df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004dfc:	4b28      	ldr	r3, [pc, #160]	; (8004ea0 <prvInsertBlockIntoFreeList+0xac>)
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e002      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x14>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d8f7      	bhi.n	8004e02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d108      	bne.n	8004e36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	441a      	add	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	441a      	add	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d118      	bne.n	8004e7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d00d      	beq.n	8004e72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	441a      	add	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e008      	b.n	8004e84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e003      	b.n	8004e84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d002      	beq.n	8004e92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e92:	bf00      	nop
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20012de4 	.word	0x20012de4
 8004ea4:	20012dec 	.word	0x20012dec

08004ea8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004eac:	4803      	ldr	r0, [pc, #12]	; (8004ebc <_cbSendSystemDesc+0x14>)
 8004eae:	f001 f9a5 	bl	80061fc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004eb2:	4803      	ldr	r0, [pc, #12]	; (8004ec0 <_cbSendSystemDesc+0x18>)
 8004eb4:	f001 f9a2 	bl	80061fc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004eb8:	bf00      	nop
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	0800722c 	.word	0x0800722c
 8004ec0:	08007260 	.word	0x08007260

08004ec4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004ed2:	4a06      	ldr	r2, [pc, #24]	; (8004eec <SEGGER_SYSVIEW_Conf+0x28>)
 8004ed4:	f000 fd10 	bl	80058f8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004ed8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004edc:	f000 fd50 	bl	8005980 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000000 	.word	0x20000000
 8004ee8:	08004ea9 	.word	0x08004ea9
 8004eec:	08007300 	.word	0x08007300

08004ef0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	607b      	str	r3, [r7, #4]
 8004efa:	e033      	b.n	8004f64 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004efc:	491e      	ldr	r1, [pc, #120]	; (8004f78 <_cbSendTaskList+0x88>)
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	491a      	ldr	r1, [pc, #104]	; (8004f78 <_cbSendTaskList+0x88>)
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	6819      	ldr	r1, [r3, #0]
 8004f1e:	4c16      	ldr	r4, [pc, #88]	; (8004f78 <_cbSendTaskList+0x88>)
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4423      	add	r3, r4
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	681c      	ldr	r4, [r3, #0]
 8004f30:	4d11      	ldr	r5, [pc, #68]	; (8004f78 <_cbSendTaskList+0x88>)
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	442b      	add	r3, r5
 8004f3e:	330c      	adds	r3, #12
 8004f40:	681d      	ldr	r5, [r3, #0]
 8004f42:	4e0d      	ldr	r6, [pc, #52]	; (8004f78 <_cbSendTaskList+0x88>)
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4433      	add	r3, r6
 8004f50:	3310      	adds	r3, #16
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	462b      	mov	r3, r5
 8004f58:	4622      	mov	r2, r4
 8004f5a:	f000 f8b5 	bl	80050c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3301      	adds	r3, #1
 8004f62:	607b      	str	r3, [r7, #4]
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <_cbSendTaskList+0x8c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d3c6      	bcc.n	8004efc <_cbSendTaskList+0xc>
  }
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f78:	20012e04 	.word	0x20012e04
 8004f7c:	20012ea4 	.word	0x20012ea4

08004f80 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f80:	b5b0      	push	{r4, r5, r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f86:	f7fe fb67 	bl	8003658 <xTaskGetTickCountFromISR>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	f04f 0400 	mov.w	r4, #0
 8004fa2:	f04f 0500 	mov.w	r5, #0
 8004fa6:	015d      	lsls	r5, r3, #5
 8004fa8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004fac:	0154      	lsls	r4, r2, #5
 8004fae:	4622      	mov	r2, r4
 8004fb0:	462b      	mov	r3, r5
 8004fb2:	1a12      	subs	r2, r2, r0
 8004fb4:	eb63 0301 	sbc.w	r3, r3, r1
 8004fb8:	f04f 0400 	mov.w	r4, #0
 8004fbc:	f04f 0500 	mov.w	r5, #0
 8004fc0:	009d      	lsls	r5, r3, #2
 8004fc2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004fc6:	0094      	lsls	r4, r2, #2
 8004fc8:	4622      	mov	r2, r4
 8004fca:	462b      	mov	r3, r5
 8004fcc:	1812      	adds	r2, r2, r0
 8004fce:	eb41 0303 	adc.w	r3, r1, r3
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	00d9      	lsls	r1, r3, #3
 8004fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fe0:	00d0      	lsls	r0, r2, #3
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004fea:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004fee:	4610      	mov	r0, r2
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bdb0      	pop	{r4, r5, r7, pc}

08004ff8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005006:	2205      	movs	r2, #5
 8005008:	492b      	ldr	r1, [pc, #172]	; (80050b8 <SYSVIEW_AddTask+0xc0>)
 800500a:	68b8      	ldr	r0, [r7, #8]
 800500c:	f001 fc74 	bl	80068f8 <memcmp>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d04b      	beq.n	80050ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005016:	4b29      	ldr	r3, [pc, #164]	; (80050bc <SYSVIEW_AddTask+0xc4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b07      	cmp	r3, #7
 800501c:	d903      	bls.n	8005026 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800501e:	4828      	ldr	r0, [pc, #160]	; (80050c0 <SYSVIEW_AddTask+0xc8>)
 8005020:	f001 fbea 	bl	80067f8 <SEGGER_SYSVIEW_Warn>
    return;
 8005024:	e044      	b.n	80050b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005026:	4b25      	ldr	r3, [pc, #148]	; (80050bc <SYSVIEW_AddTask+0xc4>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4926      	ldr	r1, [pc, #152]	; (80050c4 <SYSVIEW_AddTask+0xcc>)
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800503a:	4b20      	ldr	r3, [pc, #128]	; (80050bc <SYSVIEW_AddTask+0xc4>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4921      	ldr	r1, [pc, #132]	; (80050c4 <SYSVIEW_AddTask+0xcc>)
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	3304      	adds	r3, #4
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <SYSVIEW_AddTask+0xc4>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	491b      	ldr	r1, [pc, #108]	; (80050c4 <SYSVIEW_AddTask+0xcc>)
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	3308      	adds	r3, #8
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005066:	4b15      	ldr	r3, [pc, #84]	; (80050bc <SYSVIEW_AddTask+0xc4>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4916      	ldr	r1, [pc, #88]	; (80050c4 <SYSVIEW_AddTask+0xcc>)
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	330c      	adds	r3, #12
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800507c:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <SYSVIEW_AddTask+0xc4>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4910      	ldr	r1, [pc, #64]	; (80050c4 <SYSVIEW_AddTask+0xcc>)
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	3310      	adds	r3, #16
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <SYSVIEW_AddTask+0xc4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3301      	adds	r3, #1
 8005098:	4a08      	ldr	r2, [pc, #32]	; (80050bc <SYSVIEW_AddTask+0xc4>)
 800509a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f80e 	bl	80050c8 <SYSVIEW_SendTaskInfo>
 80050ac:	e000      	b.n	80050b0 <SYSVIEW_AddTask+0xb8>
    return;
 80050ae:	bf00      	nop

}
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	08007270 	.word	0x08007270
 80050bc:	20012ea4 	.word	0x20012ea4
 80050c0:	08007278 	.word	0x08007278
 80050c4:	20012e04 	.word	0x20012e04

080050c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80050d6:	f107 0314 	add.w	r3, r7, #20
 80050da:	2214      	movs	r2, #20
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 fc26 	bl	8006930 <memset>
  TaskInfo.TaskID     = TaskID;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80050f8:	f107 0314 	add.w	r3, r7, #20
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 ff85 	bl	800600c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005102:	bf00      	nop
 8005104:	3728      	adds	r7, #40	; 0x28
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005112:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <_DoInit+0x98>)
 8005114:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2203      	movs	r2, #3
 800511a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2203      	movs	r2, #3
 8005120:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a20      	ldr	r2, [pc, #128]	; (80051a8 <_DoInit+0x9c>)
 8005126:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a20      	ldr	r2, [pc, #128]	; (80051ac <_DoInit+0xa0>)
 800512c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005134:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a17      	ldr	r2, [pc, #92]	; (80051a8 <_DoInit+0x9c>)
 800514c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <_DoInit+0xa4>)
 8005152:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2210      	movs	r2, #16
 8005158:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3307      	adds	r3, #7
 8005170:	4a10      	ldr	r2, [pc, #64]	; (80051b4 <_DoInit+0xa8>)
 8005172:	6810      	ldr	r0, [r2, #0]
 8005174:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005176:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a0e      	ldr	r2, [pc, #56]	; (80051b8 <_DoInit+0xac>)
 800517e:	6810      	ldr	r0, [r2, #0]
 8005180:	6018      	str	r0, [r3, #0]
 8005182:	8891      	ldrh	r1, [r2, #4]
 8005184:	7992      	ldrb	r2, [r2, #6]
 8005186:	8099      	strh	r1, [r3, #4]
 8005188:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800518a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005194:	f3bf 8f5f 	dmb	sy
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	200174b0 	.word	0x200174b0
 80051a8:	080072c8 	.word	0x080072c8
 80051ac:	20012ea8 	.word	0x20012ea8
 80051b0:	200132a8 	.word	0x200132a8
 80051b4:	080072d4 	.word	0x080072d4
 80051b8:	080072d8 	.word	0x080072d8

080051bc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08c      	sub	sp, #48	; 0x30
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80051c8:	4b3e      	ldr	r3, [pc, #248]	; (80052c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80051ca:	623b      	str	r3, [r7, #32]
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <SEGGER_RTT_ReadNoLock+0x1e>
 80051d6:	f7ff ff99 	bl	800510c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	3360      	adds	r3, #96	; 0x60
 80051e6:	4a37      	ldr	r2, [pc, #220]	; (80052c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80051e8:	4413      	add	r3, r2
 80051ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80051fc:	2300      	movs	r3, #0
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	429a      	cmp	r2, r3
 8005206:	d92b      	bls.n	8005260 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4293      	cmp	r3, r2
 8005218:	bf28      	it	cs
 800521a:	4613      	movcs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	4413      	add	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	6939      	ldr	r1, [r7, #16]
 800522c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800522e:	f001 fb71 	bl	8006914 <memcpy>
    NumBytesRead += NumBytesRem;
 8005232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4413      	add	r3, r2
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800524a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	4413      	add	r3, r2
 8005250:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005258:	429a      	cmp	r2, r3
 800525a:	d101      	bne.n	8005260 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800525c:	2300      	movs	r3, #0
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4293      	cmp	r3, r2
 800526e:	bf28      	it	cs
 8005270:	4613      	movcs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d019      	beq.n	80052ae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	4413      	add	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	6939      	ldr	r1, [r7, #16]
 8005288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800528a:	f001 fb43 	bl	8006914 <memcpy>
    NumBytesRead += NumBytesRem;
 800528e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	4413      	add	r3, r2
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4413      	add	r3, r2
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	4413      	add	r3, r2
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3730      	adds	r7, #48	; 0x30
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	200174b0 	.word	0x200174b0

080052c8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052d6:	4b3d      	ldr	r3, [pc, #244]	; (80053cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80052e4:	f7ff ff12 	bl	800510c <_DoInit>
  SEGGER_RTT_LOCK();
 80052e8:	f3ef 8311 	mrs	r3, BASEPRI
 80052ec:	f04f 0120 	mov.w	r1, #32
 80052f0:	f381 8811 	msr	BASEPRI, r1
 80052f4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052f6:	4b35      	ldr	r3, [pc, #212]	; (80053cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052f8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80052fe:	6939      	ldr	r1, [r7, #16]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	4613      	mov	r3, r2
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	4413      	add	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	440b      	add	r3, r1
 800530e:	3304      	adds	r3, #4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3301      	adds	r3, #1
 800531a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	429a      	cmp	r2, r3
 8005324:	dbeb      	blt.n	80052fe <SEGGER_RTT_AllocUpBuffer+0x36>
 8005326:	e000      	b.n	800532a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005328:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	429a      	cmp	r2, r3
 8005332:	da3f      	bge.n	80053b4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005334:	6939      	ldr	r1, [r7, #16]
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	4613      	mov	r3, r2
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4413      	add	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	440b      	add	r3, r1
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005348:	6939      	ldr	r1, [r7, #16]
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	4613      	mov	r3, r2
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	4413      	add	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	440b      	add	r3, r1
 8005358:	3304      	adds	r3, #4
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800535e:	6939      	ldr	r1, [r7, #16]
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	4613      	mov	r3, r2
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	4413      	add	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	440b      	add	r3, r1
 800536c:	3320      	adds	r3, #32
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005372:	6939      	ldr	r1, [r7, #16]
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	440b      	add	r3, r1
 8005380:	3328      	adds	r3, #40	; 0x28
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005386:	6939      	ldr	r1, [r7, #16]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	4613      	mov	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	3324      	adds	r3, #36	; 0x24
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800539a:	6939      	ldr	r1, [r7, #16]
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	440b      	add	r3, r1
 80053a8:	332c      	adds	r3, #44	; 0x2c
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053ae:	f3bf 8f5f 	dmb	sy
 80053b2:	e002      	b.n	80053ba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80053b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053b8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80053c0:	69fb      	ldr	r3, [r7, #28]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	200174b0 	.word	0x200174b0

080053d0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80053de:	4b33      	ldr	r3, [pc, #204]	; (80054ac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80053ec:	f7ff fe8e 	bl	800510c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053f0:	4b2e      	ldr	r3, [pc, #184]	; (80054ac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80053f2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	461a      	mov	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d24d      	bcs.n	800549c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005400:	f3ef 8311 	mrs	r3, BASEPRI
 8005404:	f04f 0120 	mov.w	r1, #32
 8005408:	f381 8811 	msr	BASEPRI, r1
 800540c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d031      	beq.n	8005478 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005414:	6979      	ldr	r1, [r7, #20]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4613      	mov	r3, r2
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	4413      	add	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	440b      	add	r3, r1
 8005422:	3360      	adds	r3, #96	; 0x60
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005428:	6979      	ldr	r1, [r7, #20]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4613      	mov	r3, r2
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	4413      	add	r3, r2
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	440b      	add	r3, r1
 8005436:	3364      	adds	r3, #100	; 0x64
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800543c:	6979      	ldr	r1, [r7, #20]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4613      	mov	r3, r2
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	4413      	add	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	440b      	add	r3, r1
 800544a:	3368      	adds	r3, #104	; 0x68
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005450:	6979      	ldr	r1, [r7, #20]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4613      	mov	r3, r2
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	4413      	add	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	440b      	add	r3, r1
 800545e:	3370      	adds	r3, #112	; 0x70
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005464:	6979      	ldr	r1, [r7, #20]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4613      	mov	r3, r2
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	4413      	add	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	440b      	add	r3, r1
 8005472:	336c      	adds	r3, #108	; 0x6c
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005478:	6979      	ldr	r1, [r7, #20]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4613      	mov	r3, r2
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	4413      	add	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	440b      	add	r3, r1
 8005486:	3374      	adds	r3, #116	; 0x74
 8005488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800548a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800548c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e002      	b.n	80054a2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800549c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054a0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80054a2:	69fb      	ldr	r3, [r7, #28]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3720      	adds	r7, #32
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	200174b0 	.word	0x200174b0

080054b0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80054c0:	e002      	b.n	80054c8 <_EncodeStr+0x18>
    Len++;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	3301      	adds	r3, #1
 80054c6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4413      	add	r3, r2
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1f6      	bne.n	80054c2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d901      	bls.n	80054e0 <_EncodeStr+0x30>
    Len = Limit;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2bfe      	cmp	r3, #254	; 0xfe
 80054e4:	d806      	bhi.n	80054f4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	60fa      	str	r2, [r7, #12]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	e011      	b.n	8005518 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	60fa      	str	r2, [r7, #12]
 80054fa:	22ff      	movs	r2, #255	; 0xff
 80054fc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	60fa      	str	r2, [r7, #12]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	0a19      	lsrs	r1, r3, #8
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	60fa      	str	r2, [r7, #12]
 8005514:	b2ca      	uxtb	r2, r1
 8005516:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800551c:	e00a      	b.n	8005534 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	1c53      	adds	r3, r2, #1
 8005522:	60bb      	str	r3, [r7, #8]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	1c59      	adds	r1, r3, #1
 8005528:	60f9      	str	r1, [r7, #12]
 800552a:	7812      	ldrb	r2, [r2, #0]
 800552c:	701a      	strb	r2, [r3, #0]
    n++;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	3301      	adds	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	429a      	cmp	r2, r3
 800553a:	d3f0      	bcc.n	800551e <_EncodeStr+0x6e>
  }
  return pPayload;
 800553c:	68fb      	ldr	r3, [r7, #12]
}
 800553e:	4618      	mov	r0, r3
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3304      	adds	r3, #4
}
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800556a:	4b36      	ldr	r3, [pc, #216]	; (8005644 <_HandleIncomingPacket+0xe0>)
 800556c:	7e1b      	ldrb	r3, [r3, #24]
 800556e:	4618      	mov	r0, r3
 8005570:	1cfb      	adds	r3, r7, #3
 8005572:	2201      	movs	r2, #1
 8005574:	4619      	mov	r1, r3
 8005576:	f7ff fe21 	bl	80051bc <SEGGER_RTT_ReadNoLock>
 800557a:	4603      	mov	r3, r0
 800557c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	dd54      	ble.n	800562e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d032      	beq.n	80055f0 <_HandleIncomingPacket+0x8c>
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	dc42      	bgt.n	8005614 <_HandleIncomingPacket+0xb0>
 800558e:	2b07      	cmp	r3, #7
 8005590:	dc16      	bgt.n	80055c0 <_HandleIncomingPacket+0x5c>
 8005592:	2b00      	cmp	r3, #0
 8005594:	dd3e      	ble.n	8005614 <_HandleIncomingPacket+0xb0>
 8005596:	3b01      	subs	r3, #1
 8005598:	2b06      	cmp	r3, #6
 800559a:	d83b      	bhi.n	8005614 <_HandleIncomingPacket+0xb0>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <_HandleIncomingPacket+0x40>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055c7 	.word	0x080055c7
 80055a8:	080055cd 	.word	0x080055cd
 80055ac:	080055d3 	.word	0x080055d3
 80055b0:	080055d9 	.word	0x080055d9
 80055b4:	080055df 	.word	0x080055df
 80055b8:	080055e5 	.word	0x080055e5
 80055bc:	080055eb 	.word	0x080055eb
 80055c0:	2b7f      	cmp	r3, #127	; 0x7f
 80055c2:	d036      	beq.n	8005632 <_HandleIncomingPacket+0xce>
 80055c4:	e026      	b.n	8005614 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80055c6:	f000 fba7 	bl	8005d18 <SEGGER_SYSVIEW_Start>
      break;
 80055ca:	e037      	b.n	800563c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80055cc:	f000 fc5e 	bl	8005e8c <SEGGER_SYSVIEW_Stop>
      break;
 80055d0:	e034      	b.n	800563c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80055d2:	f000 fe37 	bl	8006244 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80055d6:	e031      	b.n	800563c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80055d8:	f000 fdfc 	bl	80061d4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80055dc:	e02e      	b.n	800563c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80055de:	f000 fc7b 	bl	8005ed8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80055e2:	e02b      	b.n	800563c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80055e4:	f001 f8ca 	bl	800677c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80055e8:	e028      	b.n	800563c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80055ea:	f001 f8a9 	bl	8006740 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80055ee:	e025      	b.n	800563c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055f0:	4b14      	ldr	r3, [pc, #80]	; (8005644 <_HandleIncomingPacket+0xe0>)
 80055f2:	7e1b      	ldrb	r3, [r3, #24]
 80055f4:	4618      	mov	r0, r3
 80055f6:	1cfb      	adds	r3, r7, #3
 80055f8:	2201      	movs	r2, #1
 80055fa:	4619      	mov	r1, r3
 80055fc:	f7ff fdde 	bl	80051bc <SEGGER_RTT_ReadNoLock>
 8005600:	4603      	mov	r3, r0
 8005602:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	dd15      	ble.n	8005636 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	4618      	mov	r0, r3
 800560e:	f001 f817 	bl	8006640 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005612:	e010      	b.n	8005636 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	b25b      	sxtb	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	da0e      	bge.n	800563a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <_HandleIncomingPacket+0xe0>)
 800561e:	7e1b      	ldrb	r3, [r3, #24]
 8005620:	4618      	mov	r0, r3
 8005622:	1cfb      	adds	r3, r7, #3
 8005624:	2201      	movs	r2, #1
 8005626:	4619      	mov	r1, r3
 8005628:	f7ff fdc8 	bl	80051bc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800562c:	e005      	b.n	800563a <_HandleIncomingPacket+0xd6>
    }
  }
 800562e:	bf00      	nop
 8005630:	e004      	b.n	800563c <_HandleIncomingPacket+0xd8>
      break;
 8005632:	bf00      	nop
 8005634:	e002      	b.n	800563c <_HandleIncomingPacket+0xd8>
      break;
 8005636:	bf00      	nop
 8005638:	e000      	b.n	800563c <_HandleIncomingPacket+0xd8>
      break;
 800563a:	bf00      	nop
}
 800563c:	bf00      	nop
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	200172c0 	.word	0x200172c0

08005648 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b08c      	sub	sp, #48	; 0x30
 800564c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800564e:	2301      	movs	r3, #1
 8005650:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005652:	1d3b      	adds	r3, r7, #4
 8005654:	3301      	adds	r3, #1
 8005656:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800565c:	4b31      	ldr	r3, [pc, #196]	; (8005724 <_TrySendOverflowPacket+0xdc>)
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	62bb      	str	r3, [r7, #40]	; 0x28
 8005662:	e00b      	b.n	800567c <_TrySendOverflowPacket+0x34>
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	b2da      	uxtb	r2, r3
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	1c59      	adds	r1, r3, #1
 800566c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800566e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	09db      	lsrs	r3, r3, #7
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	2b7f      	cmp	r3, #127	; 0x7f
 8005680:	d8f0      	bhi.n	8005664 <_TrySendOverflowPacket+0x1c>
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005692:	4b25      	ldr	r3, [pc, #148]	; (8005728 <_TrySendOverflowPacket+0xe0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005698:	4b22      	ldr	r3, [pc, #136]	; (8005724 <_TrySendOverflowPacket+0xdc>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	623b      	str	r3, [r7, #32]
 80056aa:	e00b      	b.n	80056c4 <_TrySendOverflowPacket+0x7c>
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	1c59      	adds	r1, r3, #1
 80056b4:	6279      	str	r1, [r7, #36]	; 0x24
 80056b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	09db      	lsrs	r3, r3, #7
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	2b7f      	cmp	r3, #127	; 0x7f
 80056c8:	d8f0      	bhi.n	80056ac <_TrySendOverflowPacket+0x64>
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	627a      	str	r2, [r7, #36]	; 0x24
 80056d0:	6a3a      	ldr	r2, [r7, #32]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80056da:	4b12      	ldr	r3, [pc, #72]	; (8005724 <_TrySendOverflowPacket+0xdc>)
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	4618      	mov	r0, r3
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	1d3b      	adds	r3, r7, #4
 80056ea:	4619      	mov	r1, r3
 80056ec:	f7fa fd78 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056f0:	4603      	mov	r3, r0
 80056f2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80056fa:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <_TrySendOverflowPacket+0xdc>)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005700:	4b08      	ldr	r3, [pc, #32]	; (8005724 <_TrySendOverflowPacket+0xdc>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	3b01      	subs	r3, #1
 8005706:	b2da      	uxtb	r2, r3
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <_TrySendOverflowPacket+0xdc>)
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	e004      	b.n	8005718 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <_TrySendOverflowPacket+0xdc>)
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	3301      	adds	r3, #1
 8005714:	4a03      	ldr	r2, [pc, #12]	; (8005724 <_TrySendOverflowPacket+0xdc>)
 8005716:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005718:	693b      	ldr	r3, [r7, #16]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3730      	adds	r7, #48	; 0x30
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	200172c0 	.word	0x200172c0
 8005728:	e0001004 	.word	0xe0001004

0800572c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b08a      	sub	sp, #40	; 0x28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005738:	4b6c      	ldr	r3, [pc, #432]	; (80058ec <_SendPacket+0x1c0>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d010      	beq.n	8005762 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005740:	4b6a      	ldr	r3, [pc, #424]	; (80058ec <_SendPacket+0x1c0>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 80a3 	beq.w	8005890 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800574a:	4b68      	ldr	r3, [pc, #416]	; (80058ec <_SendPacket+0x1c0>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d109      	bne.n	8005766 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005752:	f7ff ff79 	bl	8005648 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005756:	4b65      	ldr	r3, [pc, #404]	; (80058ec <_SendPacket+0x1c0>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b01      	cmp	r3, #1
 800575c:	f040 809a 	bne.w	8005894 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005760:	e001      	b.n	8005766 <_SendPacket+0x3a>
    goto Send;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <_SendPacket+0x3c>
Send:
 8005766:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b1f      	cmp	r3, #31
 800576c:	d809      	bhi.n	8005782 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800576e:	4b5f      	ldr	r3, [pc, #380]	; (80058ec <_SendPacket+0x1c0>)
 8005770:	69da      	ldr	r2, [r3, #28]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	f040 808b 	bne.w	8005898 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b17      	cmp	r3, #23
 8005786:	d807      	bhi.n	8005798 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3b01      	subs	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e03d      	b.n	8005814 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b7f      	cmp	r3, #127	; 0x7f
 80057a4:	d912      	bls.n	80057cc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	09da      	lsrs	r2, r3, #7
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	3a01      	subs	r2, #1
 80057be:	60fa      	str	r2, [r7, #12]
 80057c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e006      	b.n	80057da <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b7f      	cmp	r3, #127	; 0x7f
 80057de:	d912      	bls.n	8005806 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	09da      	lsrs	r2, r3, #7
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	3a01      	subs	r2, #1
 80057f8:	60fa      	str	r2, [r7, #12]
 80057fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e006      	b.n	8005814 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3b01      	subs	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005814:	4b36      	ldr	r3, [pc, #216]	; (80058f0 <_SendPacket+0x1c4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800581a:	4b34      	ldr	r3, [pc, #208]	; (80058ec <_SendPacket+0x1c0>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	623b      	str	r3, [r7, #32]
 800582c:	e00b      	b.n	8005846 <_SendPacket+0x11a>
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	b2da      	uxtb	r2, r3
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	1c59      	adds	r1, r3, #1
 8005836:	6279      	str	r1, [r7, #36]	; 0x24
 8005838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	09db      	lsrs	r3, r3, #7
 8005844:	623b      	str	r3, [r7, #32]
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	2b7f      	cmp	r3, #127	; 0x7f
 800584a:	d8f0      	bhi.n	800582e <_SendPacket+0x102>
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	627a      	str	r2, [r7, #36]	; 0x24
 8005852:	6a3a      	ldr	r2, [r7, #32]
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <_SendPacket+0x1c0>)
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	4618      	mov	r0, r3
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	461a      	mov	r2, r3
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	f7fa fcb8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005870:	4603      	mov	r3, r0
 8005872:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800587a:	4a1c      	ldr	r2, [pc, #112]	; (80058ec <_SendPacket+0x1c0>)
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	60d3      	str	r3, [r2, #12]
 8005880:	e00b      	b.n	800589a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005882:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <_SendPacket+0x1c0>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	3301      	adds	r3, #1
 8005888:	b2da      	uxtb	r2, r3
 800588a:	4b18      	ldr	r3, [pc, #96]	; (80058ec <_SendPacket+0x1c0>)
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e004      	b.n	800589a <_SendPacket+0x16e>
    goto SendDone;
 8005890:	bf00      	nop
 8005892:	e002      	b.n	800589a <_SendPacket+0x16e>
      goto SendDone;
 8005894:	bf00      	nop
 8005896:	e000      	b.n	800589a <_SendPacket+0x16e>
      goto SendDone;
 8005898:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800589a:	4b14      	ldr	r3, [pc, #80]	; (80058ec <_SendPacket+0x1c0>)
 800589c:	7e1b      	ldrb	r3, [r3, #24]
 800589e:	4619      	mov	r1, r3
 80058a0:	4a14      	ldr	r2, [pc, #80]	; (80058f4 <_SendPacket+0x1c8>)
 80058a2:	460b      	mov	r3, r1
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	440b      	add	r3, r1
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	4413      	add	r3, r2
 80058ac:	336c      	adds	r3, #108	; 0x6c
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <_SendPacket+0x1c0>)
 80058b2:	7e1b      	ldrb	r3, [r3, #24]
 80058b4:	4618      	mov	r0, r3
 80058b6:	490f      	ldr	r1, [pc, #60]	; (80058f4 <_SendPacket+0x1c8>)
 80058b8:	4603      	mov	r3, r0
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	4403      	add	r3, r0
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	440b      	add	r3, r1
 80058c2:	3370      	adds	r3, #112	; 0x70
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d00b      	beq.n	80058e2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80058ca:	4b08      	ldr	r3, [pc, #32]	; (80058ec <_SendPacket+0x1c0>)
 80058cc:	789b      	ldrb	r3, [r3, #2]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d107      	bne.n	80058e2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80058d2:	4b06      	ldr	r3, [pc, #24]	; (80058ec <_SendPacket+0x1c0>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80058d8:	f7ff fe44 	bl	8005564 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80058dc:	4b03      	ldr	r3, [pc, #12]	; (80058ec <_SendPacket+0x1c0>)
 80058de:	2200      	movs	r2, #0
 80058e0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80058e2:	bf00      	nop
 80058e4:	3728      	adds	r7, #40	; 0x28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200172c0 	.word	0x200172c0
 80058f0:	e0001004 	.word	0xe0001004
 80058f4:	200174b0 	.word	0x200174b0

080058f8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005906:	2300      	movs	r3, #0
 8005908:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800590c:	4917      	ldr	r1, [pc, #92]	; (800596c <SEGGER_SYSVIEW_Init+0x74>)
 800590e:	4818      	ldr	r0, [pc, #96]	; (8005970 <SEGGER_SYSVIEW_Init+0x78>)
 8005910:	f7ff fcda 	bl	80052c8 <SEGGER_RTT_AllocUpBuffer>
 8005914:	4603      	mov	r3, r0
 8005916:	b2da      	uxtb	r2, r3
 8005918:	4b16      	ldr	r3, [pc, #88]	; (8005974 <SEGGER_SYSVIEW_Init+0x7c>)
 800591a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800591c:	4b15      	ldr	r3, [pc, #84]	; (8005974 <SEGGER_SYSVIEW_Init+0x7c>)
 800591e:	785a      	ldrb	r2, [r3, #1]
 8005920:	4b14      	ldr	r3, [pc, #80]	; (8005974 <SEGGER_SYSVIEW_Init+0x7c>)
 8005922:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005924:	4b13      	ldr	r3, [pc, #76]	; (8005974 <SEGGER_SYSVIEW_Init+0x7c>)
 8005926:	7e1b      	ldrb	r3, [r3, #24]
 8005928:	4618      	mov	r0, r3
 800592a:	2300      	movs	r3, #0
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	2308      	movs	r3, #8
 8005930:	4a11      	ldr	r2, [pc, #68]	; (8005978 <SEGGER_SYSVIEW_Init+0x80>)
 8005932:	490f      	ldr	r1, [pc, #60]	; (8005970 <SEGGER_SYSVIEW_Init+0x78>)
 8005934:	f7ff fd4c 	bl	80053d0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005938:	4b0e      	ldr	r3, [pc, #56]	; (8005974 <SEGGER_SYSVIEW_Init+0x7c>)
 800593a:	2200      	movs	r2, #0
 800593c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <SEGGER_SYSVIEW_Init+0x84>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a0c      	ldr	r2, [pc, #48]	; (8005974 <SEGGER_SYSVIEW_Init+0x7c>)
 8005944:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005946:	4a0b      	ldr	r2, [pc, #44]	; (8005974 <SEGGER_SYSVIEW_Init+0x7c>)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800594c:	4a09      	ldr	r2, [pc, #36]	; (8005974 <SEGGER_SYSVIEW_Init+0x7c>)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005952:	4a08      	ldr	r2, [pc, #32]	; (8005974 <SEGGER_SYSVIEW_Init+0x7c>)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005958:	4a06      	ldr	r2, [pc, #24]	; (8005974 <SEGGER_SYSVIEW_Init+0x7c>)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800595e:	4b05      	ldr	r3, [pc, #20]	; (8005974 <SEGGER_SYSVIEW_Init+0x7c>)
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	200132b8 	.word	0x200132b8
 8005970:	080072e0 	.word	0x080072e0
 8005974:	200172c0 	.word	0x200172c0
 8005978:	200172b8 	.word	0x200172b8
 800597c:	e0001004 	.word	0xe0001004

08005980 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005988:	4a04      	ldr	r2, [pc, #16]	; (800599c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6113      	str	r3, [r2, #16]
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	200172c0 	.word	0x200172c0

080059a0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059a8:	f3ef 8311 	mrs	r3, BASEPRI
 80059ac:	f04f 0120 	mov.w	r1, #32
 80059b0:	f381 8811 	msr	BASEPRI, r1
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	4808      	ldr	r0, [pc, #32]	; (80059d8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80059b8:	f7ff fdc7 	bl	800554a <_PreparePacket>
 80059bc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	68b8      	ldr	r0, [r7, #8]
 80059c4:	f7ff feb2 	bl	800572c <_SendPacket>
  RECORD_END();
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f383 8811 	msr	BASEPRI, r3
}
 80059ce:	bf00      	nop
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	200172f0 	.word	0x200172f0

080059dc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059e6:	f3ef 8311 	mrs	r3, BASEPRI
 80059ea:	f04f 0120 	mov.w	r1, #32
 80059ee:	f381 8811 	msr	BASEPRI, r1
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	4816      	ldr	r0, [pc, #88]	; (8005a50 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80059f6:	f7ff fda8 	bl	800554a <_PreparePacket>
 80059fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	61bb      	str	r3, [r7, #24]
 8005a08:	e00b      	b.n	8005a22 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	1c59      	adds	r1, r3, #1
 8005a12:	61f9      	str	r1, [r7, #28]
 8005a14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	09db      	lsrs	r3, r3, #7
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b7f      	cmp	r3, #127	; 0x7f
 8005a26:	d8f0      	bhi.n	8005a0a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	61fa      	str	r2, [r7, #28]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	6938      	ldr	r0, [r7, #16]
 8005a3e:	f7ff fe75 	bl	800572c <_SendPacket>
  RECORD_END();
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f383 8811 	msr	BASEPRI, r3
}
 8005a48:	bf00      	nop
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	200172f0 	.word	0x200172f0

08005a54 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08c      	sub	sp, #48	; 0x30
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a60:	f3ef 8311 	mrs	r3, BASEPRI
 8005a64:	f04f 0120 	mov.w	r1, #32
 8005a68:	f381 8811 	msr	BASEPRI, r1
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	4825      	ldr	r0, [pc, #148]	; (8005b04 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005a70:	f7ff fd6b 	bl	800554a <_PreparePacket>
 8005a74:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	e00b      	b.n	8005a9c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	09db      	lsrs	r3, r3, #7
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa0:	d8f0      	bhi.n	8005a84 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	e00b      	b.n	8005ad4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	1c59      	adds	r1, r3, #1
 8005ac4:	6279      	str	r1, [r7, #36]	; 0x24
 8005ac6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	09db      	lsrs	r3, r3, #7
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad8:	d8f0      	bhi.n	8005abc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	627a      	str	r2, [r7, #36]	; 0x24
 8005ae0:	6a3a      	ldr	r2, [r7, #32]
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	6979      	ldr	r1, [r7, #20]
 8005aee:	69b8      	ldr	r0, [r7, #24]
 8005af0:	f7ff fe1c 	bl	800572c <_SendPacket>
  RECORD_END();
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f383 8811 	msr	BASEPRI, r3
}
 8005afa:	bf00      	nop
 8005afc:	3730      	adds	r7, #48	; 0x30
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	200172f0 	.word	0x200172f0

08005b08 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08e      	sub	sp, #56	; 0x38
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b16:	f3ef 8311 	mrs	r3, BASEPRI
 8005b1a:	f04f 0120 	mov.w	r1, #32
 8005b1e:	f381 8811 	msr	BASEPRI, r1
 8005b22:	61fb      	str	r3, [r7, #28]
 8005b24:	4832      	ldr	r0, [pc, #200]	; (8005bf0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005b26:	f7ff fd10 	bl	800554a <_PreparePacket>
 8005b2a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30
 8005b38:	e00b      	b.n	8005b52 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	1c59      	adds	r1, r3, #1
 8005b42:	6379      	str	r1, [r7, #52]	; 0x34
 8005b44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	09db      	lsrs	r3, r3, #7
 8005b50:	633b      	str	r3, [r7, #48]	; 0x30
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2b7f      	cmp	r3, #127	; 0x7f
 8005b56:	d8f0      	bhi.n	8005b3a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	637a      	str	r2, [r7, #52]	; 0x34
 8005b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b70:	e00b      	b.n	8005b8a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	1c59      	adds	r1, r3, #1
 8005b7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	09db      	lsrs	r3, r3, #7
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b8e:	d8f0      	bhi.n	8005b72 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	e00b      	b.n	8005bc2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	1c59      	adds	r1, r3, #1
 8005bb2:	6279      	str	r1, [r7, #36]	; 0x24
 8005bb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	09db      	lsrs	r3, r3, #7
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc6:	d8f0      	bhi.n	8005baa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	627a      	str	r2, [r7, #36]	; 0x24
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	69b8      	ldr	r0, [r7, #24]
 8005bde:	f7ff fda5 	bl	800572c <_SendPacket>
  RECORD_END();
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f383 8811 	msr	BASEPRI, r3
}
 8005be8:	bf00      	nop
 8005bea:	3738      	adds	r7, #56	; 0x38
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	200172f0 	.word	0x200172f0

08005bf4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b090      	sub	sp, #64	; 0x40
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c02:	f3ef 8311 	mrs	r3, BASEPRI
 8005c06:	f04f 0120 	mov.w	r1, #32
 8005c0a:	f381 8811 	msr	BASEPRI, r1
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	4840      	ldr	r0, [pc, #256]	; (8005d14 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005c12:	f7ff fc9a 	bl	800554a <_PreparePacket>
 8005c16:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c24:	e00b      	b.n	8005c3e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2c:	1c59      	adds	r1, r3, #1
 8005c2e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005c30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	09db      	lsrs	r3, r3, #7
 8005c3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	2b7f      	cmp	r3, #127	; 0x7f
 8005c42:	d8f0      	bhi.n	8005c26 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c5c:	e00b      	b.n	8005c76 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c64:	1c59      	adds	r1, r3, #1
 8005c66:	6379      	str	r1, [r7, #52]	; 0x34
 8005c68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	09db      	lsrs	r3, r3, #7
 8005c74:	633b      	str	r3, [r7, #48]	; 0x30
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	2b7f      	cmp	r3, #127	; 0x7f
 8005c7a:	d8f0      	bhi.n	8005c5e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	637a      	str	r2, [r7, #52]	; 0x34
 8005c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c94:	e00b      	b.n	8005cae <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	1c59      	adds	r1, r3, #1
 8005c9e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ca0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	701a      	strb	r2, [r3, #0]
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	09db      	lsrs	r3, r3, #7
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb2:	d8f0      	bhi.n	8005c96 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cca:	623b      	str	r3, [r7, #32]
 8005ccc:	e00b      	b.n	8005ce6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	1c59      	adds	r1, r3, #1
 8005cd6:	6279      	str	r1, [r7, #36]	; 0x24
 8005cd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	09db      	lsrs	r3, r3, #7
 8005ce4:	623b      	str	r3, [r7, #32]
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cea:	d8f0      	bhi.n	8005cce <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	627a      	str	r2, [r7, #36]	; 0x24
 8005cf2:	6a3a      	ldr	r2, [r7, #32]
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	6979      	ldr	r1, [r7, #20]
 8005d00:	69b8      	ldr	r0, [r7, #24]
 8005d02:	f7ff fd13 	bl	800572c <_SendPacket>
  RECORD_END();
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f383 8811 	msr	BASEPRI, r3
}
 8005d0c:	bf00      	nop
 8005d0e:	3740      	adds	r7, #64	; 0x40
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	200172f0 	.word	0x200172f0

08005d18 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08c      	sub	sp, #48	; 0x30
 8005d1c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005d1e:	4b58      	ldr	r3, [pc, #352]	; (8005e80 <SEGGER_SYSVIEW_Start+0x168>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005d24:	f3ef 8311 	mrs	r3, BASEPRI
 8005d28:	f04f 0120 	mov.w	r1, #32
 8005d2c:	f381 8811 	msr	BASEPRI, r1
 8005d30:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005d32:	4b53      	ldr	r3, [pc, #332]	; (8005e80 <SEGGER_SYSVIEW_Start+0x168>)
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	220a      	movs	r2, #10
 8005d38:	4952      	ldr	r1, [pc, #328]	; (8005e84 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fa fa50 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005d46:	200a      	movs	r0, #10
 8005d48:	f7ff fe2a 	bl	80059a0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d50:	f04f 0120 	mov.w	r1, #32
 8005d54:	f381 8811 	msr	BASEPRI, r1
 8005d58:	60bb      	str	r3, [r7, #8]
 8005d5a:	484b      	ldr	r0, [pc, #300]	; (8005e88 <SEGGER_SYSVIEW_Start+0x170>)
 8005d5c:	f7ff fbf5 	bl	800554a <_PreparePacket>
 8005d60:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d6a:	4b45      	ldr	r3, [pc, #276]	; (8005e80 <SEGGER_SYSVIEW_Start+0x168>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d70:	e00b      	b.n	8005d8a <SEGGER_SYSVIEW_Start+0x72>
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	1c59      	adds	r1, r3, #1
 8005d7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	09db      	lsrs	r3, r3, #7
 8005d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d8e:	d8f0      	bhi.n	8005d72 <SEGGER_SYSVIEW_Start+0x5a>
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
 8005da4:	4b36      	ldr	r3, [pc, #216]	; (8005e80 <SEGGER_SYSVIEW_Start+0x168>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	e00b      	b.n	8005dc4 <SEGGER_SYSVIEW_Start+0xac>
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	1c59      	adds	r1, r3, #1
 8005db4:	6279      	str	r1, [r7, #36]	; 0x24
 8005db6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	09db      	lsrs	r3, r3, #7
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc8:	d8f0      	bhi.n	8005dac <SEGGER_SYSVIEW_Start+0x94>
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	627a      	str	r2, [r7, #36]	; 0x24
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	4b28      	ldr	r3, [pc, #160]	; (8005e80 <SEGGER_SYSVIEW_Start+0x168>)
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	61bb      	str	r3, [r7, #24]
 8005de4:	e00b      	b.n	8005dfe <SEGGER_SYSVIEW_Start+0xe6>
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	1c59      	adds	r1, r3, #1
 8005dee:	61f9      	str	r1, [r7, #28]
 8005df0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	09db      	lsrs	r3, r3, #7
 8005dfc:	61bb      	str	r3, [r7, #24]
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b7f      	cmp	r3, #127	; 0x7f
 8005e02:	d8f0      	bhi.n	8005de6 <SEGGER_SYSVIEW_Start+0xce>
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	61fa      	str	r2, [r7, #28]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	e00b      	b.n	8005e36 <SEGGER_SYSVIEW_Start+0x11e>
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	1c59      	adds	r1, r3, #1
 8005e26:	6179      	str	r1, [r7, #20]
 8005e28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	09db      	lsrs	r3, r3, #7
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b7f      	cmp	r3, #127	; 0x7f
 8005e3a:	d8f0      	bhi.n	8005e1e <SEGGER_SYSVIEW_Start+0x106>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	617a      	str	r2, [r7, #20]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005e4c:	2218      	movs	r2, #24
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff fc6b 	bl	800572c <_SendPacket>
      RECORD_END();
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005e5c:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <SEGGER_SYSVIEW_Start+0x168>)
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <SEGGER_SYSVIEW_Start+0x168>)
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005e6a:	f000 f9eb 	bl	8006244 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005e6e:	f000 f9b1 	bl	80061d4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005e72:	f000 fc83 	bl	800677c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005e76:	bf00      	nop
 8005e78:	3730      	adds	r7, #48	; 0x30
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	200172c0 	.word	0x200172c0
 8005e84:	08007308 	.word	0x08007308
 8005e88:	200172f0 	.word	0x200172f0

08005e8c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e92:	f3ef 8311 	mrs	r3, BASEPRI
 8005e96:	f04f 0120 	mov.w	r1, #32
 8005e9a:	f381 8811 	msr	BASEPRI, r1
 8005e9e:	607b      	str	r3, [r7, #4]
 8005ea0:	480b      	ldr	r0, [pc, #44]	; (8005ed0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005ea2:	f7ff fb52 	bl	800554a <_PreparePacket>
 8005ea6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005eb0:	220b      	movs	r2, #11
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6838      	ldr	r0, [r7, #0]
 8005eb6:	f7ff fc39 	bl	800572c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005eba:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f383 8811 	msr	BASEPRI, r3
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	200172f0 	.word	0x200172f0
 8005ed4:	200172c0 	.word	0x200172c0

08005ed8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08c      	sub	sp, #48	; 0x30
 8005edc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ede:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee2:	f04f 0120 	mov.w	r1, #32
 8005ee6:	f381 8811 	msr	BASEPRI, r1
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	4845      	ldr	r0, [pc, #276]	; (8006004 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005eee:	f7ff fb2c 	bl	800554a <_PreparePacket>
 8005ef2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005efc:	4b42      	ldr	r3, [pc, #264]	; (8006008 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f02:	e00b      	b.n	8005f1c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	1c59      	adds	r1, r3, #1
 8005f0c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	09db      	lsrs	r3, r3, #7
 8005f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f20:	d8f0      	bhi.n	8005f04 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
 8005f36:	4b34      	ldr	r3, [pc, #208]	; (8006008 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	623b      	str	r3, [r7, #32]
 8005f3c:	e00b      	b.n	8005f56 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	1c59      	adds	r1, r3, #1
 8005f46:	6279      	str	r1, [r7, #36]	; 0x24
 8005f48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	09db      	lsrs	r3, r3, #7
 8005f54:	623b      	str	r3, [r7, #32]
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	2b7f      	cmp	r3, #127	; 0x7f
 8005f5a:	d8f0      	bhi.n	8005f3e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	627a      	str	r2, [r7, #36]	; 0x24
 8005f62:	6a3a      	ldr	r2, [r7, #32]
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	61fb      	str	r3, [r7, #28]
 8005f70:	4b25      	ldr	r3, [pc, #148]	; (8006008 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	e00b      	b.n	8005f90 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	1c59      	adds	r1, r3, #1
 8005f80:	61f9      	str	r1, [r7, #28]
 8005f82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	09db      	lsrs	r3, r3, #7
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	2b7f      	cmp	r3, #127	; 0x7f
 8005f94:	d8f0      	bhi.n	8005f78 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	61fa      	str	r2, [r7, #28]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	e00b      	b.n	8005fc8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	1c59      	adds	r1, r3, #1
 8005fb8:	6179      	str	r1, [r7, #20]
 8005fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	09db      	lsrs	r3, r3, #7
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b7f      	cmp	r3, #127	; 0x7f
 8005fcc:	d8f0      	bhi.n	8005fb0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	617a      	str	r2, [r7, #20]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005fde:	2218      	movs	r2, #24
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	68b8      	ldr	r0, [r7, #8]
 8005fe4:	f7ff fba2 	bl	800572c <_SendPacket>
  RECORD_END();
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005fee:	4b06      	ldr	r3, [pc, #24]	; (8006008 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005ff6:	4b04      	ldr	r3, [pc, #16]	; (8006008 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	4798      	blx	r3
  }
}
 8005ffc:	bf00      	nop
 8005ffe:	3730      	adds	r7, #48	; 0x30
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	200172f0 	.word	0x200172f0
 8006008:	200172c0 	.word	0x200172c0

0800600c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800600c:	b580      	push	{r7, lr}
 800600e:	b092      	sub	sp, #72	; 0x48
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006014:	f3ef 8311 	mrs	r3, BASEPRI
 8006018:	f04f 0120 	mov.w	r1, #32
 800601c:	f381 8811 	msr	BASEPRI, r1
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	486a      	ldr	r0, [pc, #424]	; (80061cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006024:	f7ff fa91 	bl	800554a <_PreparePacket>
 8006028:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	647b      	str	r3, [r7, #68]	; 0x44
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4b66      	ldr	r3, [pc, #408]	; (80061d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	643b      	str	r3, [r7, #64]	; 0x40
 800603e:	e00b      	b.n	8006058 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006042:	b2da      	uxtb	r2, r3
 8006044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006046:	1c59      	adds	r1, r3, #1
 8006048:	6479      	str	r1, [r7, #68]	; 0x44
 800604a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006054:	09db      	lsrs	r3, r3, #7
 8006056:	643b      	str	r3, [r7, #64]	; 0x40
 8006058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605a:	2b7f      	cmp	r3, #127	; 0x7f
 800605c:	d8f0      	bhi.n	8006040 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800605e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	647a      	str	r2, [r7, #68]	; 0x44
 8006064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800606c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	63bb      	str	r3, [r7, #56]	; 0x38
 8006078:	e00b      	b.n	8006092 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	b2da      	uxtb	r2, r3
 800607e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006080:	1c59      	adds	r1, r3, #1
 8006082:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	09db      	lsrs	r3, r3, #7
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	2b7f      	cmp	r3, #127	; 0x7f
 8006096:	d8f0      	bhi.n	800607a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800609e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	4619      	mov	r1, r3
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff f9fd 	bl	80054b0 <_EncodeStr>
 80060b6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80060b8:	2209      	movs	r2, #9
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	6938      	ldr	r0, [r7, #16]
 80060be:	f7ff fb35 	bl	800572c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	637b      	str	r3, [r7, #52]	; 0x34
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4b40      	ldr	r3, [pc, #256]	; (80061d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	633b      	str	r3, [r7, #48]	; 0x30
 80060d6:	e00b      	b.n	80060f0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	6379      	str	r1, [r7, #52]	; 0x34
 80060e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	09db      	lsrs	r3, r3, #7
 80060ee:	633b      	str	r3, [r7, #48]	; 0x30
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	2b7f      	cmp	r3, #127	; 0x7f
 80060f4:	d8f0      	bhi.n	80060d8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80060f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	637a      	str	r2, [r7, #52]	; 0x34
 80060fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006104:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006110:	e00b      	b.n	800612a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	b2da      	uxtb	r2, r3
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	1c59      	adds	r1, r3, #1
 800611a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800611c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	09db      	lsrs	r3, r3, #7
 8006128:	62bb      	str	r3, [r7, #40]	; 0x28
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	2b7f      	cmp	r3, #127	; 0x7f
 800612e:	d8f0      	bhi.n	8006112 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	623b      	str	r3, [r7, #32]
 800614a:	e00b      	b.n	8006164 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	b2da      	uxtb	r2, r3
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	1c59      	adds	r1, r3, #1
 8006154:	6279      	str	r1, [r7, #36]	; 0x24
 8006156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	09db      	lsrs	r3, r3, #7
 8006162:	623b      	str	r3, [r7, #32]
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	2b7f      	cmp	r3, #127	; 0x7f
 8006168:	d8f0      	bhi.n	800614c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	627a      	str	r2, [r7, #36]	; 0x24
 8006170:	6a3a      	ldr	r2, [r7, #32]
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	61fb      	str	r3, [r7, #28]
 800617e:	2300      	movs	r3, #0
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	e00b      	b.n	800619c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	b2da      	uxtb	r2, r3
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	1c59      	adds	r1, r3, #1
 800618c:	61f9      	str	r1, [r7, #28]
 800618e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	09db      	lsrs	r3, r3, #7
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b7f      	cmp	r3, #127	; 0x7f
 80061a0:	d8f0      	bhi.n	8006184 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	61fa      	str	r2, [r7, #28]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80061b2:	2215      	movs	r2, #21
 80061b4:	68f9      	ldr	r1, [r7, #12]
 80061b6:	6938      	ldr	r0, [r7, #16]
 80061b8:	f7ff fab8 	bl	800572c <_SendPacket>
  RECORD_END();
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f383 8811 	msr	BASEPRI, r3
}
 80061c2:	bf00      	nop
 80061c4:	3748      	adds	r7, #72	; 0x48
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200172f0 	.word	0x200172f0
 80061d0:	200172c0 	.word	0x200172c0

080061d4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80061d8:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80061ea:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4798      	blx	r3
  }
}
 80061f2:	bf00      	nop
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200172c0 	.word	0x200172c0

080061fc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006204:	f3ef 8311 	mrs	r3, BASEPRI
 8006208:	f04f 0120 	mov.w	r1, #32
 800620c:	f381 8811 	msr	BASEPRI, r1
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	480b      	ldr	r0, [pc, #44]	; (8006240 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006214:	f7ff f999 	bl	800554a <_PreparePacket>
 8006218:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800621a:	2280      	movs	r2, #128	; 0x80
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	6938      	ldr	r0, [r7, #16]
 8006220:	f7ff f946 	bl	80054b0 <_EncodeStr>
 8006224:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006226:	220e      	movs	r2, #14
 8006228:	68f9      	ldr	r1, [r7, #12]
 800622a:	6938      	ldr	r0, [r7, #16]
 800622c:	f7ff fa7e 	bl	800572c <_SendPacket>
  RECORD_END();
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f383 8811 	msr	BASEPRI, r3
}
 8006236:	bf00      	nop
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	200172f0 	.word	0x200172f0

08006244 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006244:	b590      	push	{r4, r7, lr}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800624a:	4b15      	ldr	r3, [pc, #84]	; (80062a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d01a      	beq.n	8006288 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006252:	4b13      	ldr	r3, [pc, #76]	; (80062a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d015      	beq.n	8006288 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800625c:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4798      	blx	r3
 8006264:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006268:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800626a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	000a      	movs	r2, r1
 8006278:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800627a:	4613      	mov	r3, r2
 800627c:	461a      	mov	r2, r3
 800627e:	4621      	mov	r1, r4
 8006280:	200d      	movs	r0, #13
 8006282:	f7ff fbe7 	bl	8005a54 <SEGGER_SYSVIEW_RecordU32x2>
 8006286:	e006      	b.n	8006296 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006288:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4619      	mov	r1, r3
 800628e:	200c      	movs	r0, #12
 8006290:	f7ff fba4 	bl	80059dc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	bd90      	pop	{r4, r7, pc}
 800629e:	bf00      	nop
 80062a0:	200172c0 	.word	0x200172c0
 80062a4:	e0001004 	.word	0xe0001004

080062a8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062ae:	f3ef 8311 	mrs	r3, BASEPRI
 80062b2:	f04f 0120 	mov.w	r1, #32
 80062b6:	f381 8811 	msr	BASEPRI, r1
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	4819      	ldr	r0, [pc, #100]	; (8006324 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80062be:	f7ff f944 	bl	800554a <_PreparePacket>
 80062c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80062c8:	4b17      	ldr	r3, [pc, #92]	; (8006328 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	e00b      	b.n	80062f4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	1c59      	adds	r1, r3, #1
 80062e4:	6179      	str	r1, [r7, #20]
 80062e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	09db      	lsrs	r3, r3, #7
 80062f2:	613b      	str	r3, [r7, #16]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b7f      	cmp	r3, #127	; 0x7f
 80062f8:	d8f0      	bhi.n	80062dc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	617a      	str	r2, [r7, #20]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800630a:	2202      	movs	r2, #2
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	68b8      	ldr	r0, [r7, #8]
 8006310:	f7ff fa0c 	bl	800572c <_SendPacket>
  RECORD_END();
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f383 8811 	msr	BASEPRI, r3
}
 800631a:	bf00      	nop
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	200172f0 	.word	0x200172f0
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006332:	f3ef 8311 	mrs	r3, BASEPRI
 8006336:	f04f 0120 	mov.w	r1, #32
 800633a:	f381 8811 	msr	BASEPRI, r1
 800633e:	607b      	str	r3, [r7, #4]
 8006340:	4807      	ldr	r0, [pc, #28]	; (8006360 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006342:	f7ff f902 	bl	800554a <_PreparePacket>
 8006346:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006348:	2203      	movs	r2, #3
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6838      	ldr	r0, [r7, #0]
 800634e:	f7ff f9ed 	bl	800572c <_SendPacket>
  RECORD_END();
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f383 8811 	msr	BASEPRI, r3
}
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	200172f0 	.word	0x200172f0

08006364 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800636a:	f3ef 8311 	mrs	r3, BASEPRI
 800636e:	f04f 0120 	mov.w	r1, #32
 8006372:	f381 8811 	msr	BASEPRI, r1
 8006376:	607b      	str	r3, [r7, #4]
 8006378:	4807      	ldr	r0, [pc, #28]	; (8006398 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800637a:	f7ff f8e6 	bl	800554a <_PreparePacket>
 800637e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006380:	2212      	movs	r2, #18
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6838      	ldr	r0, [r7, #0]
 8006386:	f7ff f9d1 	bl	800572c <_SendPacket>
  RECORD_END();
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f383 8811 	msr	BASEPRI, r3
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	200172f0 	.word	0x200172f0

0800639c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063a2:	f3ef 8311 	mrs	r3, BASEPRI
 80063a6:	f04f 0120 	mov.w	r1, #32
 80063aa:	f381 8811 	msr	BASEPRI, r1
 80063ae:	607b      	str	r3, [r7, #4]
 80063b0:	4807      	ldr	r0, [pc, #28]	; (80063d0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80063b2:	f7ff f8ca 	bl	800554a <_PreparePacket>
 80063b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80063b8:	2211      	movs	r2, #17
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6838      	ldr	r0, [r7, #0]
 80063be:	f7ff f9b5 	bl	800572c <_SendPacket>
  RECORD_END();
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f383 8811 	msr	BASEPRI, r3
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	200172f0 	.word	0x200172f0

080063d4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063dc:	f3ef 8311 	mrs	r3, BASEPRI
 80063e0:	f04f 0120 	mov.w	r1, #32
 80063e4:	f381 8811 	msr	BASEPRI, r1
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	4819      	ldr	r0, [pc, #100]	; (8006450 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80063ec:	f7ff f8ad 	bl	800554a <_PreparePacket>
 80063f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063f6:	4b17      	ldr	r3, [pc, #92]	; (8006454 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	e00b      	b.n	8006422 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	1c59      	adds	r1, r3, #1
 8006412:	61f9      	str	r1, [r7, #28]
 8006414:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	09db      	lsrs	r3, r3, #7
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b7f      	cmp	r3, #127	; 0x7f
 8006426:	d8f0      	bhi.n	800640a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	61fa      	str	r2, [r7, #28]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006438:	2208      	movs	r2, #8
 800643a:	68f9      	ldr	r1, [r7, #12]
 800643c:	6938      	ldr	r0, [r7, #16]
 800643e:	f7ff f975 	bl	800572c <_SendPacket>
  RECORD_END();
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f383 8811 	msr	BASEPRI, r3
}
 8006448:	bf00      	nop
 800644a:	3720      	adds	r7, #32
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200172f0 	.word	0x200172f0
 8006454:	200172c0 	.word	0x200172c0

08006458 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006460:	f3ef 8311 	mrs	r3, BASEPRI
 8006464:	f04f 0120 	mov.w	r1, #32
 8006468:	f381 8811 	msr	BASEPRI, r1
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	4819      	ldr	r0, [pc, #100]	; (80064d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006470:	f7ff f86b 	bl	800554a <_PreparePacket>
 8006474:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800647a:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	e00b      	b.n	80064a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	1c59      	adds	r1, r3, #1
 8006496:	61f9      	str	r1, [r7, #28]
 8006498:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	09db      	lsrs	r3, r3, #7
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b7f      	cmp	r3, #127	; 0x7f
 80064aa:	d8f0      	bhi.n	800648e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	61fa      	str	r2, [r7, #28]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80064bc:	2204      	movs	r2, #4
 80064be:	68f9      	ldr	r1, [r7, #12]
 80064c0:	6938      	ldr	r0, [r7, #16]
 80064c2:	f7ff f933 	bl	800572c <_SendPacket>
  RECORD_END();
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f383 8811 	msr	BASEPRI, r3
}
 80064cc:	bf00      	nop
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	200172f0 	.word	0x200172f0
 80064d8:	200172c0 	.word	0x200172c0

080064dc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064e4:	f3ef 8311 	mrs	r3, BASEPRI
 80064e8:	f04f 0120 	mov.w	r1, #32
 80064ec:	f381 8811 	msr	BASEPRI, r1
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	4819      	ldr	r0, [pc, #100]	; (8006558 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80064f4:	f7ff f829 	bl	800554a <_PreparePacket>
 80064f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80064fe:	4b17      	ldr	r3, [pc, #92]	; (800655c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	e00b      	b.n	800652a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	b2da      	uxtb	r2, r3
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	1c59      	adds	r1, r3, #1
 800651a:	61f9      	str	r1, [r7, #28]
 800651c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	09db      	lsrs	r3, r3, #7
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	2b7f      	cmp	r3, #127	; 0x7f
 800652e:	d8f0      	bhi.n	8006512 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	61fa      	str	r2, [r7, #28]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006540:	2206      	movs	r2, #6
 8006542:	68f9      	ldr	r1, [r7, #12]
 8006544:	6938      	ldr	r0, [r7, #16]
 8006546:	f7ff f8f1 	bl	800572c <_SendPacket>
  RECORD_END();
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f383 8811 	msr	BASEPRI, r3
}
 8006550:	bf00      	nop
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	200172f0 	.word	0x200172f0
 800655c:	200172c0 	.word	0x200172c0

08006560 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	; 0x28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800656a:	f3ef 8311 	mrs	r3, BASEPRI
 800656e:	f04f 0120 	mov.w	r1, #32
 8006572:	f381 8811 	msr	BASEPRI, r1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	4827      	ldr	r0, [pc, #156]	; (8006618 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800657a:	f7fe ffe6 	bl	800554a <_PreparePacket>
 800657e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006584:	4b25      	ldr	r3, [pc, #148]	; (800661c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	e00b      	b.n	80065b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	b2da      	uxtb	r2, r3
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	1c59      	adds	r1, r3, #1
 80065a0:	6279      	str	r1, [r7, #36]	; 0x24
 80065a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	09db      	lsrs	r3, r3, #7
 80065ae:	623b      	str	r3, [r7, #32]
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	2b7f      	cmp	r3, #127	; 0x7f
 80065b4:	d8f0      	bhi.n	8006598 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	627a      	str	r2, [r7, #36]	; 0x24
 80065bc:	6a3a      	ldr	r2, [r7, #32]
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	701a      	strb	r2, [r3, #0]
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	e00b      	b.n	80065e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	1c59      	adds	r1, r3, #1
 80065d8:	61f9      	str	r1, [r7, #28]
 80065da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	09db      	lsrs	r3, r3, #7
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	2b7f      	cmp	r3, #127	; 0x7f
 80065ec:	d8f0      	bhi.n	80065d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	61fa      	str	r2, [r7, #28]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80065fe:	2207      	movs	r2, #7
 8006600:	68f9      	ldr	r1, [r7, #12]
 8006602:	6938      	ldr	r0, [r7, #16]
 8006604:	f7ff f892 	bl	800572c <_SendPacket>
  RECORD_END();
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f383 8811 	msr	BASEPRI, r3
}
 800660e:	bf00      	nop
 8006610:	3728      	adds	r7, #40	; 0x28
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	200172f0 	.word	0x200172f0
 800661c:	200172c0 	.word	0x200172c0

08006620 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	1ad3      	subs	r3, r2, r3
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	200172c0 	.word	0x200172c0

08006640 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006640:	b580      	push	{r7, lr}
 8006642:	b08c      	sub	sp, #48	; 0x30
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800664a:	4b3b      	ldr	r3, [pc, #236]	; (8006738 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d06d      	beq.n	800672e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006652:	4b39      	ldr	r3, [pc, #228]	; (8006738 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006658:	2300      	movs	r3, #0
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
 800665c:	e008      	b.n	8006670 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	3301      	adds	r3, #1
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006674:	429a      	cmp	r2, r3
 8006676:	d3f2      	bcc.n	800665e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006678:	e000      	b.n	800667c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800667a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d055      	beq.n	800672e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006682:	f3ef 8311 	mrs	r3, BASEPRI
 8006686:	f04f 0120 	mov.w	r1, #32
 800668a:	f381 8811 	msr	BASEPRI, r1
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	482a      	ldr	r0, [pc, #168]	; (800673c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006692:	f7fe ff5a 	bl	800554a <_PreparePacket>
 8006696:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	623b      	str	r3, [r7, #32]
 80066a4:	e00b      	b.n	80066be <SEGGER_SYSVIEW_SendModule+0x7e>
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	1c59      	adds	r1, r3, #1
 80066ae:	6279      	str	r1, [r7, #36]	; 0x24
 80066b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	09db      	lsrs	r3, r3, #7
 80066bc:	623b      	str	r3, [r7, #32]
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	2b7f      	cmp	r3, #127	; 0x7f
 80066c2:	d8f0      	bhi.n	80066a6 <SEGGER_SYSVIEW_SendModule+0x66>
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	627a      	str	r2, [r7, #36]	; 0x24
 80066ca:	6a3a      	ldr	r2, [r7, #32]
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	61fb      	str	r3, [r7, #28]
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	e00b      	b.n	80066f8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	1c59      	adds	r1, r3, #1
 80066e8:	61f9      	str	r1, [r7, #28]
 80066ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	09db      	lsrs	r3, r3, #7
 80066f6:	61bb      	str	r3, [r7, #24]
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2b7f      	cmp	r3, #127	; 0x7f
 80066fc:	d8f0      	bhi.n	80066e0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	61fa      	str	r2, [r7, #28]
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	4619      	mov	r1, r3
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7fe feca 	bl	80054b0 <_EncodeStr>
 800671c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800671e:	2216      	movs	r2, #22
 8006720:	68f9      	ldr	r1, [r7, #12]
 8006722:	6938      	ldr	r0, [r7, #16]
 8006724:	f7ff f802 	bl	800572c <_SendPacket>
      RECORD_END();
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800672e:	bf00      	nop
 8006730:	3730      	adds	r7, #48	; 0x30
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	200172e8 	.word	0x200172e8
 800673c:	200172f0 	.word	0x200172f0

08006740 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00f      	beq.n	800676e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800674e:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f2      	bne.n	8006754 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	200172e8 	.word	0x200172e8

0800677c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006782:	f3ef 8311 	mrs	r3, BASEPRI
 8006786:	f04f 0120 	mov.w	r1, #32
 800678a:	f381 8811 	msr	BASEPRI, r1
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	4817      	ldr	r0, [pc, #92]	; (80067f0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006792:	f7fe feda 	bl	800554a <_PreparePacket>
 8006796:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	4b14      	ldr	r3, [pc, #80]	; (80067f4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	e00b      	b.n	80067c0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	1c59      	adds	r1, r3, #1
 80067b0:	6179      	str	r1, [r7, #20]
 80067b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	09db      	lsrs	r3, r3, #7
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b7f      	cmp	r3, #127	; 0x7f
 80067c4:	d8f0      	bhi.n	80067a8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	617a      	str	r2, [r7, #20]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80067d6:	221b      	movs	r2, #27
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	68b8      	ldr	r0, [r7, #8]
 80067dc:	f7fe ffa6 	bl	800572c <_SendPacket>
  RECORD_END();
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f383 8811 	msr	BASEPRI, r3
}
 80067e6:	bf00      	nop
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	200172f0 	.word	0x200172f0
 80067f4:	200172ec 	.word	0x200172ec

080067f8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006800:	f3ef 8311 	mrs	r3, BASEPRI
 8006804:	f04f 0120 	mov.w	r1, #32
 8006808:	f381 8811 	msr	BASEPRI, r1
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	4827      	ldr	r0, [pc, #156]	; (80068ac <SEGGER_SYSVIEW_Warn+0xb4>)
 8006810:	f7fe fe9b 	bl	800554a <_PreparePacket>
 8006814:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006816:	2280      	movs	r2, #128	; 0x80
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	6938      	ldr	r0, [r7, #16]
 800681c:	f7fe fe48 	bl	80054b0 <_EncodeStr>
 8006820:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
 8006826:	2301      	movs	r3, #1
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	e00b      	b.n	8006844 <SEGGER_SYSVIEW_Warn+0x4c>
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	b2da      	uxtb	r2, r3
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	1c59      	adds	r1, r3, #1
 8006834:	6279      	str	r1, [r7, #36]	; 0x24
 8006836:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	09db      	lsrs	r3, r3, #7
 8006842:	623b      	str	r3, [r7, #32]
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	2b7f      	cmp	r3, #127	; 0x7f
 8006848:	d8f0      	bhi.n	800682c <SEGGER_SYSVIEW_Warn+0x34>
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	627a      	str	r2, [r7, #36]	; 0x24
 8006850:	6a3a      	ldr	r2, [r7, #32]
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	61fb      	str	r3, [r7, #28]
 800685e:	2300      	movs	r3, #0
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	e00b      	b.n	800687c <SEGGER_SYSVIEW_Warn+0x84>
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	b2da      	uxtb	r2, r3
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	61f9      	str	r1, [r7, #28]
 800686e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	09db      	lsrs	r3, r3, #7
 800687a:	61bb      	str	r3, [r7, #24]
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2b7f      	cmp	r3, #127	; 0x7f
 8006880:	d8f0      	bhi.n	8006864 <SEGGER_SYSVIEW_Warn+0x6c>
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	61fa      	str	r2, [r7, #28]
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006892:	221a      	movs	r2, #26
 8006894:	68f9      	ldr	r1, [r7, #12]
 8006896:	6938      	ldr	r0, [r7, #16]
 8006898:	f7fe ff48 	bl	800572c <_SendPacket>
  RECORD_END();
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f383 8811 	msr	BASEPRI, r3
}
 80068a2:	bf00      	nop
 80068a4:	3728      	adds	r7, #40	; 0x28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	200172f0 	.word	0x200172f0

080068b0 <__libc_init_array>:
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	4d0d      	ldr	r5, [pc, #52]	; (80068e8 <__libc_init_array+0x38>)
 80068b4:	4c0d      	ldr	r4, [pc, #52]	; (80068ec <__libc_init_array+0x3c>)
 80068b6:	1b64      	subs	r4, r4, r5
 80068b8:	10a4      	asrs	r4, r4, #2
 80068ba:	2600      	movs	r6, #0
 80068bc:	42a6      	cmp	r6, r4
 80068be:	d109      	bne.n	80068d4 <__libc_init_array+0x24>
 80068c0:	4d0b      	ldr	r5, [pc, #44]	; (80068f0 <__libc_init_array+0x40>)
 80068c2:	4c0c      	ldr	r4, [pc, #48]	; (80068f4 <__libc_init_array+0x44>)
 80068c4:	f000 fc6a 	bl	800719c <_init>
 80068c8:	1b64      	subs	r4, r4, r5
 80068ca:	10a4      	asrs	r4, r4, #2
 80068cc:	2600      	movs	r6, #0
 80068ce:	42a6      	cmp	r6, r4
 80068d0:	d105      	bne.n	80068de <__libc_init_array+0x2e>
 80068d2:	bd70      	pop	{r4, r5, r6, pc}
 80068d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d8:	4798      	blx	r3
 80068da:	3601      	adds	r6, #1
 80068dc:	e7ee      	b.n	80068bc <__libc_init_array+0xc>
 80068de:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e2:	4798      	blx	r3
 80068e4:	3601      	adds	r6, #1
 80068e6:	e7f2      	b.n	80068ce <__libc_init_array+0x1e>
 80068e8:	08007350 	.word	0x08007350
 80068ec:	08007350 	.word	0x08007350
 80068f0:	08007350 	.word	0x08007350
 80068f4:	08007354 	.word	0x08007354

080068f8 <memcmp>:
 80068f8:	b530      	push	{r4, r5, lr}
 80068fa:	3901      	subs	r1, #1
 80068fc:	2400      	movs	r4, #0
 80068fe:	42a2      	cmp	r2, r4
 8006900:	d101      	bne.n	8006906 <memcmp+0xe>
 8006902:	2000      	movs	r0, #0
 8006904:	e005      	b.n	8006912 <memcmp+0x1a>
 8006906:	5d03      	ldrb	r3, [r0, r4]
 8006908:	3401      	adds	r4, #1
 800690a:	5d0d      	ldrb	r5, [r1, r4]
 800690c:	42ab      	cmp	r3, r5
 800690e:	d0f6      	beq.n	80068fe <memcmp+0x6>
 8006910:	1b58      	subs	r0, r3, r5
 8006912:	bd30      	pop	{r4, r5, pc}

08006914 <memcpy>:
 8006914:	440a      	add	r2, r1
 8006916:	4291      	cmp	r1, r2
 8006918:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800691c:	d100      	bne.n	8006920 <memcpy+0xc>
 800691e:	4770      	bx	lr
 8006920:	b510      	push	{r4, lr}
 8006922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800692a:	4291      	cmp	r1, r2
 800692c:	d1f9      	bne.n	8006922 <memcpy+0xe>
 800692e:	bd10      	pop	{r4, pc}

08006930 <memset>:
 8006930:	4402      	add	r2, r0
 8006932:	4603      	mov	r3, r0
 8006934:	4293      	cmp	r3, r2
 8006936:	d100      	bne.n	800693a <memset+0xa>
 8006938:	4770      	bx	lr
 800693a:	f803 1b01 	strb.w	r1, [r3], #1
 800693e:	e7f9      	b.n	8006934 <memset+0x4>

08006940 <_vsiprintf_r>:
 8006940:	b500      	push	{lr}
 8006942:	b09b      	sub	sp, #108	; 0x6c
 8006944:	9100      	str	r1, [sp, #0]
 8006946:	9104      	str	r1, [sp, #16]
 8006948:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800694c:	9105      	str	r1, [sp, #20]
 800694e:	9102      	str	r1, [sp, #8]
 8006950:	4905      	ldr	r1, [pc, #20]	; (8006968 <_vsiprintf_r+0x28>)
 8006952:	9103      	str	r1, [sp, #12]
 8006954:	4669      	mov	r1, sp
 8006956:	f000 f86f 	bl	8006a38 <_svfiprintf_r>
 800695a:	9b00      	ldr	r3, [sp, #0]
 800695c:	2200      	movs	r2, #0
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	b01b      	add	sp, #108	; 0x6c
 8006962:	f85d fb04 	ldr.w	pc, [sp], #4
 8006966:	bf00      	nop
 8006968:	ffff0208 	.word	0xffff0208

0800696c <vsiprintf>:
 800696c:	4613      	mov	r3, r2
 800696e:	460a      	mov	r2, r1
 8006970:	4601      	mov	r1, r0
 8006972:	4802      	ldr	r0, [pc, #8]	; (800697c <vsiprintf+0x10>)
 8006974:	6800      	ldr	r0, [r0, #0]
 8006976:	f7ff bfe3 	b.w	8006940 <_vsiprintf_r>
 800697a:	bf00      	nop
 800697c:	20000014 	.word	0x20000014

08006980 <__ssputs_r>:
 8006980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006984:	688e      	ldr	r6, [r1, #8]
 8006986:	429e      	cmp	r6, r3
 8006988:	4682      	mov	sl, r0
 800698a:	460c      	mov	r4, r1
 800698c:	4690      	mov	r8, r2
 800698e:	461f      	mov	r7, r3
 8006990:	d838      	bhi.n	8006a04 <__ssputs_r+0x84>
 8006992:	898a      	ldrh	r2, [r1, #12]
 8006994:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006998:	d032      	beq.n	8006a00 <__ssputs_r+0x80>
 800699a:	6825      	ldr	r5, [r4, #0]
 800699c:	6909      	ldr	r1, [r1, #16]
 800699e:	eba5 0901 	sub.w	r9, r5, r1
 80069a2:	6965      	ldr	r5, [r4, #20]
 80069a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069ac:	3301      	adds	r3, #1
 80069ae:	444b      	add	r3, r9
 80069b0:	106d      	asrs	r5, r5, #1
 80069b2:	429d      	cmp	r5, r3
 80069b4:	bf38      	it	cc
 80069b6:	461d      	movcc	r5, r3
 80069b8:	0553      	lsls	r3, r2, #21
 80069ba:	d531      	bpl.n	8006a20 <__ssputs_r+0xa0>
 80069bc:	4629      	mov	r1, r5
 80069be:	f000 fb39 	bl	8007034 <_malloc_r>
 80069c2:	4606      	mov	r6, r0
 80069c4:	b950      	cbnz	r0, 80069dc <__ssputs_r+0x5c>
 80069c6:	230c      	movs	r3, #12
 80069c8:	f8ca 3000 	str.w	r3, [sl]
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069dc:	6921      	ldr	r1, [r4, #16]
 80069de:	464a      	mov	r2, r9
 80069e0:	f7ff ff98 	bl	8006914 <memcpy>
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ee:	81a3      	strh	r3, [r4, #12]
 80069f0:	6126      	str	r6, [r4, #16]
 80069f2:	6165      	str	r5, [r4, #20]
 80069f4:	444e      	add	r6, r9
 80069f6:	eba5 0509 	sub.w	r5, r5, r9
 80069fa:	6026      	str	r6, [r4, #0]
 80069fc:	60a5      	str	r5, [r4, #8]
 80069fe:	463e      	mov	r6, r7
 8006a00:	42be      	cmp	r6, r7
 8006a02:	d900      	bls.n	8006a06 <__ssputs_r+0x86>
 8006a04:	463e      	mov	r6, r7
 8006a06:	4632      	mov	r2, r6
 8006a08:	6820      	ldr	r0, [r4, #0]
 8006a0a:	4641      	mov	r1, r8
 8006a0c:	f000 faa8 	bl	8006f60 <memmove>
 8006a10:	68a3      	ldr	r3, [r4, #8]
 8006a12:	6822      	ldr	r2, [r4, #0]
 8006a14:	1b9b      	subs	r3, r3, r6
 8006a16:	4432      	add	r2, r6
 8006a18:	60a3      	str	r3, [r4, #8]
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	e7db      	b.n	80069d8 <__ssputs_r+0x58>
 8006a20:	462a      	mov	r2, r5
 8006a22:	f000 fb61 	bl	80070e8 <_realloc_r>
 8006a26:	4606      	mov	r6, r0
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d1e1      	bne.n	80069f0 <__ssputs_r+0x70>
 8006a2c:	6921      	ldr	r1, [r4, #16]
 8006a2e:	4650      	mov	r0, sl
 8006a30:	f000 fab0 	bl	8006f94 <_free_r>
 8006a34:	e7c7      	b.n	80069c6 <__ssputs_r+0x46>
	...

08006a38 <_svfiprintf_r>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	4698      	mov	r8, r3
 8006a3e:	898b      	ldrh	r3, [r1, #12]
 8006a40:	061b      	lsls	r3, r3, #24
 8006a42:	b09d      	sub	sp, #116	; 0x74
 8006a44:	4607      	mov	r7, r0
 8006a46:	460d      	mov	r5, r1
 8006a48:	4614      	mov	r4, r2
 8006a4a:	d50e      	bpl.n	8006a6a <_svfiprintf_r+0x32>
 8006a4c:	690b      	ldr	r3, [r1, #16]
 8006a4e:	b963      	cbnz	r3, 8006a6a <_svfiprintf_r+0x32>
 8006a50:	2140      	movs	r1, #64	; 0x40
 8006a52:	f000 faef 	bl	8007034 <_malloc_r>
 8006a56:	6028      	str	r0, [r5, #0]
 8006a58:	6128      	str	r0, [r5, #16]
 8006a5a:	b920      	cbnz	r0, 8006a66 <_svfiprintf_r+0x2e>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a64:	e0d1      	b.n	8006c0a <_svfiprintf_r+0x1d2>
 8006a66:	2340      	movs	r3, #64	; 0x40
 8006a68:	616b      	str	r3, [r5, #20]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6e:	2320      	movs	r3, #32
 8006a70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a78:	2330      	movs	r3, #48	; 0x30
 8006a7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c24 <_svfiprintf_r+0x1ec>
 8006a7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a82:	f04f 0901 	mov.w	r9, #1
 8006a86:	4623      	mov	r3, r4
 8006a88:	469a      	mov	sl, r3
 8006a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a8e:	b10a      	cbz	r2, 8006a94 <_svfiprintf_r+0x5c>
 8006a90:	2a25      	cmp	r2, #37	; 0x25
 8006a92:	d1f9      	bne.n	8006a88 <_svfiprintf_r+0x50>
 8006a94:	ebba 0b04 	subs.w	fp, sl, r4
 8006a98:	d00b      	beq.n	8006ab2 <_svfiprintf_r+0x7a>
 8006a9a:	465b      	mov	r3, fp
 8006a9c:	4622      	mov	r2, r4
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	4638      	mov	r0, r7
 8006aa2:	f7ff ff6d 	bl	8006980 <__ssputs_r>
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	f000 80aa 	beq.w	8006c00 <_svfiprintf_r+0x1c8>
 8006aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aae:	445a      	add	r2, fp
 8006ab0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 80a2 	beq.w	8006c00 <_svfiprintf_r+0x1c8>
 8006abc:	2300      	movs	r3, #0
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ac6:	f10a 0a01 	add.w	sl, sl, #1
 8006aca:	9304      	str	r3, [sp, #16]
 8006acc:	9307      	str	r3, [sp, #28]
 8006ace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ad2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ad4:	4654      	mov	r4, sl
 8006ad6:	2205      	movs	r2, #5
 8006ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006adc:	4851      	ldr	r0, [pc, #324]	; (8006c24 <_svfiprintf_r+0x1ec>)
 8006ade:	f7f9 fbd7 	bl	8000290 <memchr>
 8006ae2:	9a04      	ldr	r2, [sp, #16]
 8006ae4:	b9d8      	cbnz	r0, 8006b1e <_svfiprintf_r+0xe6>
 8006ae6:	06d0      	lsls	r0, r2, #27
 8006ae8:	bf44      	itt	mi
 8006aea:	2320      	movmi	r3, #32
 8006aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006af0:	0711      	lsls	r1, r2, #28
 8006af2:	bf44      	itt	mi
 8006af4:	232b      	movmi	r3, #43	; 0x2b
 8006af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006afa:	f89a 3000 	ldrb.w	r3, [sl]
 8006afe:	2b2a      	cmp	r3, #42	; 0x2a
 8006b00:	d015      	beq.n	8006b2e <_svfiprintf_r+0xf6>
 8006b02:	9a07      	ldr	r2, [sp, #28]
 8006b04:	4654      	mov	r4, sl
 8006b06:	2000      	movs	r0, #0
 8006b08:	f04f 0c0a 	mov.w	ip, #10
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b12:	3b30      	subs	r3, #48	; 0x30
 8006b14:	2b09      	cmp	r3, #9
 8006b16:	d94e      	bls.n	8006bb6 <_svfiprintf_r+0x17e>
 8006b18:	b1b0      	cbz	r0, 8006b48 <_svfiprintf_r+0x110>
 8006b1a:	9207      	str	r2, [sp, #28]
 8006b1c:	e014      	b.n	8006b48 <_svfiprintf_r+0x110>
 8006b1e:	eba0 0308 	sub.w	r3, r0, r8
 8006b22:	fa09 f303 	lsl.w	r3, r9, r3
 8006b26:	4313      	orrs	r3, r2
 8006b28:	9304      	str	r3, [sp, #16]
 8006b2a:	46a2      	mov	sl, r4
 8006b2c:	e7d2      	b.n	8006ad4 <_svfiprintf_r+0x9c>
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	1d19      	adds	r1, r3, #4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	9103      	str	r1, [sp, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	bfbb      	ittet	lt
 8006b3a:	425b      	neglt	r3, r3
 8006b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8006b40:	9307      	strge	r3, [sp, #28]
 8006b42:	9307      	strlt	r3, [sp, #28]
 8006b44:	bfb8      	it	lt
 8006b46:	9204      	strlt	r2, [sp, #16]
 8006b48:	7823      	ldrb	r3, [r4, #0]
 8006b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b4c:	d10c      	bne.n	8006b68 <_svfiprintf_r+0x130>
 8006b4e:	7863      	ldrb	r3, [r4, #1]
 8006b50:	2b2a      	cmp	r3, #42	; 0x2a
 8006b52:	d135      	bne.n	8006bc0 <_svfiprintf_r+0x188>
 8006b54:	9b03      	ldr	r3, [sp, #12]
 8006b56:	1d1a      	adds	r2, r3, #4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	9203      	str	r2, [sp, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bfb8      	it	lt
 8006b60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b64:	3402      	adds	r4, #2
 8006b66:	9305      	str	r3, [sp, #20]
 8006b68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c34 <_svfiprintf_r+0x1fc>
 8006b6c:	7821      	ldrb	r1, [r4, #0]
 8006b6e:	2203      	movs	r2, #3
 8006b70:	4650      	mov	r0, sl
 8006b72:	f7f9 fb8d 	bl	8000290 <memchr>
 8006b76:	b140      	cbz	r0, 8006b8a <_svfiprintf_r+0x152>
 8006b78:	2340      	movs	r3, #64	; 0x40
 8006b7a:	eba0 000a 	sub.w	r0, r0, sl
 8006b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b82:	9b04      	ldr	r3, [sp, #16]
 8006b84:	4303      	orrs	r3, r0
 8006b86:	3401      	adds	r4, #1
 8006b88:	9304      	str	r3, [sp, #16]
 8006b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b8e:	4826      	ldr	r0, [pc, #152]	; (8006c28 <_svfiprintf_r+0x1f0>)
 8006b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b94:	2206      	movs	r2, #6
 8006b96:	f7f9 fb7b 	bl	8000290 <memchr>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d038      	beq.n	8006c10 <_svfiprintf_r+0x1d8>
 8006b9e:	4b23      	ldr	r3, [pc, #140]	; (8006c2c <_svfiprintf_r+0x1f4>)
 8006ba0:	bb1b      	cbnz	r3, 8006bea <_svfiprintf_r+0x1b2>
 8006ba2:	9b03      	ldr	r3, [sp, #12]
 8006ba4:	3307      	adds	r3, #7
 8006ba6:	f023 0307 	bic.w	r3, r3, #7
 8006baa:	3308      	adds	r3, #8
 8006bac:	9303      	str	r3, [sp, #12]
 8006bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb0:	4433      	add	r3, r6
 8006bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb4:	e767      	b.n	8006a86 <_svfiprintf_r+0x4e>
 8006bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bba:	460c      	mov	r4, r1
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	e7a5      	b.n	8006b0c <_svfiprintf_r+0xd4>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	3401      	adds	r4, #1
 8006bc4:	9305      	str	r3, [sp, #20]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	f04f 0c0a 	mov.w	ip, #10
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bd2:	3a30      	subs	r2, #48	; 0x30
 8006bd4:	2a09      	cmp	r2, #9
 8006bd6:	d903      	bls.n	8006be0 <_svfiprintf_r+0x1a8>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0c5      	beq.n	8006b68 <_svfiprintf_r+0x130>
 8006bdc:	9105      	str	r1, [sp, #20]
 8006bde:	e7c3      	b.n	8006b68 <_svfiprintf_r+0x130>
 8006be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006be4:	4604      	mov	r4, r0
 8006be6:	2301      	movs	r3, #1
 8006be8:	e7f0      	b.n	8006bcc <_svfiprintf_r+0x194>
 8006bea:	ab03      	add	r3, sp, #12
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	462a      	mov	r2, r5
 8006bf0:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <_svfiprintf_r+0x1f8>)
 8006bf2:	a904      	add	r1, sp, #16
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f3af 8000 	nop.w
 8006bfa:	1c42      	adds	r2, r0, #1
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	d1d6      	bne.n	8006bae <_svfiprintf_r+0x176>
 8006c00:	89ab      	ldrh	r3, [r5, #12]
 8006c02:	065b      	lsls	r3, r3, #25
 8006c04:	f53f af2c 	bmi.w	8006a60 <_svfiprintf_r+0x28>
 8006c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c0a:	b01d      	add	sp, #116	; 0x74
 8006c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c10:	ab03      	add	r3, sp, #12
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	462a      	mov	r2, r5
 8006c16:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <_svfiprintf_r+0x1f8>)
 8006c18:	a904      	add	r1, sp, #16
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	f000 f87a 	bl	8006d14 <_printf_i>
 8006c20:	e7eb      	b.n	8006bfa <_svfiprintf_r+0x1c2>
 8006c22:	bf00      	nop
 8006c24:	08007312 	.word	0x08007312
 8006c28:	0800731c 	.word	0x0800731c
 8006c2c:	00000000 	.word	0x00000000
 8006c30:	08006981 	.word	0x08006981
 8006c34:	08007318 	.word	0x08007318

08006c38 <_printf_common>:
 8006c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c3c:	4616      	mov	r6, r2
 8006c3e:	4699      	mov	r9, r3
 8006c40:	688a      	ldr	r2, [r1, #8]
 8006c42:	690b      	ldr	r3, [r1, #16]
 8006c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	bfb8      	it	lt
 8006c4c:	4613      	movlt	r3, r2
 8006c4e:	6033      	str	r3, [r6, #0]
 8006c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c54:	4607      	mov	r7, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	b10a      	cbz	r2, 8006c5e <_printf_common+0x26>
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	6033      	str	r3, [r6, #0]
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	0699      	lsls	r1, r3, #26
 8006c62:	bf42      	ittt	mi
 8006c64:	6833      	ldrmi	r3, [r6, #0]
 8006c66:	3302      	addmi	r3, #2
 8006c68:	6033      	strmi	r3, [r6, #0]
 8006c6a:	6825      	ldr	r5, [r4, #0]
 8006c6c:	f015 0506 	ands.w	r5, r5, #6
 8006c70:	d106      	bne.n	8006c80 <_printf_common+0x48>
 8006c72:	f104 0a19 	add.w	sl, r4, #25
 8006c76:	68e3      	ldr	r3, [r4, #12]
 8006c78:	6832      	ldr	r2, [r6, #0]
 8006c7a:	1a9b      	subs	r3, r3, r2
 8006c7c:	42ab      	cmp	r3, r5
 8006c7e:	dc26      	bgt.n	8006cce <_printf_common+0x96>
 8006c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c84:	1e13      	subs	r3, r2, #0
 8006c86:	6822      	ldr	r2, [r4, #0]
 8006c88:	bf18      	it	ne
 8006c8a:	2301      	movne	r3, #1
 8006c8c:	0692      	lsls	r2, r2, #26
 8006c8e:	d42b      	bmi.n	8006ce8 <_printf_common+0xb0>
 8006c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c94:	4649      	mov	r1, r9
 8006c96:	4638      	mov	r0, r7
 8006c98:	47c0      	blx	r8
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d01e      	beq.n	8006cdc <_printf_common+0xa4>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	68e5      	ldr	r5, [r4, #12]
 8006ca2:	6832      	ldr	r2, [r6, #0]
 8006ca4:	f003 0306 	and.w	r3, r3, #6
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	bf08      	it	eq
 8006cac:	1aad      	subeq	r5, r5, r2
 8006cae:	68a3      	ldr	r3, [r4, #8]
 8006cb0:	6922      	ldr	r2, [r4, #16]
 8006cb2:	bf0c      	ite	eq
 8006cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cb8:	2500      	movne	r5, #0
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	bfc4      	itt	gt
 8006cbe:	1a9b      	subgt	r3, r3, r2
 8006cc0:	18ed      	addgt	r5, r5, r3
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	341a      	adds	r4, #26
 8006cc6:	42b5      	cmp	r5, r6
 8006cc8:	d11a      	bne.n	8006d00 <_printf_common+0xc8>
 8006cca:	2000      	movs	r0, #0
 8006ccc:	e008      	b.n	8006ce0 <_printf_common+0xa8>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4652      	mov	r2, sl
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	47c0      	blx	r8
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d103      	bne.n	8006ce4 <_printf_common+0xac>
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce4:	3501      	adds	r5, #1
 8006ce6:	e7c6      	b.n	8006c76 <_printf_common+0x3e>
 8006ce8:	18e1      	adds	r1, r4, r3
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	2030      	movs	r0, #48	; 0x30
 8006cee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cf2:	4422      	add	r2, r4
 8006cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cfc:	3302      	adds	r3, #2
 8006cfe:	e7c7      	b.n	8006c90 <_printf_common+0x58>
 8006d00:	2301      	movs	r3, #1
 8006d02:	4622      	mov	r2, r4
 8006d04:	4649      	mov	r1, r9
 8006d06:	4638      	mov	r0, r7
 8006d08:	47c0      	blx	r8
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d0e6      	beq.n	8006cdc <_printf_common+0xa4>
 8006d0e:	3601      	adds	r6, #1
 8006d10:	e7d9      	b.n	8006cc6 <_printf_common+0x8e>
	...

08006d14 <_printf_i>:
 8006d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d18:	460c      	mov	r4, r1
 8006d1a:	4691      	mov	r9, r2
 8006d1c:	7e27      	ldrb	r7, [r4, #24]
 8006d1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d20:	2f78      	cmp	r7, #120	; 0x78
 8006d22:	4680      	mov	r8, r0
 8006d24:	469a      	mov	sl, r3
 8006d26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d2a:	d807      	bhi.n	8006d3c <_printf_i+0x28>
 8006d2c:	2f62      	cmp	r7, #98	; 0x62
 8006d2e:	d80a      	bhi.n	8006d46 <_printf_i+0x32>
 8006d30:	2f00      	cmp	r7, #0
 8006d32:	f000 80d8 	beq.w	8006ee6 <_printf_i+0x1d2>
 8006d36:	2f58      	cmp	r7, #88	; 0x58
 8006d38:	f000 80a3 	beq.w	8006e82 <_printf_i+0x16e>
 8006d3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d44:	e03a      	b.n	8006dbc <_printf_i+0xa8>
 8006d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d4a:	2b15      	cmp	r3, #21
 8006d4c:	d8f6      	bhi.n	8006d3c <_printf_i+0x28>
 8006d4e:	a001      	add	r0, pc, #4	; (adr r0, 8006d54 <_printf_i+0x40>)
 8006d50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d54:	08006dad 	.word	0x08006dad
 8006d58:	08006dc1 	.word	0x08006dc1
 8006d5c:	08006d3d 	.word	0x08006d3d
 8006d60:	08006d3d 	.word	0x08006d3d
 8006d64:	08006d3d 	.word	0x08006d3d
 8006d68:	08006d3d 	.word	0x08006d3d
 8006d6c:	08006dc1 	.word	0x08006dc1
 8006d70:	08006d3d 	.word	0x08006d3d
 8006d74:	08006d3d 	.word	0x08006d3d
 8006d78:	08006d3d 	.word	0x08006d3d
 8006d7c:	08006d3d 	.word	0x08006d3d
 8006d80:	08006ecd 	.word	0x08006ecd
 8006d84:	08006df1 	.word	0x08006df1
 8006d88:	08006eaf 	.word	0x08006eaf
 8006d8c:	08006d3d 	.word	0x08006d3d
 8006d90:	08006d3d 	.word	0x08006d3d
 8006d94:	08006eef 	.word	0x08006eef
 8006d98:	08006d3d 	.word	0x08006d3d
 8006d9c:	08006df1 	.word	0x08006df1
 8006da0:	08006d3d 	.word	0x08006d3d
 8006da4:	08006d3d 	.word	0x08006d3d
 8006da8:	08006eb7 	.word	0x08006eb7
 8006dac:	680b      	ldr	r3, [r1, #0]
 8006dae:	1d1a      	adds	r2, r3, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	600a      	str	r2, [r1, #0]
 8006db4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e0a3      	b.n	8006f08 <_printf_i+0x1f4>
 8006dc0:	6825      	ldr	r5, [r4, #0]
 8006dc2:	6808      	ldr	r0, [r1, #0]
 8006dc4:	062e      	lsls	r6, r5, #24
 8006dc6:	f100 0304 	add.w	r3, r0, #4
 8006dca:	d50a      	bpl.n	8006de2 <_printf_i+0xce>
 8006dcc:	6805      	ldr	r5, [r0, #0]
 8006dce:	600b      	str	r3, [r1, #0]
 8006dd0:	2d00      	cmp	r5, #0
 8006dd2:	da03      	bge.n	8006ddc <_printf_i+0xc8>
 8006dd4:	232d      	movs	r3, #45	; 0x2d
 8006dd6:	426d      	negs	r5, r5
 8006dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ddc:	485e      	ldr	r0, [pc, #376]	; (8006f58 <_printf_i+0x244>)
 8006dde:	230a      	movs	r3, #10
 8006de0:	e019      	b.n	8006e16 <_printf_i+0x102>
 8006de2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006de6:	6805      	ldr	r5, [r0, #0]
 8006de8:	600b      	str	r3, [r1, #0]
 8006dea:	bf18      	it	ne
 8006dec:	b22d      	sxthne	r5, r5
 8006dee:	e7ef      	b.n	8006dd0 <_printf_i+0xbc>
 8006df0:	680b      	ldr	r3, [r1, #0]
 8006df2:	6825      	ldr	r5, [r4, #0]
 8006df4:	1d18      	adds	r0, r3, #4
 8006df6:	6008      	str	r0, [r1, #0]
 8006df8:	0628      	lsls	r0, r5, #24
 8006dfa:	d501      	bpl.n	8006e00 <_printf_i+0xec>
 8006dfc:	681d      	ldr	r5, [r3, #0]
 8006dfe:	e002      	b.n	8006e06 <_printf_i+0xf2>
 8006e00:	0669      	lsls	r1, r5, #25
 8006e02:	d5fb      	bpl.n	8006dfc <_printf_i+0xe8>
 8006e04:	881d      	ldrh	r5, [r3, #0]
 8006e06:	4854      	ldr	r0, [pc, #336]	; (8006f58 <_printf_i+0x244>)
 8006e08:	2f6f      	cmp	r7, #111	; 0x6f
 8006e0a:	bf0c      	ite	eq
 8006e0c:	2308      	moveq	r3, #8
 8006e0e:	230a      	movne	r3, #10
 8006e10:	2100      	movs	r1, #0
 8006e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e16:	6866      	ldr	r6, [r4, #4]
 8006e18:	60a6      	str	r6, [r4, #8]
 8006e1a:	2e00      	cmp	r6, #0
 8006e1c:	bfa2      	ittt	ge
 8006e1e:	6821      	ldrge	r1, [r4, #0]
 8006e20:	f021 0104 	bicge.w	r1, r1, #4
 8006e24:	6021      	strge	r1, [r4, #0]
 8006e26:	b90d      	cbnz	r5, 8006e2c <_printf_i+0x118>
 8006e28:	2e00      	cmp	r6, #0
 8006e2a:	d04d      	beq.n	8006ec8 <_printf_i+0x1b4>
 8006e2c:	4616      	mov	r6, r2
 8006e2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e32:	fb03 5711 	mls	r7, r3, r1, r5
 8006e36:	5dc7      	ldrb	r7, [r0, r7]
 8006e38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e3c:	462f      	mov	r7, r5
 8006e3e:	42bb      	cmp	r3, r7
 8006e40:	460d      	mov	r5, r1
 8006e42:	d9f4      	bls.n	8006e2e <_printf_i+0x11a>
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d10b      	bne.n	8006e60 <_printf_i+0x14c>
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	07df      	lsls	r7, r3, #31
 8006e4c:	d508      	bpl.n	8006e60 <_printf_i+0x14c>
 8006e4e:	6923      	ldr	r3, [r4, #16]
 8006e50:	6861      	ldr	r1, [r4, #4]
 8006e52:	4299      	cmp	r1, r3
 8006e54:	bfde      	ittt	le
 8006e56:	2330      	movle	r3, #48	; 0x30
 8006e58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e5c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006e60:	1b92      	subs	r2, r2, r6
 8006e62:	6122      	str	r2, [r4, #16]
 8006e64:	f8cd a000 	str.w	sl, [sp]
 8006e68:	464b      	mov	r3, r9
 8006e6a:	aa03      	add	r2, sp, #12
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	4640      	mov	r0, r8
 8006e70:	f7ff fee2 	bl	8006c38 <_printf_common>
 8006e74:	3001      	adds	r0, #1
 8006e76:	d14c      	bne.n	8006f12 <_printf_i+0x1fe>
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e7c:	b004      	add	sp, #16
 8006e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e82:	4835      	ldr	r0, [pc, #212]	; (8006f58 <_printf_i+0x244>)
 8006e84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	680e      	ldr	r6, [r1, #0]
 8006e8c:	061f      	lsls	r7, r3, #24
 8006e8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e92:	600e      	str	r6, [r1, #0]
 8006e94:	d514      	bpl.n	8006ec0 <_printf_i+0x1ac>
 8006e96:	07d9      	lsls	r1, r3, #31
 8006e98:	bf44      	itt	mi
 8006e9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e9e:	6023      	strmi	r3, [r4, #0]
 8006ea0:	b91d      	cbnz	r5, 8006eaa <_printf_i+0x196>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	f023 0320 	bic.w	r3, r3, #32
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	2310      	movs	r3, #16
 8006eac:	e7b0      	b.n	8006e10 <_printf_i+0xfc>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	f043 0320 	orr.w	r3, r3, #32
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	2378      	movs	r3, #120	; 0x78
 8006eb8:	4828      	ldr	r0, [pc, #160]	; (8006f5c <_printf_i+0x248>)
 8006eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ebe:	e7e3      	b.n	8006e88 <_printf_i+0x174>
 8006ec0:	065e      	lsls	r6, r3, #25
 8006ec2:	bf48      	it	mi
 8006ec4:	b2ad      	uxthmi	r5, r5
 8006ec6:	e7e6      	b.n	8006e96 <_printf_i+0x182>
 8006ec8:	4616      	mov	r6, r2
 8006eca:	e7bb      	b.n	8006e44 <_printf_i+0x130>
 8006ecc:	680b      	ldr	r3, [r1, #0]
 8006ece:	6826      	ldr	r6, [r4, #0]
 8006ed0:	6960      	ldr	r0, [r4, #20]
 8006ed2:	1d1d      	adds	r5, r3, #4
 8006ed4:	600d      	str	r5, [r1, #0]
 8006ed6:	0635      	lsls	r5, r6, #24
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	d501      	bpl.n	8006ee0 <_printf_i+0x1cc>
 8006edc:	6018      	str	r0, [r3, #0]
 8006ede:	e002      	b.n	8006ee6 <_printf_i+0x1d2>
 8006ee0:	0671      	lsls	r1, r6, #25
 8006ee2:	d5fb      	bpl.n	8006edc <_printf_i+0x1c8>
 8006ee4:	8018      	strh	r0, [r3, #0]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6123      	str	r3, [r4, #16]
 8006eea:	4616      	mov	r6, r2
 8006eec:	e7ba      	b.n	8006e64 <_printf_i+0x150>
 8006eee:	680b      	ldr	r3, [r1, #0]
 8006ef0:	1d1a      	adds	r2, r3, #4
 8006ef2:	600a      	str	r2, [r1, #0]
 8006ef4:	681e      	ldr	r6, [r3, #0]
 8006ef6:	6862      	ldr	r2, [r4, #4]
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4630      	mov	r0, r6
 8006efc:	f7f9 f9c8 	bl	8000290 <memchr>
 8006f00:	b108      	cbz	r0, 8006f06 <_printf_i+0x1f2>
 8006f02:	1b80      	subs	r0, r0, r6
 8006f04:	6060      	str	r0, [r4, #4]
 8006f06:	6863      	ldr	r3, [r4, #4]
 8006f08:	6123      	str	r3, [r4, #16]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f10:	e7a8      	b.n	8006e64 <_printf_i+0x150>
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	4632      	mov	r2, r6
 8006f16:	4649      	mov	r1, r9
 8006f18:	4640      	mov	r0, r8
 8006f1a:	47d0      	blx	sl
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d0ab      	beq.n	8006e78 <_printf_i+0x164>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	079b      	lsls	r3, r3, #30
 8006f24:	d413      	bmi.n	8006f4e <_printf_i+0x23a>
 8006f26:	68e0      	ldr	r0, [r4, #12]
 8006f28:	9b03      	ldr	r3, [sp, #12]
 8006f2a:	4298      	cmp	r0, r3
 8006f2c:	bfb8      	it	lt
 8006f2e:	4618      	movlt	r0, r3
 8006f30:	e7a4      	b.n	8006e7c <_printf_i+0x168>
 8006f32:	2301      	movs	r3, #1
 8006f34:	4632      	mov	r2, r6
 8006f36:	4649      	mov	r1, r9
 8006f38:	4640      	mov	r0, r8
 8006f3a:	47d0      	blx	sl
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d09b      	beq.n	8006e78 <_printf_i+0x164>
 8006f40:	3501      	adds	r5, #1
 8006f42:	68e3      	ldr	r3, [r4, #12]
 8006f44:	9903      	ldr	r1, [sp, #12]
 8006f46:	1a5b      	subs	r3, r3, r1
 8006f48:	42ab      	cmp	r3, r5
 8006f4a:	dcf2      	bgt.n	8006f32 <_printf_i+0x21e>
 8006f4c:	e7eb      	b.n	8006f26 <_printf_i+0x212>
 8006f4e:	2500      	movs	r5, #0
 8006f50:	f104 0619 	add.w	r6, r4, #25
 8006f54:	e7f5      	b.n	8006f42 <_printf_i+0x22e>
 8006f56:	bf00      	nop
 8006f58:	08007323 	.word	0x08007323
 8006f5c:	08007334 	.word	0x08007334

08006f60 <memmove>:
 8006f60:	4288      	cmp	r0, r1
 8006f62:	b510      	push	{r4, lr}
 8006f64:	eb01 0402 	add.w	r4, r1, r2
 8006f68:	d902      	bls.n	8006f70 <memmove+0x10>
 8006f6a:	4284      	cmp	r4, r0
 8006f6c:	4623      	mov	r3, r4
 8006f6e:	d807      	bhi.n	8006f80 <memmove+0x20>
 8006f70:	1e43      	subs	r3, r0, #1
 8006f72:	42a1      	cmp	r1, r4
 8006f74:	d008      	beq.n	8006f88 <memmove+0x28>
 8006f76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f7e:	e7f8      	b.n	8006f72 <memmove+0x12>
 8006f80:	4402      	add	r2, r0
 8006f82:	4601      	mov	r1, r0
 8006f84:	428a      	cmp	r2, r1
 8006f86:	d100      	bne.n	8006f8a <memmove+0x2a>
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f92:	e7f7      	b.n	8006f84 <memmove+0x24>

08006f94 <_free_r>:
 8006f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d048      	beq.n	800702c <_free_r+0x98>
 8006f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f9e:	9001      	str	r0, [sp, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fa6:	bfb8      	it	lt
 8006fa8:	18e4      	addlt	r4, r4, r3
 8006faa:	f000 f8d3 	bl	8007154 <__malloc_lock>
 8006fae:	4a20      	ldr	r2, [pc, #128]	; (8007030 <_free_r+0x9c>)
 8006fb0:	9801      	ldr	r0, [sp, #4]
 8006fb2:	6813      	ldr	r3, [r2, #0]
 8006fb4:	4615      	mov	r5, r2
 8006fb6:	b933      	cbnz	r3, 8006fc6 <_free_r+0x32>
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	6014      	str	r4, [r2, #0]
 8006fbc:	b003      	add	sp, #12
 8006fbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fc2:	f000 b8cd 	b.w	8007160 <__malloc_unlock>
 8006fc6:	42a3      	cmp	r3, r4
 8006fc8:	d90b      	bls.n	8006fe2 <_free_r+0x4e>
 8006fca:	6821      	ldr	r1, [r4, #0]
 8006fcc:	1862      	adds	r2, r4, r1
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	bf04      	itt	eq
 8006fd2:	681a      	ldreq	r2, [r3, #0]
 8006fd4:	685b      	ldreq	r3, [r3, #4]
 8006fd6:	6063      	str	r3, [r4, #4]
 8006fd8:	bf04      	itt	eq
 8006fda:	1852      	addeq	r2, r2, r1
 8006fdc:	6022      	streq	r2, [r4, #0]
 8006fde:	602c      	str	r4, [r5, #0]
 8006fe0:	e7ec      	b.n	8006fbc <_free_r+0x28>
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	b10b      	cbz	r3, 8006fec <_free_r+0x58>
 8006fe8:	42a3      	cmp	r3, r4
 8006fea:	d9fa      	bls.n	8006fe2 <_free_r+0x4e>
 8006fec:	6811      	ldr	r1, [r2, #0]
 8006fee:	1855      	adds	r5, r2, r1
 8006ff0:	42a5      	cmp	r5, r4
 8006ff2:	d10b      	bne.n	800700c <_free_r+0x78>
 8006ff4:	6824      	ldr	r4, [r4, #0]
 8006ff6:	4421      	add	r1, r4
 8006ff8:	1854      	adds	r4, r2, r1
 8006ffa:	42a3      	cmp	r3, r4
 8006ffc:	6011      	str	r1, [r2, #0]
 8006ffe:	d1dd      	bne.n	8006fbc <_free_r+0x28>
 8007000:	681c      	ldr	r4, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	6053      	str	r3, [r2, #4]
 8007006:	4421      	add	r1, r4
 8007008:	6011      	str	r1, [r2, #0]
 800700a:	e7d7      	b.n	8006fbc <_free_r+0x28>
 800700c:	d902      	bls.n	8007014 <_free_r+0x80>
 800700e:	230c      	movs	r3, #12
 8007010:	6003      	str	r3, [r0, #0]
 8007012:	e7d3      	b.n	8006fbc <_free_r+0x28>
 8007014:	6825      	ldr	r5, [r4, #0]
 8007016:	1961      	adds	r1, r4, r5
 8007018:	428b      	cmp	r3, r1
 800701a:	bf04      	itt	eq
 800701c:	6819      	ldreq	r1, [r3, #0]
 800701e:	685b      	ldreq	r3, [r3, #4]
 8007020:	6063      	str	r3, [r4, #4]
 8007022:	bf04      	itt	eq
 8007024:	1949      	addeq	r1, r1, r5
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	6054      	str	r4, [r2, #4]
 800702a:	e7c7      	b.n	8006fbc <_free_r+0x28>
 800702c:	b003      	add	sp, #12
 800702e:	bd30      	pop	{r4, r5, pc}
 8007030:	200173d4 	.word	0x200173d4

08007034 <_malloc_r>:
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007036:	1ccd      	adds	r5, r1, #3
 8007038:	f025 0503 	bic.w	r5, r5, #3
 800703c:	3508      	adds	r5, #8
 800703e:	2d0c      	cmp	r5, #12
 8007040:	bf38      	it	cc
 8007042:	250c      	movcc	r5, #12
 8007044:	2d00      	cmp	r5, #0
 8007046:	4606      	mov	r6, r0
 8007048:	db01      	blt.n	800704e <_malloc_r+0x1a>
 800704a:	42a9      	cmp	r1, r5
 800704c:	d903      	bls.n	8007056 <_malloc_r+0x22>
 800704e:	230c      	movs	r3, #12
 8007050:	6033      	str	r3, [r6, #0]
 8007052:	2000      	movs	r0, #0
 8007054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007056:	f000 f87d 	bl	8007154 <__malloc_lock>
 800705a:	4921      	ldr	r1, [pc, #132]	; (80070e0 <_malloc_r+0xac>)
 800705c:	680a      	ldr	r2, [r1, #0]
 800705e:	4614      	mov	r4, r2
 8007060:	b99c      	cbnz	r4, 800708a <_malloc_r+0x56>
 8007062:	4f20      	ldr	r7, [pc, #128]	; (80070e4 <_malloc_r+0xb0>)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	b923      	cbnz	r3, 8007072 <_malloc_r+0x3e>
 8007068:	4621      	mov	r1, r4
 800706a:	4630      	mov	r0, r6
 800706c:	f000 f862 	bl	8007134 <_sbrk_r>
 8007070:	6038      	str	r0, [r7, #0]
 8007072:	4629      	mov	r1, r5
 8007074:	4630      	mov	r0, r6
 8007076:	f000 f85d 	bl	8007134 <_sbrk_r>
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	d123      	bne.n	80070c6 <_malloc_r+0x92>
 800707e:	230c      	movs	r3, #12
 8007080:	6033      	str	r3, [r6, #0]
 8007082:	4630      	mov	r0, r6
 8007084:	f000 f86c 	bl	8007160 <__malloc_unlock>
 8007088:	e7e3      	b.n	8007052 <_malloc_r+0x1e>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	1b5b      	subs	r3, r3, r5
 800708e:	d417      	bmi.n	80070c0 <_malloc_r+0x8c>
 8007090:	2b0b      	cmp	r3, #11
 8007092:	d903      	bls.n	800709c <_malloc_r+0x68>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	441c      	add	r4, r3
 8007098:	6025      	str	r5, [r4, #0]
 800709a:	e004      	b.n	80070a6 <_malloc_r+0x72>
 800709c:	6863      	ldr	r3, [r4, #4]
 800709e:	42a2      	cmp	r2, r4
 80070a0:	bf0c      	ite	eq
 80070a2:	600b      	streq	r3, [r1, #0]
 80070a4:	6053      	strne	r3, [r2, #4]
 80070a6:	4630      	mov	r0, r6
 80070a8:	f000 f85a 	bl	8007160 <__malloc_unlock>
 80070ac:	f104 000b 	add.w	r0, r4, #11
 80070b0:	1d23      	adds	r3, r4, #4
 80070b2:	f020 0007 	bic.w	r0, r0, #7
 80070b6:	1ac2      	subs	r2, r0, r3
 80070b8:	d0cc      	beq.n	8007054 <_malloc_r+0x20>
 80070ba:	1a1b      	subs	r3, r3, r0
 80070bc:	50a3      	str	r3, [r4, r2]
 80070be:	e7c9      	b.n	8007054 <_malloc_r+0x20>
 80070c0:	4622      	mov	r2, r4
 80070c2:	6864      	ldr	r4, [r4, #4]
 80070c4:	e7cc      	b.n	8007060 <_malloc_r+0x2c>
 80070c6:	1cc4      	adds	r4, r0, #3
 80070c8:	f024 0403 	bic.w	r4, r4, #3
 80070cc:	42a0      	cmp	r0, r4
 80070ce:	d0e3      	beq.n	8007098 <_malloc_r+0x64>
 80070d0:	1a21      	subs	r1, r4, r0
 80070d2:	4630      	mov	r0, r6
 80070d4:	f000 f82e 	bl	8007134 <_sbrk_r>
 80070d8:	3001      	adds	r0, #1
 80070da:	d1dd      	bne.n	8007098 <_malloc_r+0x64>
 80070dc:	e7cf      	b.n	800707e <_malloc_r+0x4a>
 80070de:	bf00      	nop
 80070e0:	200173d4 	.word	0x200173d4
 80070e4:	200173d8 	.word	0x200173d8

080070e8 <_realloc_r>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	4607      	mov	r7, r0
 80070ec:	4614      	mov	r4, r2
 80070ee:	460e      	mov	r6, r1
 80070f0:	b921      	cbnz	r1, 80070fc <_realloc_r+0x14>
 80070f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070f6:	4611      	mov	r1, r2
 80070f8:	f7ff bf9c 	b.w	8007034 <_malloc_r>
 80070fc:	b922      	cbnz	r2, 8007108 <_realloc_r+0x20>
 80070fe:	f7ff ff49 	bl	8006f94 <_free_r>
 8007102:	4625      	mov	r5, r4
 8007104:	4628      	mov	r0, r5
 8007106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007108:	f000 f830 	bl	800716c <_malloc_usable_size_r>
 800710c:	42a0      	cmp	r0, r4
 800710e:	d20f      	bcs.n	8007130 <_realloc_r+0x48>
 8007110:	4621      	mov	r1, r4
 8007112:	4638      	mov	r0, r7
 8007114:	f7ff ff8e 	bl	8007034 <_malloc_r>
 8007118:	4605      	mov	r5, r0
 800711a:	2800      	cmp	r0, #0
 800711c:	d0f2      	beq.n	8007104 <_realloc_r+0x1c>
 800711e:	4631      	mov	r1, r6
 8007120:	4622      	mov	r2, r4
 8007122:	f7ff fbf7 	bl	8006914 <memcpy>
 8007126:	4631      	mov	r1, r6
 8007128:	4638      	mov	r0, r7
 800712a:	f7ff ff33 	bl	8006f94 <_free_r>
 800712e:	e7e9      	b.n	8007104 <_realloc_r+0x1c>
 8007130:	4635      	mov	r5, r6
 8007132:	e7e7      	b.n	8007104 <_realloc_r+0x1c>

08007134 <_sbrk_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d06      	ldr	r5, [pc, #24]	; (8007150 <_sbrk_r+0x1c>)
 8007138:	2300      	movs	r3, #0
 800713a:	4604      	mov	r4, r0
 800713c:	4608      	mov	r0, r1
 800713e:	602b      	str	r3, [r5, #0]
 8007140:	f000 f81e 	bl	8007180 <_sbrk>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_sbrk_r+0x1a>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	b103      	cbz	r3, 800714e <_sbrk_r+0x1a>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	20017558 	.word	0x20017558

08007154 <__malloc_lock>:
 8007154:	4801      	ldr	r0, [pc, #4]	; (800715c <__malloc_lock+0x8>)
 8007156:	f000 b811 	b.w	800717c <__retarget_lock_acquire_recursive>
 800715a:	bf00      	nop
 800715c:	20017560 	.word	0x20017560

08007160 <__malloc_unlock>:
 8007160:	4801      	ldr	r0, [pc, #4]	; (8007168 <__malloc_unlock+0x8>)
 8007162:	f000 b80c 	b.w	800717e <__retarget_lock_release_recursive>
 8007166:	bf00      	nop
 8007168:	20017560 	.word	0x20017560

0800716c <_malloc_usable_size_r>:
 800716c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007170:	1f18      	subs	r0, r3, #4
 8007172:	2b00      	cmp	r3, #0
 8007174:	bfbc      	itt	lt
 8007176:	580b      	ldrlt	r3, [r1, r0]
 8007178:	18c0      	addlt	r0, r0, r3
 800717a:	4770      	bx	lr

0800717c <__retarget_lock_acquire_recursive>:
 800717c:	4770      	bx	lr

0800717e <__retarget_lock_release_recursive>:
 800717e:	4770      	bx	lr

08007180 <_sbrk>:
 8007180:	4b04      	ldr	r3, [pc, #16]	; (8007194 <_sbrk+0x14>)
 8007182:	6819      	ldr	r1, [r3, #0]
 8007184:	4602      	mov	r2, r0
 8007186:	b909      	cbnz	r1, 800718c <_sbrk+0xc>
 8007188:	4903      	ldr	r1, [pc, #12]	; (8007198 <_sbrk+0x18>)
 800718a:	6019      	str	r1, [r3, #0]
 800718c:	6818      	ldr	r0, [r3, #0]
 800718e:	4402      	add	r2, r0
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	4770      	bx	lr
 8007194:	200173dc 	.word	0x200173dc
 8007198:	20017568 	.word	0x20017568

0800719c <_init>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr

080071a8 <_fini>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr
